var documenterSearchIndex = {"docs":
[{"location":"klftools_int.html#Basic-reductions-of-general-and-structured-linear-matrix-pencils","page":"Basic reductions of general and structured linear matrix pencils","title":"Basic reductions of general and structured linear matrix pencils","text":"","category":"section"},{"location":"klftools_int.html#MatrixPencils._preduceBF!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._preduceBF!","text":"_preduceBF!(M, N, Q, Z, L::Union{AbstractMatrix,Missing}, R::Union{AbstractMatrix,Missing}; \n            fast = true, atol = 0, rtol, roff = 0, coff = 0, rtrail = 0, ctrail = 0, \n            withQ = true, withZ = true) -> n, m, p\n\nReduce the partitioned matrix pencil M - λN \n\n          [   *         *         *  ] roff\n M - λN = [   0      M22-λN22     *  ] npp\n          [   0         0         *  ] rtrail\n            coff       npm     ctrail\n\nto an equivalent basic form F - λG = Q1'*(M - λN)*Z1 using orthogonal transformation matrices Q1 and Z1  such that the subpencil M22 - λN22 is transformed into the following standard form\n\n                   | B  | A-λE | \n      F22 - λG22 = |----|------| ,        \n                   | D  |  C   |\n\nwhere E is an nxn non-singular matrix, and A, B, C, D are nxn-, nxm-, pxn- and pxm-dimensional matrices, respectively. The order n of E is equal to the numerical rank of N determined using the absolute tolerance atol and  relative tolerance rtol. M and N are overwritten by F and G, respectively. \n\nThe performed orthogonal or unitary transformations are accumulated in Q (i.e., Q <- Q*Q1), if withQ = true, and  Z (i.e., Z <- Z*Z1), if withZ = true. \n\nThe  matrix L is overwritten by Q1'*L unless L = missing and the  matrix R is overwritten by R*Z1 unless R = missing. \n\nIf fast = true, E is determined upper triangular using a rank revealing QR-decomposition with column pivoting of N22  and n is evaluated as the number of nonzero diagonal elements of the R factor, whose magnitudes are greater than  tol = max(atol,abs(R[1,1])*rtol).  If fast = false,  E is determined diagonal using a rank revealing SVD-decomposition of N22 and  n is evaluated as the number of singular values greater than tol = max(atol,smax*rtol), where smax  is the largest singular value.  The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._preduce1!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._preduce1!","text":"_preduce1!(n::Int, m::Int, p::Int, M::AbstractMatrix, N::AbstractMatrix,\n           Q::Union{AbstractMatrix,Nothing}, Z::Union{AbstractMatrix,Nothing}, tol,\n           L::Union{AbstractMatrix{T},Missing} = missing, R::Union{AbstractMatrix{T},Missing} = missing; \n           fast = true, roff = 0, coff = 0, rtrail = 0, ctrail = 0, withQ = true, withZ = true)\n\nReduce the structured pencil  M - λN\n\n M = [ *  * *  *  ] roff          N = [ *  * *  *  ] roff\n     [ 0  B A  *  ] n                 [ 0  0 E  *  ] n\n     [ 0  D C  *  ] p                 [ 0  0 0  *  ] p\n     [ 0  * *  *  ] rtrail            [ 0  * *  *  ] rtrail\n     coff m n ctrail                  coff m n ctrail\n\nwith E upper triangular and nonsingular to the following form M1 - λN1 = Q1'*(M - λN)*Z1 with\n\nM1 = [ *   *    *    *    *  ] roff       N1 = [ *   *  *   *    *   ] roff\n     [ 0   B1   A11 A12   *  ] τ+ρ             [ 0   0  E11 E12  *   ] τ+ρ\n     [ 0   0    B2  A22   *  ] n-ρ             [ 0   0  0   E22  *   ] n-ρ\n     [ 0   0    D2  C2    *  ] p-τ             [ 0   0  0   0    *   ] p-τ\n     [ 0   *    *   *     *  ] rtrail          [ 0   *  *   *    *   ] rtrail\n      coff m    ρ  n-ρ ctrail                   coff m  ρ  n-ρ ctrail\n\nwhere τ = rank D, B1 is full row rank, and E22 is upper triangular and nonsingular. The performed orthogonal or unitary transformations are accumulated in Q (i.e., Q <- Q*Q1), if withQ = true, and  Z (i.e., Z <- Z*Z1), if withZ = true. The rank decisions use the absolute tolerance tol for the nonzero elements of M.\n\nThe  matrix L is overwritten by Q1'*L unless L = missing and the  matrix R is overwritten by R*Z1 unless R = missing. \n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._preduce3!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._preduce3!","text":"_preduce3!(n::Int, m::Int, M::AbstractMatrix, N::AbstractMatrix, \n           Q::Union{AbstractMatrix,Nothing}, Z::Union{AbstractMatrix,Nothing}, tol,\n           L::Union{AbstractMatrix{T},Missing} = missing, R::Union{AbstractMatrix{T},Missing} = missing; \n           fast = true, roff = 0, coff = 0, rtrail = 0, ctrail = 0,  withQ = true, withZ = true)\n\nReduce the structured pencil  \n\n    [ *  *  *   *  ] roff        [ *  *  *   *  ] roff\nM = [ 0  B  A   *  ] n       N = [ 0  0  E   *  ] n\n    [ 0  *  *   *  ] rtrail      [ 0  *  *   *  ] rtrail\n    coff m  n ctrail             coff m  n ctrail\n\nwith E upper triangular and nonsingular to the following form M1 - λN1 = Q1'*(M - λN)*Z1 with\n\n     [ *  *   *   *     *  ] roff        [ *  *  *   *     *  ] roff\nM1 = [ 0  B1  A11 A12   *  ] ρ      N1 = [ 0  0  E11 E12   *  ] ρ\n     [ 0  0   A21 A22   *  ] n-ρ         [ 0  0  0   E22   *  ] n-ρ\n     [ 0  *   *   *     *  ] rtrail      [ 0  *  *   *     *  ] rtrail\n     coff m   ρ   n-ρ ctrail             coff m  ρ   n-ρ ctrail\n\nwhere B1 has full row rank ρ and E11 and E22 are upper triangular and nonsingular.  The performed orthogonal or unitary transformations are accumulated in Q (i.e., Q <- Q*Q1), if withQ = true, and  Z (i.e., Z <- Z*Z1), if withZ = true. The rank decisions use the absolute tolerance tol for the nonzero elements of M.\n\nThe  matrix L is overwritten by Q1'*L unless L = missing and the  matrix R is overwritten by R*Z1 unless R = missing. \n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._preduce2!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._preduce2!","text":"_preduce2!(n::Int, m::Int, p::Int, M::AbstractMatrix, N::AbstractMatrix, \n           Q::Union{AbstractMatrix,Nothing}, Z::Union{AbstractMatrix,Nothing}, tol,\n           L::Union{AbstractMatrix{T},Missing} = missing, R::Union{AbstractMatrix{T},Missing} = missing; \n           fast = true, roff = 0, coff = 0, rtrail = 0, ctrail = 0, withQ = true, withZ = true)\n\nReduce the structured pencil  \n\n M = [ *  * *   *  ] roff          N = [ *  * *  *   ] roff\n     [ *  B A   *  ] n                 [ 0  0 E  *   ] n\n     [ *  D C   *  ] p                 [ 0  0 0  *   ] p\n     [ 0  0 0   *  ] rtrail            [ 0  0 0  *   ] rtrail\n     coff m n ctrail                   coff m n ctrail\n\nwith E upper triangular and nonsingular to the following form M1 - λN1 = Q1'*(M - λN)*Z1 with\n\nM1 = [ *    *   *    *    *  ] roff       N1 = [ *    *   *   *    *   ] roff\n     [ *    B1  A11 A12   *  ] n-ρ             [ 0    0  E11 E12   *   ] n-ρ\n     [ *    D1  C1  A22   *  ] ρ               [ 0    0   0  E22   *   ] ρ\n     [ 0    0   0   C2    *  ] p               [ 0    0   0   0    *   ] p\n     [ 0    0   0   0     *  ] rtrail          [ 0    0   0   0    *   ] rtrail\n      coff m-τ n-ρ τ+ρ ctrail                   coff m-τ n-ρ τ+ρ ctrail\n\nwhere τ = rank D, C2 is full column rank and E11 and E22 are upper triangular and nonsingular.  The performed orthogonal or unitary transformations are accumulated in Q (i.e., Q <- Q*Q1), if withQ = true, and  Z (i.e., Z <- Z*Z1), if withZ = true. The rank decisions use the absolute tolerance tol for the nonzero elements of M.\n\nThe  matrix L is overwritten by Q1'*L unless L = missing and the  matrix R is overwritten by R*Z1 unless R = missing. \n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._preduce4!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._preduce4!","text":"_preduce4!(n::Int, m::Int, p::Int, M::AbstractMatrix, N::AbstractMatrix, \n           Q::Union{AbstractMatrix,Nothing}, Z::Union{AbstractMatrix,Nothing}, tol,\n           L::Union{AbstractMatrix{T},Missing} = missing, R::Union{AbstractMatrix{T},Missing} = missing; \n           fast = true, roff = 0, coff = 0, rtrail = 0, ctrail = 0,  withQ = true, withZ = true)\n\nReduce the structured pencil  \n\nM = [ *  *  *   *  ] roff          N = [ *  *  *   *  ] roff\n    [ 0  B  A   *  ]  n                [ 0  0  E   *  ]  n\n    [ 0  0  C   *  ]  p                [ 0  0  0   *  ]  p\n    [ 0  *  *   *  ] rtrail            [ 0  *  *   *  ] rtrail\n    coff m  n ctrail                   coff m  n ctrail\n\nwith E upper triangular and nonsingular to the following form M1 - λN1 = Q1'*(M - λN)*Z1 with\n\nM1 = [ *  *   *   *    * ] roff         N1 = [ *  *  *   *    * ] roff\n     [ 0  B1  A11 A12  * ]  n-ρ              [ 0  0  E11 E12  * ]  n-ρ\n     [ 0  B2  A21 A22  * ]  ρ                [ 0  0  0   E22  * ]  ρ\n     [ 0  0   0   C1   * ]  p                [ 0  0  0   0    * ]  p\n     [ 0  *   *   *    * ] rtrail            [ 0  *  *   *    * ] rtrail\n     coff m  n-ρ  ρ ctrail                   coff m n-ρ  ρ ctrail\n\nwhere C1 has full column rank and E11 and E22 are upper triangular and nonsingular.  The performed orthogonal or unitary transformations are accumulated in Q (i.e., Q <- Q*Q1), if withQ = true, and  Z (i.e., Z <- Z*Z1), if withZ = true. The rank decisions use the absolute tolerance tol for the nonzero elements of M.\n\nThe  matrix L is overwritten by Q1'*L unless L = missing and the  matrix R is overwritten by R*Z1 unless R = missing. \n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._sreduceB!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._sreduceB!","text":"_sreduceB!(A::AbstractMatrix{T},E::AbstractMatrix{T},B::AbstractMatrix{T},Q::Union{AbstractMatrix{T},Nothing}, tol::Real; \n            fast = true, withQ = true) -> ρ\n\nReduce the n x m matrix B using an orthogonal or unitary similarity transformation Q1 to the row  compressed form \n\n BT = Q1'*B = [ B11 ] ρ\n              [  0  ] n-ρ\n                 m\n\nwhere B11 has full row rank ρ. Q1'*A, Q1'*E and BT are returned in A, E and B, respectively.  The performed orthogonal or unitary transformations are accumulated in Q if withQ = true.  The rank decisions use the absolute tolerance tol for the nonzero elements of B.\n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._sreduceBA!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._sreduceBA!","text":"_sreduceBA!(n::Int,m::Int,A::AbstractMatrix{T},B::AbstractMatrix{T},C::Union{AbstractMatrix{T},Missing},Q::Union{AbstractMatrix{T},Nothing}, tol::Real; \n            fast = true, init = true, roff = 0, coff = 0, withQ = true) -> ρ\n\nReduce for init = true, the pair (A,B) using an orthogonal or unitary similarity transformation on the matrices A and B of the form  H =  Q1'*A*Q1, G = Q1'*B, to the form\n\n G = [ B11 ]  H = [ A11 A12 ] ρ\n     [ 0   ]        B2  A22 ] n-ρ\n       m            ρ   n-ρ\n\nwhere B11 has full row rank ρ. H, G and C*Q1 are returned in A, B and C, respectively.  The performed orthogonal or unitary transformations are accumulated in Q if withQ = true.  The rank decisions use the absolute tolerance tol for the nonzero elements of B.\n\nReduce for init = false, the matrix A of the form\n\nA = [ *   *  *  ] roff\n    [ 0   B1 A1 ] n\n     coff m  n\n\nusing an orthogonal or unitary similarity transformation on the submatrices A1 and B1 of the form  H1 =  Q1'A1Q1, G1 = Q1'*B1, to the form\n\n                                 [ *   *    *   *   ] roff\n H = diag(I,Q1')*A*diag(I,Q1) =  [ *   B11  A11 A12 ] ρ\n                                 [ 0   0    B2  A22 ] n-ρ\n                                  coff m    ρ   n-ρ\n\nwhere B11 has full row rank ρ. H and C*diag(I,Q1) are returned in A and C, respectively,  and B is unchanged. The performed orthogonal or unitary transformations are accumulated in Q if withQ = true.  The rank decisions use the absolute tolerance tol for the nonzero elements of A.\n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._sreduceBAE!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._sreduceBAE!","text":"_sreduceBAE!(n::Int,m::Int,A::AbstractMatrix{T},E::AbstractMatrix{T},B::AbstractMatrix{T},C::Union{AbstractMatrix{T},Missing},\n             Q::Union{AbstractMatrix{T},Nothing}, Z::Union{AbstractMatrix{T},Nothing}, tol::Real; \n             fast = true, init = true, roff = 0, coff = 0, withQ = true, withZ = true)\n\nReduce for init = true, the pair (A-λE,B), with E upper-triangular, using an orthogonal or unitary  similarity transformations on the matrices A, E and B of the form At =  Q1'*A*Z1, Et =  Q1'*E*Z1,  Bt = Q1'*B, to the form\n\n Bt = [ B11 ]  At = [ A11 A12 ] ρ     Et = [ E11 E12 ] ρ\n      [ 0   ]         B2  A22 ] n-ρ        [  0  E22 ] n-ρ\n        m             ρ   n-ρ                 ρ   n-ρ\n\nwhere B11 has full row rank ρ and Et is upper-triangular. Bt, At, Et and C*Z1 are returned in  B, A, E and C, respectively.  The performed orthogonal or unitary transformations are accumulated in Q as Q <- Q*Q1 if withQ = true and in Z as Z <- Z*Z1 if withZ = true. The rank decisions use the absolute tolerance tol for the nonzero elements of B.\n\nReduce for init = false, the matrices A and E of the form\n\nA = [ *   *  *  ] roff     E = [ *   *  *  ] roff\n    [ 0   B1 A1 ] n            [ 0   0  E1 ] n\n     coff m  n                  coff m  n\n\nwith E1 upper triangular, using an orthogonal or unitary similarity transformations on the submatrices  A1, E1 and B1 of the form At1 =  Q1'*A1*Z1, Et1 =  Q1'*E1*Z1, Bt1 = Q1'*B1, to the form\n\n                                  [ *   *    *   *   ] roff\n At = diag(I,Q1')*A*diag(I,Z1) =  [ 0   B11  A11 A12 ] ρ\n                                  [ 0   0    B2  A22 ] n-ρ\n                                   coff m    ρ   n-ρ    \n\n                                  [ *   *    *   *   ] roff\n Et = diag(I,Q1')*A*diag(I,Z1) =  [ 0   0    E11 E12 ] ρ\n                                  [ 0   0    0   E22 ] n-ρ\n                                   coff m    ρ   n-ρ\n\nwhere B11 has full row rank ρ, and E11 and E22 are upper triangular. At, Et and C*diag(I,Z1)  are returned in A, E and C, respectively, and B is unchanged.  The performed orthogonal or unitary transformations are accumulated in Q as Q <- Q*diag(I,Q1) if withQ = true and in Z as Z <- Z*diag(I,Z1) if withZ = true. The rank decisions use the absolute tolerance tol for the nonzero elements of A.\n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._sreduceC!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._sreduceC!","text":"_sreduceC!(A::AbstractMatrix{T},E::AbstractMatrix{T},C::AbstractMatrix{T},Z::Union{AbstractMatrix{T},Nothing}, tol::Real; \n            fast = true, withZ = true) -> ρ\n\nReduce the p x n matrix C using an orthogonal or unitary similarity transformation Z1 to the column  compressed form \n\n CT = C*Z1 = [ 0  C11 ] p\n              n-ρ  ρ\n\nwhere C11 has full column rank ρ. A*Z1, E*Z1 and CT are returned in A, E and C, respectively.  The performed orthogonal or unitary transformations are accumulated in Z if withZ = true.  The rank decisions use the absolute tolerance tol for the nonzero elements of C.\n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._sreduceAC!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._sreduceAC!","text":"_sreduceAC!(n::Int,p::Int,A::AbstractMatrix{T},C::AbstractMatrix{T},B::Union{AbstractMatrix{T},Missing},\n            Q::Union{AbstractMatrix{T},Nothing}, tol::Real; \n            fast = true, init = true, rtrail = 0, ctrail = 0, withQ = true) -> ρ\n\nReduce for init = true, the pair (A,C) using an orthogonal or unitary similarity transformation on the matrices A and C of the form  H =  Q1'*A*Q1, L = C*Q1, to the form\n\n H = [ A11 A12 ] n-ρ    L = [ 0  C11 ] p\n     [ C2  A22 ] ρ           n-ρ  ρ\n       n-ρ  ρ\n\nwhere C11 has full column rank ρ. H, L and Q1'*B are returned in A, C and B, respectively.  The performed orthogonal or unitary transformations are accumulated in Q if withQ = true.  The rank decisions use the absolute tolerance tol for the nonzero elements of C.\n\nReduce for init = false, the matrix A of the form\n\n    [ A1  *   ] n\nA = [ C1  *   ] p\n    [ 0   *   ] rtrail\n      n ctrail\n\nusing an orthogonal or unitary similarity transformation on the submatrices A1 and C1 of the form  H1 =  Q1'A1Q1, L1 = C1*Q1, to the form\n\n                                 [ A11 A12  *   ] n-ρ\n                                 [ C2  A22  *   ] ρ\n H = diag(Q1',I)*A*diag(Q1,I) =  [ 0   C11  *   ] p\n                                 [ 0   0    *   ] rtrail\n                                  n-ρ  ρ  ctrail\n\nwhere C11 has full column rank ρ. H and diag(Q1',I)*B are returned in A and B, respectively,  and C is unchanged. The performed orthogonal or unitary transformations are accumulated in Q if withQ = true.  The rank decisions use the absolute tolerance tol for the nonzero elements of A.\n\n\n\n\n\n","category":"function"},{"location":"klftools_int.html#MatrixPencils._sreduceAEC!","page":"Basic reductions of general and structured linear matrix pencils","title":"MatrixPencils._sreduceAEC!","text":"_sreduceAEC!(n::Int,p::Int,A::AbstractMatrix{T},E::AbstractMatrix{T},C::AbstractMatrix{T},B::Union{AbstractMatrix{T},Missing},\n            Q::Union{AbstractMatrix{T},Nothing}, Z::Union{AbstractMatrix{T},Nothing}, tol::Real; \n            fast = true, init = true, rtrail = 0, ctrail = 0, withQ = true, withZ = true) -> ρ\n\nReduce for init = true, the pair (A-λE,C), with E upper-triangular, using an orthogonal or unitary  similarity transformations on the matrices A, E and C of the form At =  Q1'*A*Z1, Et =  Q1'*E*Z1,  Ct = C*Z1, to the form\n\n Ct = [ 0  C11 ] p   At = [ A11 A12 ] n-ρ   Et = [ E11 E12 ] n-ρ  \n       n-ρ  ρ             [ C2  A22 ] ρ          [  0  E22 ] ρ   \n                            n-ρ  ρ                 n-ρ  ρ\n\nwhere C11 has full column rank ρ and Et is upper-triangular. Ct, At, Et and Q1'*B are returned in  C, A, E and B, respectively.  The performed orthogonal or unitary transformations are accumulated in Q as Q <- Q*Q1 if withQ = true and in Z as Z <- Z*Z1 if withZ = true. The rank decisions use the absolute tolerance tol for the nonzero elements of C.\n\nReduce for init = false, the matrices A and E of the form\n\n    [ A1  *   ] n               [ E1  *   ] n\nA = [ C1  *   ] p          E =  [ 0   *   ] p\n    [ 0   *   ] rtrail          [ 0   *   ] rtrail\n      n ctrail\n\nwith E1 upper triangular, using an orthogonal or unitary similarity transformations on the submatrices  A1, E1 and C1 of the form At1 =  Q1'*A1*Z1, Et1 =  Q1'*E1*Z1, Ct1 = C1*Z1, to the form\n\n                                  [ A11 A12  *   ] n-ρ\n                                  [ C2  A22  *   ] ρ\n At = diag(Q1',I)*A*diag(Q1,I) =  [ 0   C11  *   ] p\n                                  [ 0   0    *   ] rtrail\n                                   n-ρ  ρ  ctrail    \n\n                                  [ E11 E12  *   ] n-ρ\n                                  [ 0   E22  *   ] ρ\n Et = diag(Q1',I)*A*diag(Q1,I) =  [ 0   0    *   ] p\n                                  [ 0   0    *   ] rtrail\n                                   n-ρ  ρ  ctrail\n\nwhere C11 has full column rank ρ, and E11 and E22 are upper triangular. At, Et and diag(I,Q1')*B  are returned in A, E and B, respectively, and C is unchanged.  The performed orthogonal or unitary transformations are accumulated in Q as Q <- Q*diag(I,Q1) if withQ = true and in Z as Z <- Z*diag(I,Z1) if withZ = true. The rank decisions use the absolute tolerance tol for the nonzero elements of A.\n\n\n\n\n\n","category":"function"},{"location":"makeindex.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"makeindex.html","page":"Index","title":"Index","text":"Pages = [\"klftools.md\", \"klfapps.md\", \"sklftools.md\", \"sklfapps.md\", \"pregular\",\"lstools.md\",\"pmtools.md\",\"pmapps.md\", \"rmtools.md\", \"rmapps.md\", \"klftools_int.md\" ]\nModule = [\"MatrixPencils\"]\nOrder = [:type, :function]","category":"page"},{"location":"sklftools.html#Manipulation-of-structured-linear-matrix-pencils","page":"Manipulation of structured linear matrix pencils","title":"Manipulation of structured linear matrix pencils","text":"","category":"section"},{"location":"sklftools.html","page":"Manipulation of structured linear matrix pencils","title":"Manipulation of structured linear matrix pencils","text":"Function Description\nsreduceBF Reduction to the basic condensed form  [B A-λE; D C] with E upper triangular and nonsingular.\nsklf Computation of the Kronecker-like form exhibiting the full Kronecker structure\nsklf_right Computation of the Kronecker-like form exhibiting the right Kronecker structure\nsklf_left Computation of the Kronecker-like form exhibiting the left Kronecker structure\ngsklf Computation of several row partition preserving special Kronecker-like forms","category":"page"},{"location":"sklftools.html#MatrixPencils.sklf","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sklf","text":"sklf(A, E, B, C, D; fast = true, finite_infinite = false, ut = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (F, G, Q, Z, νr, μr, νi, nf, νl, μl)\n\nReduce the structured matrix pencil M - λN \n\n           | A-λE | B | \n  M - λN = |------|---|\n           |  C   | D |\n\nto an equivalent form F - λG = Q'*(M - λN)*Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices F and G are in the following Kronecker-like form exhibiting the complete Kronecker structure:\n\n            |  Mr-λNr  |     *      |    *    |\n            |----------|------------|---------|\n  F - λG =  |    O     | Mreg-λNreg |    *    |\n            |----------|------------|---------|\n            |    O     |     0      |  Ml-λNl |\n\nThe full row rank pencil Mr-λNr is in a staircase form, contains the right Kronecker indices  of the pencil M-λNand has the form\n\n     Mr-λNr  = | Br | Ar-λEr |,\n\nwhere Er is upper triangular and nonsingular.  The nr-dimensional vectors νr and μr contain the row and, respectively, column dimensions of the blocks of the staircase form  Mr-λNr such that the i-th block has dimensions νr[i] x μr[i] and  has full row rank. The difference μr[i]-νr[i] for i = 1, 2, ..., nr is the number of elementary Kronecker  blocks of size (i-1) x i. If ut = true, the full row rank diagonal blocks of Mr are reduced to the form [0 X]  with X upper triangular and nonsingular and the full column rank supradiagonal blocks of Nr are reduced to the form [Y; 0] with Y upper triangular and nonsingular. \n\nThe pencil Mreg-λNreg is regular, contains the infinite and finite elementary divisors of M-λN and has the form\n\n                   | Mi-λNi |    *    |\n     Mreg-λNreg  = |--------|---------|, if `finite_infinite = false`, or the form\n                   |   0    |  Mf-λNf |\n\n\n                   | Mf-λNf |    *    |\n     Mreg-λNreg  = |--------|---------|, if `finite_infinite = true`, \n                   |   0    |  Mi-λNi |\n\nwhere: (1) Mi-λNi, in staircase form, contains the infinite elementary divisors of M-λN,  Mi is upper triangular if ut = true and nonsingular, and  Ni is upper triangular and nilpotent;  (2) Mf-λNf contains the infinite elementary divisors of M-λN and  Nf is upper triangular and nonsingular. The ni-dimensional vector νi contains the dimensions of the square blocks of the staircase form  Mi-λNi  such that the i-th block has dimensions νi[i] x νi[i].  If finite_infinite = true, the difference νi[i]-νi[i+1] for i = 1, 2, ..., ni  is the number of infinite elementary divisors of degree i (with νi[ni] = 0). If finite_infinite = false, the difference νi[ni-i+1]-νi[ni-i] for i = 1, 2, ..., ni  is the number of infinite elementary divisors of degree i (with νi[0] = 0).\n\nThe full column rank pencil Ml-λNl, in a staircase form, contains the left Kronecker indices of M-λN and has the form\n\n               | Al-λEl |\n     Ml-λNl  = |--------|,\n               |   Cl   |\n\nwhere El is upper triangular and nonsingular.  The nl-dimensional vectors νl and μl contain the row and, respectively, column dimensions of the blocks of the staircase form  Ml-λNl such that the j-th block has dimensions νl[j] x μl[j] and has full column rank.  The difference νl[nl-j+1]-μl[nl-j+1] for j = 1, 2, ..., nl is the number of elementary Kronecker blocks of size  j x (j-1). If ut = true, the full column rank diagonal blocks of Ml are reduced to the form [X; 0]  with X upper triangular and nonsingular and the full row rank supradiagonal blocks of Nl are reduced to the form [0 Y] with Y upper triangular and nonsingular. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.sklf_right","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sklf_right","text":"sklf_right(A, E, B, C, D; fast = true, ut = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (F, G, Q, Z, νr, μr, nf, ν, μ)\n\nReduce the structured matrix pencil M - λN \n\n           | A-λE | B | \n  M - λN = |------|---|\n           |  C   | D |\n\nto an equivalent form F - λG = Q'*(M - λN)*Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices F and G are in the following Kronecker-like form exhibiting the right and finite Kronecker structures:\n\n            |  Mr-λNr    |     *      |    *     |\n            |------------|------------|----------|\n  F - λG =  |    O       |   Mf-λNf   |    *     |\n            |------------|------------|----------|\n            |    O       |     0      | Mil-λNil |\n\nThe full row rank pencil Mr-λNr, in a staircase form, contains the right Kronecker indices of M-λN and has the form\n\n     Mr-λNr  = | Br | Ar-λEr |,\n\nwhere Er is upper triangular and nonsingular.  The nr-dimensional vectors νr and μr contain the row and, respectively, column dimensions of the blocks of the staircase form  Mr-λNr such that i-th block has dimensions νr[i] x μr[i] and  has full row rank. The difference μr[i]-νr[i] for i = 1, 2, ..., nr is the number of elementary Kronecker blocks of size (i-1) x i. If ut = true, the full row rank diagonal blocks of Mr are reduced to the form [0 X]  with X upper triangular and nonsingular and the full column rank supradiagonal blocks of Nr are reduced to the form [Y; 0] with Y upper triangular and nonsingular. \n\nThe nf x nf pencil Mf-λNf is regular and contains the finite elementary divisors of M-λN.  Nf is upper triangular and nonsingular.\n\nThe full column rank pencil Mil-λNil is in a staircase form, and contains the  left Kronecker indices  and infinite elementary divisors of the pencil M-λN.  The nb-dimensional vectors ν and μ contain the row and, respectively, column dimensions of the blocks of the staircase form  Mil-λNil such that the i-th block has dimensions ν[i] x μ[i] and has full column rank.  The difference ν[nb-j+1]-μ[nb-j+1] for j = 1, 2, ..., nb is the number of elementary Kronecker blocks of size  j x (j-1). The difference μ[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0). If ut = true, the full column rank diagonal blocks of Mil are reduced to the form [X; 0]  with X upper triangular and nonsingular and the full row rank supradiagonal blocks of Nil are reduced to the form [0 Y] with Y upper triangular and nonsingular. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.   \n\nNote: If the pencil M - λN has full row rank, then the regular pencil Mil-λNil is in a staircase form with square upper triangular diagonal blocks (i.e.,μ[j] = ν[j]), and the difference ν[nb-j+1]-ν[nb-j] for  j = 1, 2, ..., nb is the number of infinite elementary divisors of degree j (with ν[0] = 0).\n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.sklf_left","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sklf_left","text":"sklf_left(A, E, B, C, D; fast = true, ut = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (F, G, Q, Z, ν, μ, nf, νl, μl)\n\nReduce the structured matrix pencil M - λN \n\n           | A-λE | B | \n  M - λN = |------|---|\n           |  C   | D |\n\nto an equivalent form F - λG = Q'*(M - λN)*Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices F and G are in the following Kronecker-like form exhibiting the finite and left Kronecker structures:\n\n            |  Mri-λNri  |     *      |    *    |\n            |------------|------------|---------|\n  F - λG =  |    O       |   Mf-λNf   |    *    |\n            |------------|------------|---------|\n            |    O       |     0      |  Ml-λNl |\n\nThe full row rank pencil Mri-λNri is in a staircase form, and contains the right Kronecker indices  and infinite elementary divisors of the pencil M-λN.\n\nThe nf x nf pencil Mf-λNf is regular and contains the finite elementary divisors of M-λN.  Nf is upper triangular and nonsingular.\n\nThe full column rank pencil Ml-λNl, in a staircase form, contains the left Kronecker indices of M-λN and has the form\n\n               | Al-λEl |\n     Ml-λNl  = |--------|,\n               |   Cl   |\n\nwhere El is upper triangular and nonsingular. \n\nThe nb-dimensional vectors ν and μ contain the row and, respectively, column dimensions of the blocks of the staircase form  Mri-λNri such that i-th block has dimensions ν[i] x μ[i] and  has full row rank.  The difference μ[i]-ν[i] for i = 1, 2, ..., nb is the number of elementary Kronecker blocks of size (i-1) x i. The difference ν[i]-μ[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with μ[nb+1] = 0). If ut = true, the full row rank diagonal blocks of Mri are reduced to the form [0 X]  with X upper triangular and nonsingular and the full column rank supradiagonal blocks of Nri are reduced to the form [Y; 0] with Y upper triangular and nonsingular. \n\nThe nl-dimensional vectors νl and μl contain the row and, respectively, column dimensions of the blocks of the staircase form  Ml-λNl such that the j-th block has dimensions νl[j] x μl[j] and has full column rank.  The difference νl[nl-j+1]-μl[nl-j+1] for j = 1, 2, ..., nl is the number of elementary Kronecker blocks of size  j x (j-1).\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\nNote: If the pencil M - λN has full column rank, then the regular pencil Mri-λNri is in a staircase form with square upper triangular diagonal blocks (i.e.,μ[i] = ν[i]), and the difference ν[i+1]-ν[i] for i = 1, 2, ..., nb  is the number of infinite elementary divisors of degree i (with ν[nb+1] = 0).\n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.sreduceBF","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sreduceBF","text":"sreduceBF(A, E, B, C, D; fast = true, atol = 0, rtol, withQ = true, withZ = true) -> F, G, Q, Z, n, m, p\n\nReduce the partitioned matrix pencil M - λN \n\n           | A-λE | B | ndx\n  M - λN = |------|---|\n           |  C   | D | ny\n              nx    nu\n\nto an equivalent basic form F - λG = Q'*(M - λN)*Z using orthogonal transformation matrices Q and Z  such that M - λN is transformed into the following standard form\n\n           | B1 | A1-λE1 | n\n  F - λG = |----|--------|   ,        \n           | D1 |   C1   | p\n             m      n\n\nwhere E1 is an nxn non-singular matrix, and A1, B1, C1, D1 are nxn-, nxm-, pxn- and pxm-dimensional matrices, respectively. The order n of E1 is equal to the numerical rank of E determined using the absolute tolerance atol and  relative tolerance rtol. The dimensions m and p are computed as m = nu + (nx-n) and p = ny + (ndx-n). \n\nIf fast = true, E1 is determined upper triangular using a rank revealing QR-decomposition with column pivoting of E  and n is evaluated as the number of nonzero diagonal elements of the R factor, whose magnitudes are greater than  tol = max(atol,abs(R[1,1])*rtol).  If fast = false,  E1 is determined diagonal using a rank revealing SVD-decomposition of E and  n is evaluated as the number of singular values greater than tol = max(atol,smax*rtol), where smax  is the largest singular value.  The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.gsklf","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.gsklf","text":"gsklf(A, E, B, C, D; disc = false, jobopt = \"none\", offset = sqrt(ϵ), fast = true, atol1 = 0, atol2 = 0, rtol, \n     withQ = true, withZ = true) -> (F, G, Q, Z, dimsc, nmszer, nizer)\n\nReduce the structured matrix pencil M - λN \n\n           | A-λE | B | \n  M - λN = |------|---|\n           |  C   | D |\n\nwith the n x n pencil A-λE regular and [E B] of full row rank n,  to an equivalent form F - λG = diag(Q',I)*(M - λN)*Z using orthogonal or unitary transformation  matrices Q and Z such that the transformed matrices F and G are in the following special, row partition preserving, Kronecker-like form\n\n            | Ar-λEr    *     *   *   |\n            |   0     Al-λEl  Bl  *   |\n   F - λG = |   0       0     0   Bn  | ,    \n            |-------------------------|\n            |   0       Cl    Dl  *   |\n\nwhere: (1) Ar-λEr is a mr x nr full row rank pencil, which contains the right Kronecker structure        of M - λN and that part of its zeros which lie outside of the domain of interest Cb of       the complex plane defined by the keyword arguments disc and jobopt;  (2)  Al-lambda*El is an nl x nl regular square pencil with El invertible and upper triangular; (3)  Bl is an nl x ml matrix, where ml is the normal rank       of the transfer function matrix C*inv(λE-A)*B+D;  (4)  Bn is an invertible matrix of order nsinf. \n\nThe column dimensions (nr, nl, ml, nsinf) are returned in dimsc. \n\nThe full column rank subpencil \n\n            | Al-λEl | Bl | \nMl - λNl := |--------|----|\n            |   Cl   | Dl |\n\ncontains the left Kronecker structure of M - λN and its zeros lying in the domain of interest Cb, and has the property that rank [Al-λEl Bl] = nl provided rank [A-λE B] = n for all finite λ ∈ Cb    (finite stabilizability with respect to Cb).  The number of finite zeros lying on the boundary of Cb, if available, is returned in nmszer,  otherwise nmszer is set to missing.   If disc = false, the number of infinite zeros, if available, is returned in nizer,  otherwise nizer is set to missing. If disc = true, nizer is set to 0.  The boundary offset  β to be used to assess the zeros on the boundary of Cb is specified  by the keyword parameter offset. Accordingly, if disc = false, then the boundary of Cb contains the complex numbers with real parts within the interval [-β,β], while if disc = true,  then the boundary of Cb contains the complex numbers with moduli within the interval [1-β,1+β]. The default value used for β is sqrt(ϵ)  (the machine precision of the element type of A). \n\nThe domain of interest Cb for the zeros of the pencil Ml - λNl is defined as follows:\n\nif jobopt = none, then Cb is the empty set and no zeros of M - λN are included in Ml - λNl;\n\nif  jobopt = all, then Cb is the extended complex plane (including infinity) and     all zeros of M - λN are included in Ml - λNl;\n\nif jobopt = finite, then Cb is the complex plane (without infinity) and     all finite zeros of M - λN are included in Ml - λNl;\n\nif jobopt = infinite, then Cb is the point at infinity and     all infinite zeros of M - λN are included in Ml - λNl;\n\nif jobopt = stable, then, for disc = false, Cb is the set of complex numbers     with real parts less than -β, while for disc = true, Cb is the set of complex numbers     with moduli less than 1-β and all finite zeros of M - λN in Cb are included in Ml - λNl;\n\nif jobopt = unstable, then, for disc = false, Cb is the set of complex numbers     with real parts greater than β or infinite, while for disc = true, Cb is the set of complex numbers     with moduli greater than 1+β or infinite and all finite and infinite zeros of M - λN in Cb are included in Ml - λNl;\n\nif jobopt = s-unstable, then, for disc = false, Cb is the set of complex numbers     with real parts greater than -β or infinite, while for disc = true, Cb is the set of complex numbers     with moduli greater than 1-β or infinite and all finite and infinite zeros of M - λN in Cb are included in Ml - λNl.\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the n x n matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\nMethod: The reduction algorithm of [1] has been adapted to deal with several zero selection options. \n\nReferences\n\n[1] Oara, C.      Constructive solutions to spectral and inner–outer factorizations      with respect to the disk. Automatica, 41:1855–1866, 2005.\n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.sklf_right!","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sklf_right!","text":"sklf_right!(A, E, B, F, C, G, D, H; fast = true, atol1 = 0, atol2 = 0, atol3 = 0, rtol, withQ = true, withZ = true) -> (Q, Z, nc)\n\nReduce the partitioned full row rank matrix pencil \n\n  M - λN = | B-λF | A-λE | n\n              m      n\n\nwith A-λE regular, to an equivalent form Mt - λNt = Q'*(M - λN)*Z = | Bt-λFt | At-λEt |  using orthogonal or unitary transformation matrices Q and Z,  such that M - λN is transformed into a Kronecker-like form | Bt-λFt | At-λEt | exhibiting its  right, finite and infinite Kronecker structures (also known as the strong controllability form):\n\n                         | Bc-λFc | Ac-λEc     *     | nc\n  | Bt-λFt | At-λEt | =  |--------|------------------|\n                         |   0    |   0     Auc-λEuc | n-nc\n                             m        nc      n-nc\n\nThe matrices Bt, Ft, At, Et, determined from [Bt At] = Q'*[B A]*Z, [Ft Et] = Q'*[F E]*Z,  are returned in B, F, A and E, respectively.  Furthermore, the matrices Ct, Dt, Gt, Ht, determined from the compatibly partitioned matrices [Dt Ct] = [D C]*Z and [Ht Gt] = [D C]*Z, are returned in C, D, G and H, respectively  (unless C, D, G and H are set to missing).\n\nThe subpencil | Bc-λFc | Ac-λEc | has full row rank nc and the (n-nc) x (n-nc)  subpencil Auc-λEuc contains the finite and infinite eigenvalues of M - λN  (also called the uncontrollable eigenvalues of M - λN).  \n\nThe (m+n) x (m+n) orthogonal matrix Z has the partitioned form\n\n       | Z11 |  0  |  *  | m \n   Z = |-----|-----|-----|\n       |  *  |  *  |  *  | n\n          m    nc    n-nc\n\nwith the leading m x m submatrix Z11 invertible and upper triangular. \n\nNote: If Ct-λGt is partitioned as  [ Cc-λGc | Cuc-λGuc ], then the following relation is fulfilled\n\n  (Cc-λGc)*inv(λEc-Ac)(Bc-λFc) + Dt-λHt = ((C-λG)*inv(λE-A)(B-λF) + D-λH)*Z11\n\nand the structured pencil linearization (Ac-λEc,Bc-λFc,Cc-λGc,Dt-λHt) is strongly controllable. \n\nThe keyword arguments atol1, atol2, , atol3, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A and B, the absolute tolerance for the nonzero elements of E and F,  and the relative tolerance for the nonzero elements of A, B, E and F.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary left transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed orthogonal or unitary right transformations are accumulated in the matrix Z if withZ = true.  If withZ = false, Z contains the upper triangular matrix Z11.   \n\n\n\n\n\nsklf_right!(A, E, B, C; fast = true, atol1 = 0, atol2 = 0, atol3 = 0, rtol, withQ = true, withZ = true) -> (Q, Z, νr, nc, nfuc, niuc)\n\nReduce the partitioned full row rank matrix pencil \n\n  M - λN = | B | A-λE | n\n             m    n\n\nwith A-λE regular, to an equivalent form F - λG = Q'*(M - λN)*diag(I,Z) using orthogonal or unitary transformation matrices Q and Z  such that M - λN is transformed into a Kronecker-like form | Bt | At-λEt | exhibiting its  right, finite and infinite Kronecker structures (also known as the generalized controllability staircase form):\n\n                     |  Bc | Ac-λEc     *          *      | nc\n  | Bt | At-λEt | =  |-----|------------------------------|\n                     |  0  |  0     Afuc-λEfuc     *      | nfuc\n                     |  0  |  0         0      Aiuc-λEiuc | niuc\n                        m     nc       nfuc        niuc\n\nBt = Q'*B, At = Q'*A*Zand Et = Q'*E*Z are returned in B, A and E, respectively, and C*Z is returned in C (unless C = missing).                 \n\nThe subpencil | Bc | Ac-λEc | has full row rank nc, is in a staircase form, and contains the right Kronecker indices of M - λN.  The nr-dimensional vector νr contains the row and column dimensions of the blocks of the staircase form  | Bc | Ac-λI | such that i-th block has dimensions νr[i] x νr[i-1] (with νr[0] = m) and  has full row rank. The difference νr[i-1]-νr[i] for i = 1, 2, ..., nr is the number of elementary Kronecker blocks of size (i-1) x i.\n\nThe nfuc x nfuc subpencil Afuc-λEfuc contains the finite eigenvalues of M - λN (also called the uncontrollable finite eigenvalues of A - λE).  \n\nThe niuc x niuc subpencil Aiuc-λEiuc contains the infinite eigenvalues of M - λN (also called the uncontrollable infinite eigenvalues of A - λE).  \n\nThe keyword arguments atol1, atol2, atol3, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E, the absolute tolerance for the nonzero elements of B,   and the relative tolerance for the nonzero elements of A, E and B.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary left transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed orthogonal or unitary right transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.   \n\n\n\n\n\nsklf_right!(A, B, C; fast = true, atol1 = 0, atol2 = 0, rtol, withQ = true) -> (Q, νr, nc, nuc)\n\nReduce the partitioned full row rank matrix pencil \n\n  M - λN = | B | A-λI | n\n             m    n\n\nto an equivalent form F - λG = Q'*(M - λN)*diag(I,Q) using orthogonal or unitary transformation matrix Q   such that M - λN is transformed into a Kronecker-like form | Bt | At-λI | exhibiting its  right and finite Kronecker structures (also known as the controllability staircase form):\n\n                    |  Bc | Ac-λI     *    | nc\n  | Bt | At-λI | =  |-----|----------------|\n                    |  0  |  0     Auc-λI  | nuc\n                       m     nc      nuc\n\nBt = Q'*B and At = Q'*A*Q are returned in B and A, respectively, and C*Q is returned in C (unless C = missing).                 \n\nThe subpencil | Bc | Ac-λI | has full row rank nc, is in a staircase form, and contains the right Kronecker indices of M - λN.  The nr-dimensional vector νr contains the row and column dimensions of the blocks of the staircase form  | Bc | Ac-λI | such that i-th block has dimensions νr[i] x νr[i-1] (with νr[0] = m) and  has full row rank. The difference νr[i-1]-νr[i] for i = 1, 2, ..., nr is the number of elementary Kronecker blocks of size (i-1) x i.\n\nThe nuc x nuc matrix Auc contains the (finite) eigenvalues of M - λN (also called the uncontrollable eigenvalues of A).  \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of B,  and the relative tolerance  for the nonzero elements of A and B.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.   \n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.sklf_right2!","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sklf_right2!","text":"sklf_right2!(A, B, m1, C; fast = true, atol1 = 0, atol2 = 0, rtol, withQ = true) -> (Q, νr, nc, nuc)\n\nReduce the partitioned full row rank matrix pencil \n\n  M - λN = [ B | A-λI ] n  = [ B1  B2 | A-λI ] n\n             m    n            m1 m-m1   n\n\nto an equivalent form F - λG = Q'*(M - λN)*diag(I,Q) using orthogonal or unitary transformation matrix Q   such that M - λN is transformed into a Kronecker-like form [ Bt | At-λI ] exhibiting its  right and finite Kronecker structures (also known as the controllability staircase form):\n\n                    [  Bc | Ac-λI     *    ] nc\n  [ Bt | At-λI ] =  [-----|----------------]\n                    [  0  |  0     Auc-λI  ] nuc\n                       m     nc      nuc\n\nBt = Q'*B and At = Q'*A*Q are returned in B and A, respectively, and C*Q is returned in C (unless C = missing).                 \n\nThe subpencil [ Bc | Ac-λI ] has full row rank nc with [ Bc | Ac ] = [ Bc1 Bc2 | Ac]  in a staircase form\n\n                    m1  m-m1  νr[1] νr[2] . . .  νr[p-2] \n                  [ B11 B12 | A11   A12   . . .  A1,p-2  A1,p-1  A1p ]  νr[1]\n                  [  0  B22 | A21   A22   . . .  A2,p-2  A2,p-1  A2p ]  νr[2]\n                  [  0   0  | A31   A32   . . .  A3,p-2  A3,p-1  A3p ]  νr[3]\n                  [  0   0  |  0    A42   . . .  A4,p-2  A4,p-1  A4p ]  νr[4]\n[ Bc1 Bc2 | Ac] = [  0   0  |  .     .    . . .    .       .      .  ]   .\n                  [  0   0  |  .     .      . .    .       .      .  ]   .\n                  [  0   0  |  .     .        .    .       .      .  ]   .\n                  [  0   0  |  0     0    . . .  Ap,p-2  Ap,p-1  App ]  νr[p]\n\nwhere the blocks  B11, B22, A31, ..., Ap,p-2  have full row ranks. The p-dimensional vector νr, with p = 2nr even,  contains the row dimensions of the  blocks.  The difference νr[2i-1]+νr[2i]-νr[2i+1]-νr[2i+2] for i = 1, 2, ..., nr is the  number of elementary Kronecker blocks of size (i-1) x i.\n\nThe nuc x nuc matrix Auc contains the (finite) eigenvalues of M - λN (also called the uncontrollable eigenvalues of A).  \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of B,  and the relative tolerance  for the nonzero elements of A and B.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.  \n\nMethod: The implemented algorithm [1] represents a specialization of the controllability staircase algorithm of [2]  to the special structure of the input matrix B = [B1,B2].\n\nReferences:\n\n[1] Varga, A. Reliable algorithms for computing minimal dynamic covers. Proc. CDC'2003, Hawaii, 2003.\n\n[2] Varga, A. Numerically stable algorithm for standard controllability form determination.     Electronics Letters, vol. 17, pp. 74-75, 1981.\n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.sklf_left!","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sklf_left!","text":"sklf_left!(A, E, C, G, B, F, D, H; fast = true, atol1 = 0, atol2 = 0, atol3 = 0, rtol, withQ = true, withZ = true) -> (Q, Z, no)\n\nReduce the partitioned full row rank matrix pencil \n\nM - λN = | A-λE | n\n         | C-λG | p\n            n\n\nwith A-λE regular, to an equivalent form F - λG = Q'*(M - λN)*Z  using orthogonal or unitary transformation matrices Q and Z  such that M - λN is transformed into a staircase form exhibiting the left,  finite and infinite Kronecker structures (also known as the strong observability form):\n\n                | Auo-λEuo  |   *    | n-no\n  | At-λEt |    |   0       | Ao-λEo | no\n  |--------| =  |-----------|--------|\n  | Ct-λGt |    |   0       | Co-λGo | p\n                   n-no         no\n\nThe matrices Ct, Gt, At, Et, determined from [At; Ct] = Q'*[A; C]*Z, [Et; Gt] = Q'*[E; G]*Z,   are returned in C, G, A and E, respectively.  Furthermore, the matrices Bt, Dt, Ft, Ht determined from the compatibly partitioned [Bt; Dt] = Q'*[B; D] and [Ft; Ht] = Q'*[F; H], are returned in B, D, F, and H, respectively (unless B, D, F and H are set to missing).\n\nThe subpencil \n\n   | Ao-λEo |   \n   |--------|\n   | Co-λGo |\n\nhas full column rank no and the (n-no) x (n-no) subpencil Auo-λEuo contains the finite and infinite  eigenvalues of M - λN (also called the unobservable eigenvalues of M - λN).  \n\nThe  (n+p) x (n+p) orthogonal matrix Q has the partitioned form\n\n       |  *  |  *  |  *   | n \n   Q = |-----|-----|------|\n       |  *  |  0  | Q22  | p\n         n-no  no     p\n\nwith the p x p trailing submatrix Q22 invertible and upper triangular. \n\nNote: If Bt-λFt is partitioned as  [ Buo-λFuo | Bo-λFo ], then the following relation is fulfilled\n\n  (Co-λGo)*inv(λEo-Ao)(Bo-λFo) + Dt-λHt = Q22'*((C-λG)*inv(λE-A)(B-λF) + D-λH)\n\nand the structured pencil linearization (Ao-λEo,Bo-λFo,Co-λGo,Dt-λHt) is strongly observable. \n\nThe keyword arguments atol1, atol2, , atol3, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A and C, the absolute tolerance for the nonzero elements of E and G,  and the relative tolerance for the nonzero elements of A, C, E and G.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary left transformations are accumulated in the matrix Q if withQ = true.  If withQ = false, Q contains the upper triangular matrix Q22.    The performed orthogonal or unitary right transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.   \n\n\n\n\n\nsklf_left!(A, E, C, B; fast = true, atol1 = 0, atol2 = 0, atol3 = 0, rtol, withQ = true, withZ = true) -> (Q, Z, μl, no, nfuo, niuo)\n\nReduce the partitioned full column rank matrix pencil \n\n  M - λN = | A-λE | n\n           |  C   | p\n              n\n\nto an equivalent form F - λG = diag(Q',I)*(M - λN)*Z using orthogonal or unitary transformation matrices Q  and Z  such that M - λN is transformed into a Kronecker-like form  exhibiting its  infinite, finite  and left Kronecker structures (also known as the generalized observability staircase form):\n\n                | Aiuo-λEiuo     *       |   *    | niuo\n                |    0       Afuo-λEfuo  |   *    | nfuo\n  | At-λEt |    |    0           0       | Ao-λEo | no\n  |--------| =  |------------------------|--------|\n  |  Ct    |    |    0           0       |   Co   | p\n                    niuo        nfuo         no\n\nCt = C*Z, At = Q'*A*Z and Et = Q'*E*Z are returned in C, A and E, respectively,  and Q'*B is returned in B (unless B = missing).                 \n\nThe subpencil | Ao-λEo | has full column rank no, is in a staircase form, and contains the left Kronecker indices of M - λN.                |   Co   | The nl-dimensional vector μl contains the row and column dimensions of the blocks of the staircase form such that i-th block has dimensions μl[nl-i] x μl[nl-i+1] (with μl[0] = p) and  has full column rank. The difference μl[nl-i]-μl[nl-i+1] for i = 1, 2, ..., nl is the number of elementary Kronecker blocks of size i x (i-1).\n\nThe niuo x niuo subpencil Aiuo-λEiuo contains the infinite eigenvalues of M - λN (also called the unobservable infinite eigenvalues of A-λE).  \n\nThe nfuo x nfuo subpencil Afuo-λEfuo contains the finite eigenvalues of M - λN (also called the unobservable finite eigenvalues of A-λE).  \n\nThe keyword arguments atol1, atol2, atol3 and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  the absolute tolerance for the nonzero elements of C,  and  the relative tolerance for the nonzero elements of A, E and C.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary left transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed orthogonal or unitary right transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.   \n\n\n\n\n\nsklf_left!(A, C, B; fast = true, atol1 = 0, atol2 = 0, rtol, withQ = true) -> (Q, μl, no, nuo)\n\nReduce the partitioned full column rank matrix pencil \n\n  M - λN = | A-λI | n\n           |  C   | p\n              n\n\nto an equivalent form F - λL = diag(Q',I)*(M - λN)*Q using orthogonal or unitary transformation matrix Q   such that M - λN is transformed into a Kronecker-like form  exhibiting its  finite  and left Kronecker structures (also known as the observability staircase form):\n\n               | Auo-λI  |  *    | nuo\n  | At-λI |    |    0    | Ao-λI | no\n  |-------| =  |---------|-------|\n  |  Ct   |    |    0    |   Co  | p\n                   nuo       no\n\nCt = C*Q and At = Q'*A*Q are returned in C and A, respectively, and Q'*B is returned in B (unless B = missing).                 \n\nThe subpencil | Ao-λI; Co | has full column rank no, is in a staircase form,  and contains the left Kronecker indices of M - λN. \n\nThe nl-dimensional vector μl contains the row and column dimensions of the blocks of the staircase form such that i-th block has dimensions μl[nl-i] x μl[nl-i+1] (with μl[0] = p) and  has full column rank. The difference μl[nl-i]-μl[nl-i+1] for i = 1, 2, ..., nl is the number of elementary Kronecker blocks of size i x (i-1).\n\nThe nuo x nuo matrix Auo contains the (finite) eigenvalues of M - λN (also called the unobservable eigenvalues of A).  \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of C,  and the relative tolerance  for the nonzero elements of A and C.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.   \n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.sklf_rightfin!","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sklf_rightfin!","text":"sklf_rightfin!(A, E, B, C; fast = true, atol1 = 0, atol2 = 0,  \n               rtol, withQ = true, withZ = true) -> (Q, Z, νr, nc, nuc)\n\nReduce the partitioned full row rank matrix pencil \n\n  M - λN = | B | A-λE | n\n             m    n\n\nwith A-λE regular, to an equivalent form F - λG = Q'*(M - λN)*diag(I,Z)  using orthogonal or unitary transformation matrices Q and Z  such that M - λN is transformed into a staircase form | Bt | At-λEt | exhibiting the separation of its finite eigenvalues:\n\n                     |  Bc | Ac-λEc     *    | nc\n  | Bt | At-λEt | =  |-----|-----------------|\n                     |  0  |  0     Auc-λEuc | nuc\n                        m     nc      nuc\n\nBt = Q'*B, At = Q'*A*Zand Et = Q'*E*Z are returned in B, A and E, respectively, and C*Z is returned in C (unless C = missing).  The resulting Et is upper triangular. If E is already upper triangular, then  the preliminary reduction of E to upper triangular form is not performed.                \n\nThe subpencil | Bc | Ac-λEc | has full row rank nc for all finite values of λ, is in a staircase form, and,  if E is invertible, contains the right Kronecker indices of M - λN.  The nr-dimensional vector νr contains the row and column dimensions of the blocks of the staircase form  | Bc | Ac-λI | such that i-th block has dimensions νr[i] x νr[i-1] (with νr[0] = m) and  has full row rank. If E is invertible, the difference νr[i-1]-νr[i] for i = 1, 2, ..., nr is the number of elementary Kronecker blocks of size (i-1) x i.\n\nThe nuc x nuc subpencil Auc-λEuc contains the finite eigenvalues of M - λN (also called the uncontrollable finite eigenvalues of A - λE).  If E is singular, Auc-λEuc may also contain a part of the infinite eigenvalues of M - λN (also called the uncontrollable infinite eigenvalues of A - λE).\n\nThe keyword arguments atol1, atol2 and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of B,   and the relative tolerance for the nonzero elements of A and B.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary left transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed orthogonal or unitary right transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.   \n\nNote: This function, called with reversed input parameters E and A (i.e., instead A and E), performs the  separation all infinite and nonzero finite eigenvalues of the pencil M - λN.\n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.sklf_rightfin2!","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sklf_rightfin2!","text":"sklf_rightfin2!(A, E, B, m1, C; fast = true, atol1 = 0, atol2 = 0,  \n               rtol, withQ = true, withZ = true) -> (Q, Z, νr, nc, nuc)\n\nReduce the partitioned full row rank matrix pencil \n\n  M - λN = [ B | A-λE ] n  = [ B1  B2 | A-λE ] n\n             m    n            m1 m-m1   n\n\nwith A-λE regular, to an equivalent form F - λG = Q'*(M - λN)*diag(I,Z)  using orthogonal or unitary transformation matrices Q and Z  such that M - λN is transformed into a staircase form [ Bt | At-λEt ] exhibiting  the separation of its finite eigenvalues:\n\n                     [  Bc | Ac-λEc     *    ] nc\n  [ Bt | At-λEt ] =  [-----|-----------------]\n                     [  0  |  0     Auc-λEuc ] nuc\n                        m     nc      nuc\n\nBt = Q'*B, At = Q'*A*Zand Et = Q'*E*Z are returned in B, A and E, respectively, and C*Z is returned in C (unless C = missing).  The resulting Et is upper triangular. If E is already upper triangular, then  the preliminary reduction of E to upper triangular form is not performed.                \n\nThe subpencil [ Bc | Ac-λEc ] has full row rank nc for all finite values of λ, with [ Bc | Ac ] = [ Bc1 Bc2 | Ac] in a staircase form\n\n                    m1  m-m1  νr[1] νr[2] . . .  νr[p-2] \n                  [ B11 B12 | A11   A12   . . .  A1,p-2  A1,p-1  A1p ]  νr[1]\n                  [  0  B22 | A21   A22   . . .  A2,p-2  A2,p-1  A2p ]  νr[2]\n                  [  0   0  | A31   A32   . . .  A3,p-2  A3,p-1  A3p ]  νr[3]\n                  [  0   0  |  0    A42   . . .  A4,p-2  A4,p-1  A4p ]  νr[4]\n[ Bc1 Bc2 | Ac] = [  0   0  |  .     .    . . .    .       .      .  ]   .\n                  [  0   0  |  .     .      . .    .       .      .  ]   .\n                  [  0   0  |  .     .        .    .       .      .  ]   .\n                  [  0   0  |  0     0    . . .  Ap,p-2  Ap,p-1  App ]  νr[p]\n\nwhere the blocks  B11, B22, A31, ..., Ap,p-2  have full row ranks. The p-dimensional vector νr, with p = 2nr even,  contains the row dimensions of the  blocks.  The difference νr[2i-1]+νr[2i]-νr[2i+1]-νr[2i+2] for i = 1, 2, ..., nr is the  number of elementary Kronecker blocks of size (i-1) x i.\n\nThe nuc x nuc subpencil Auc-λEuc contains the finite eigenvalues of M - λN (also called the uncontrollable finite eigenvalues of A - λE).  If E is singular, Auc-λEuc may also contain a part of the infinite eigenvalues of M - λN (also called the uncontrollable infinite eigenvalues of A - λE).\n\nThe keyword arguments atol1, atol2 and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of B,   and the relative tolerance for the nonzero elements of A and B.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary left transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed orthogonal or unitary right transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.   \n\nMethod: The implemented algorithm [1] represents a specialization of the  controllability staircase algorithm of [2] to the special structure of the input matrix B = [B1,B2].\n\nReferences\n\n[1] Varga, A. Reliable algorithms for computing minimal dynamic covers for descriptor systems.     Proc. of MTNS'04, Leuven, Belgium, 2004.\n\n[2] Varga, A. Computation of Irreducible Generalized State-Space Realizations.     Kybernetika, vol. 26, pp. 89-106, 1990.\n\n\n\n\n\n","category":"function"},{"location":"sklftools.html#MatrixPencils.sklf_leftfin!","page":"Manipulation of structured linear matrix pencils","title":"MatrixPencils.sklf_leftfin!","text":"sklf_leftfin!(A, E, C, B; fast = true, atol1 = 0, atol2 = 0,  \n              rtol, withQ = true, withZ = true) -> (Q, Z, μl, no, nuo)\n\nReduce the partitioned full column rank matrix pencil \n\n  M - λN = | A-λE | n\n           |  C   | p\n              n\n\nwith A-λE regular, to an equivalent form F - λG = Q'*(M - λN)*diag(I,Z)  using orthogonal or unitary transformation matrices Q and Z  such that M - λN is transformed into a staircase form exhibiting the separation of its finite eigenvalues:\n\n                | Auo-λEuo  |   *    | nuo\n  | At-λEt |    |   0       | Ao-λEo | no\n  |--------| =  |-----------|--------|\n  |  Ct    |    |   0       |   Co   | p\n                    nuo         no\n\nCt = C*Z, At = Q'*A*Z and Et = Q'*E*Z are returned in C, A and E, respectively,  and Q'*B is returned in B (unless B = missing).    The resulting Et is upper triangular. If E is already upper triangular, then  the preliminary reduction of E to upper triangular form is not performed.                \n\nThe subpencil | Ao-λEo | has full column rank no for all finite values of λ, is in a staircase form,                |   Co   | and, if E is nonsingular, contains the left Kronecker indices of M - λN. The nl-dimensional vector μl contains the row and column dimensions of the blocks of the staircase form such that i-th block has dimensions μl[nl-i] x μl[nl-i+1] (with μl[0] = p) and  has full column rank. If E is nonsingular, the difference μl[nl-i]-μl[nl-i+1] for i = 1, 2, ..., nl is the number of elementary Kronecker blocks of size i x (i-1).\n\nThe keyword arguments atol1, atol2 and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of C,   and the relative tolerance for the nonzero elements of A and C.   The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed orthogonal or unitary left transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed orthogonal or unitary right transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.   \n\nNote: This function, called with reversed input parameters E and A (i.e., instead A and E), performs the  separation all infinite and nonzero finite eigenvalues of the pencil M - λN.\n\n\n\n\n\n","category":"function"},{"location":"pregular.html#Computations-involving-regular-matrix-pencils","page":"Computations involving regular matrix pencils","title":"Computations involving regular matrix pencils","text":"","category":"section"},{"location":"pregular.html","page":"Computations involving regular matrix pencils","title":"Computations involving regular matrix pencils","text":"Function Description\nregbalance! Balancing regular matrix pencils.\nisregular Checking the regularity of a pencil\nisunimodular Checking the unimodularity of a pencil\nfisplit Finite-infinite eigenvalue splitting\nsfisplit Special finite-infinite eigenvalue splitting\nfihess Finite-infinite eigenvalue splitting in a generalized Hessenberg form\nfischur Finite-infinite eigenvalue splitting in a generalized Schur form\nfischursep Finite-infinite eigenvalue splitting in an ordered generalized Schur form\nsfischursep Special finite-infinite eigenvalue splitting in an ordered generalized Schur form\nfiblkdiag Finite-infinite eigenvalue splitting based block diagonalization\ngsblkdiag Finite-infinite and stable-unstable eigenvalue splitting based block diagonalization\nssblkdiag Stable-unstable eigenvalue splitting based block diagonalization\nsaloc Spectrum alocation for the pairs (A,B) and (A-λE,B)\nsalocd Spectrum alocation for the dual pairs (A,C) and (A-λE,C)\nsalocinf Infinite spectrum alocation for the pair (A-λE,B)\nsalocinfd Infinite spectrum alocation for the dual pair (A-λE,C)\nordeigvals Order-preserving computation of eigenvalues of a Schur matrix or a generalized Schur pair.","category":"page"},{"location":"pregular.html#MatrixPencils.regbalance!","page":"Computations involving regular matrix pencils","title":"MatrixPencils.regbalance!","text":" regbalance!(A, E; maxiter = 100, tol = 1, pow2 = true) -> (Dl,Dr)\n\nBalance the regular pair (A,E) by reducing the 1-norm of the matrix M := abs(A)+abs(E) by row and column balancing.  This involves diagonal similarity transformations Dl*(A-λE)*Dr applied iteratively to M to make the rows and columns of Dl*M*Dr as close in norm as possible. The Sinkhorn–Knopp algorithm is used  to reduce M to a doubly stochastic matrix. \n\nThe resulting Dl and Dr are diagonal scaling matrices.   If the keyword argument pow2 = true is specified, then the components of the resulting  optimal Dl and Dr are replaced by their nearest integer powers of 2.  If pow2 = false, the optimal values Dl and Dr are returned. The resulting Dl*A*Dr and Dl*E*Dr overwrite A and E, respectively\n\nThe keyword argument tol = τ, with τ ≤ 1,  specifies the tolerance used in the stopping criterion.  The iterative process is stopped as soon as the incremental scalings are tol-close to the identity. \n\nThe keyword argument maxiter = k specifies the maximum number of iterations k  allowed in the balancing algorithm. \n\nNote: This function is based on the MATLAB function rowcolsums.m of [1], modified such that the scaling operations are directly applied to A and E.  \n\n[1] F.M.Dopico, M.C.Quintana and P. van Dooren,      \"Diagonal scalings for the eigenstructure of arbitrary pencils\", SIMAX, 43:1213-1237, 2022. \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.ordeigvals","page":"Computations involving regular matrix pencils","title":"MatrixPencils.ordeigvals","text":" ev = ordeigvals(A)\n\nCompute the vector ev of eigenvalues of a Schur matrix A in their order of appearance down the diagonal of A. ordeigvals is an order-preserving version of eigvals for triangular/quasitriangular matrices.\n\n\n\n\n\nordeigvals(A, B) -> (ev, α, β)\n\nCompute the vector ev of generalized eigenvalues of the pair (A,B), with A a Schur matrix and B an upper triangular matrix,  in their order of appearance down the diagonals of A and B. ordeigvals is an order-preserving version of eigvals for (triangular/quasi-upper-triangular, triangular) pairs of matrices. α is a complex vector and β is a real vector such that the generalized eigenvalues ev can be alternatively obtained with α./β.\n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.isregular","page":"Computations involving regular matrix pencils","title":"MatrixPencils.isregular","text":"isregular(A, E, γ; atol::Real = 0,  rtol::Real = atol > 0 ? 0 : n*ϵ) -> Bool\n\nTest whether the matrix pencil A-λE is regular at λ = γ (i.e., A-λE is square and smalldet(A-λE) neq 0).  The underlying computational procedure checks the maximal rank of A-γE if γ is finite and of E if  γ is infinite . \n\nThe keyword arguements atol and rtol specify the absolute and relative tolerances for the nonzero elements of A-γE, respectively.  The default relative tolerance is n*ϵ, where n is the size of  A, and ϵ is the  machine epsilon of the element type of A. \n\n\n\n\n\nisregular(A, E; atol1::Real = 0, atol2::Real = 0, rtol::Real=min(atol1,atol2)>0 ? 0 : n*ϵ) -> Bool\n\nTest whether the matrix pencil A-λE is regular (i.e., A-λE is square and smalldet(A-λE) notequiv 0).  The underlying computational procedure reduces the pencil A-λE to an appropriate Kronecker-like form,  which provides information on the rank of A-λE. \n\nThe keyword arguements atol1, atol2 and rtol specify the absolute tolerance for the nonzero elements of A, the absolute tolerance for the nonzero elements of E, and the relative tolerance  for the nonzero elements of A and E, respectively.  The default relative tolerance is n*ϵ, where n is the size of  A, and ϵ is the  machine epsilon of the element type of A. \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.isunimodular","page":"Computations involving regular matrix pencils","title":"MatrixPencils.isunimodular","text":"isunimodular(A, E; atol1::Real = 0, atol2::Real = 0, rtol::Real=min(atol1,atol2)>0 ? 0 : n*ϵ) -> Bool\n\nTest whether the matrix pencil A-λE is unimodular (i.e., A-λE is square, regular and det(A-λE) == constant).  The underlying computational procedure reduces the pencil A-λE to an appropriate Kronecker-like form,  which provides information to check the full rank of A-λE and the lack of finite eigenvalues. \n\nThe keyword arguements atol1, atol2 and rtol specify the absolute tolerance for the nonzero elements of A, the absolute tolerance for the nonzero elements of E, and the relative tolerance  for the nonzero elements of A and E, respectively.  The default relative tolerance is n*ϵ, where n is the size of  A, and ϵ is the  machine epsilon of the element type of A. \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.fisplit","page":"Computations involving regular matrix pencils","title":"MatrixPencils.fisplit","text":"fisplit(A, E, B, C; fast = true, finite_infinite = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (At, Et, Bt, Ct, Q, Z, ν, blkdims)\n\nReduce the regular matrix pencil A - λE to an equivalent form At - λEt = Q'*(A - λE)*Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices At and Et are in one of the following block upper-triangular forms:\n\n(1) if finite_infinite = false, then\n\n               | Ai-λEi |   *     |\n    At - λEt = |--------|---------|, \n               |    O   | Af-λEf  |\n\nwhere the ni x ni subpencil Ai-λEi contains the infinite elementary  divisors and the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular, contains the finite eigenvalues of the pencil A-λE.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular and Ei nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni, nf).   \n\n(2) if finite_infinite = true, then\n\n               | Af-λEf |   *    |\n    At - λEt = |--------|--------|, \n               |   O    | Ai-λEi |\n\nwhere the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular,  contains the finite eigenvalues of the pencil A-λE and the ni x ni subpencil Ai-λEi  contains the infinite elementary divisors.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular  and Ei nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (nf, ni).   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\nBt = Q'*B, unless B = missing, in which case Bt = missing is returned, and Ct = C*Z,  unless C = missing, in which case Ct = missing is returned .              \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.fisplit!","page":"Computations involving regular matrix pencils","title":"MatrixPencils.fisplit!","text":"fisplit!(A, E, Q, Z, B, C; fast = true, finite_infinite = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (ν, blkdims)\n\nReduce the regular matrix pencil A - λE to an equivalent form At - λEt = Q1'*(A - λE)*Z1 using  orthogonal or unitary transformation matrices Q1 and Z1 such that the transformed matrices At and Et are in one of the following block upper-triangular forms:\n\n(1) if finite_infinite = false, then\n\n               | Ai-λEi |   *     |\n    At - λEt = |--------|---------|, \n               |    O   | Af-λEf  |\n\nwhere the ni x ni subpencil Ai-λEi contains the infinite elementary  divisors and the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular, contains the finite eigenvalues of the pencil A-λE.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular and Ei nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni, nf).   \n\n(2) if finite_infinite = true, then\n\n               | Af-λEf |   *    |\n    At - λEt = |--------|--------|, \n               |   O    | Ai-λEi |\n\nwhere the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular,  contains the finite eigenvalues of the pencil A-λE and the ni x ni subpencil Ai-λEi  contains the infinite elementary divisors.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular and Ei nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (nf, ni).   \n\nThe reduced matrices At and Et are returned in A and E, respectively,  while Q1'*B is returned in B, unless B = missing, and C*Z1, is returned in C,  unless C = missing.   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations Q1 are accumulated in the matrix Q <- Q*Q1  if withQ = true. Otherwise, Q is unchanged.    The performed right orthogonal or unitary transformations Z1 are accumulated in the matrix Z <- Z*Z1  if withZ = true. Otherwise, Z is unchanged.            \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.sfisplit","page":"Computations involving regular matrix pencils","title":"MatrixPencils.sfisplit","text":"sfisplit(A, E, B, C; fast = true, finite_infinite = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (At, Et, Bt, Ct, Q, Z, ν, blkdims)\n\nReduce the regular matrix pencil A - λE to an equivalent form At - λEt = Q'*(A - λE)*Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices At and Et are in one of the following block upper-triangular forms:\n\n(1) if finite_infinite = true, then\n\n               | Ai1    *        *     |\n    At - λEt = | O    Af-λEf     *     |\n               | O      0     Ai2-λEi2 |\n\nwhere the ni1 x ni1 upper triangular nonsingular matrix Ai1 and the ni2 x ni2 subpencil Ai2-λEi2 contain the infinite elementary  divisors and the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular, contains the finite eigenvalues of the pencil A-λE.\n\nThe subpencil Ai2-λEi2 is in a staircase form, with Ai2 nonsingular and upper triangular and Ei2 nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai2-λEi2 such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+2]-ν[nb-j+1] for j = 1, 2, ..., nb+1 is the number of infinite elementary  divisors of degree j (with ν[0] := 0 and ν[nb+1] := ni1).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni1, nf, ni2).   \n\n(2) if finite_infinite = false, then\n\n               | Ai1-λEi1    *      *  |\n    At - λEt = | O         Af-λEf   *  |\n               | O           0     Ai2 |\n\nwhere the ni1 x ni1 subpencil Ai1-λEi1 and the upper triangular nonsingular matrix Ai2 contain the infinite elementary  divisors and the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular, contains the finite eigenvalues of the pencil A-λE.\n\nThe subpencil Ai1-λEi1 is in a staircase form, with Ai1 nonsingular and upper triangular and Ei1 nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai1-λEi1 such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 0, 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0 and ν[0] = ni2).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni1, nf, ni2).   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\nBt = Q'*B, unless B = missing, in which case Bt = missing is returned, and Ct = C*Z,  unless C = missing, in which case Ct = missing is returned .              \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.sfisplit!","page":"Computations involving regular matrix pencils","title":"MatrixPencils.sfisplit!","text":"sfisplit!(A, E, Q, Z, B, C; fast = true, finite_infinite = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (ν, blkdims)\n\nReduce the regular matrix pencil A - λE to an equivalent form At - λEt = Q1'*(A - λE)*Z1 using  orthogonal or unitary transformation matrices Q1 and Z1 such that the transformed matrices At and Et are in one of the following block upper-triangular forms:\n\n(1) if finite_infinite = true, then\n\n               | Ai1    *        *     |\n    At - λEt = | O    Af-λEf     *     |\n               | O      0     Ai2-λEi2 |\n\nwhere the ni1 x ni1 upper triangular nonsingular matrix Ai1 and the ni2 x ni2 subpencil Ai2-λEi2 contain the infinite elementary  divisors and the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular, contains the finite eigenvalues of the pencil A-λE.\n\nThe subpencil Ai2-λEi2 is in a staircase form, with Ai2 nonsingular and upper triangular and Ei2 nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai2-λEi2 such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+2]-ν[nb-j+1] for j = 1, 2, ..., nb+1 is the number of infinite elementary  divisors of degree j (with ν[0] := 0 and ν[nb+1] := ni1).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni1, nf, ni2).   \n\n(2) if finite_infinite = false, then\n\n               | Ai1-λEi1    *      *  |\n    At - λEt = | O         Af-λEf   *  |\n               | O           0     Ai2 |\n\nwhere the ni1 x ni1 subpencil Ai1-λEi1 and the upper triangular nonsingular matrix Ai2 contain the infinite elementary  divisors and the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular, contains the finite eigenvalues of the pencil A-λE.\n\nThe subpencil Ai1-λEi1 is in a staircase form, with Ai1 nonsingular and upper triangular and Ei1 nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai1-λEi1 such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 0, 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0 and ν[0] = ni2).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni1, nf, ni2).   \n\nThe reduced matrices At and Et are returned in A and E, respectively,  while Q1'*B is returned in B, unless B = missing, and C*Z1, is returned in C,  unless C = missing.   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations Q1 are accumulated in the matrix Q <- Q*Q1  if withQ = true. Otherwise, Q is unchanged.    The performed right orthogonal or unitary transformations Z1 are accumulated in the matrix Z <- Z*Z1  if withZ = true. Otherwise, Z is unchanged.            \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.fihess","page":"Computations involving regular matrix pencils","title":"MatrixPencils.fihess","text":"fihess(A, E; fast = true, finite_infinite = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (At, Et, Q, Z, ν, blkdims)\n\nReduce the regular matrix pencil A - λE to an equivalent form At - λEt = Q'*(A - λE)*Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices At and Et are in one of the following block upper-triangular forms:\n\n(1) if finite_infinite = false, then\n\n               | Ai-λEi |   *     |\n    At - λEt = |--------|---------|, \n               |    O   | Af-λEf  |\n\nwhere the ni x ni subpencil Ai-λEi contains the infinite elementary divisors and  the nf x nf subpencil Af-λEf contains the finite eigenvalues of the pencil A-λE.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular and Ei nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0).\n\nThe subpencil Af-λEf is with Af in an upper Hessenberg form and Ef nonsingular and upper triangular. \n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni, nf).   \n\n(2) if finite_infinite = true, then\n\n               | Af-λEf |   *    |\n    At - λEt = |--------|--------|, \n               |   O    | Ai-λEi |\n\nwhere the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular,  contains the finite eigenvalues of the pencil A-λE and the ni x ni subpencil Ai-λEi  contains the infinite elementary divisors.\n\nThe subpencil Af-λEf is with Af in an upper Hessenberg form and Ef nonsingular and upper triangular.  \n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular  and Ei nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (nf, ni).   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.fischur","page":"Computations involving regular matrix pencils","title":"MatrixPencils.fischur","text":"fischur(A, E; fast = true, finite_infinite = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (At, Et, Q, Z, ν, blkdims)\n\nReduce the regular matrix pencil A - λE to an equivalent form At - λEt = Q'*(A - λE)*Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices At and Et are in one of the following block upper-triangular forms:\n\n(1) if finite_infinite = false, then\n\n               | Ai-λEi |   *     |\n    At - λEt = |--------|---------|, \n               |    O   | Af-λEf  |\n\nwhere the ni x ni subpencil Ai-λEi contains the infinite elementary divisors and  the nf x nf subpencil Af-λEf contains the finite eigenvalues of the pencil A-λE.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular and Ei nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0).\n\nThe subpencil Af-λEf is with the pair (Af,Ef) in a generalized Schur form, with Af (quasi) upper triangular and  Ef nonsingular and upper triangular.  \n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni, nf).   \n\n(2) if finite_infinite = true, then\n\n               | Af-λEf |   *    |\n    At - λEt = |--------|--------|, \n               |   O    | Ai-λEi |\n\nwhere the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular,  contains the finite eigenvalues of the pencil A-λE and the ni x ni subpencil Ai-λEi  contains the infinite elementary divisors.\n\nThe subpencil Af-λEf is with the pair (Af,Ef) in a generalized Schur form, with Af (quasi) upper triangular and  Ef nonsingular and upper triangular.  \n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular  and Ei nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (nf, ni).   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.fischursep","page":"Computations involving regular matrix pencils","title":"MatrixPencils.fischursep","text":"fischursep(A, E; smarg, disc = false, fast = true, finite_infinite = false, stable_unstable = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (At, Et, Q, Z, ν, blkdims)\n\nReduce the regular matrix pencil A - λE to an equivalent block upper triangular form At - λEt = Q'*(A - λE)*Z  using orthogonal or unitary transformation matrices Q and Z such that the transformed matrices At and Et  have separated infinite, stable and unstable eigenvalues with respect to a stability domain Cs defined by the stability margin parameter smarg and  the stability type parameter disc. If disc = false, Cs is the set of complex numbers with real parts less than smarg,  while if disc = true, Cs is the set of complex numbers with moduli less than smarg (i.e., the interior of a disc  of radius smarg centered in the origin). If smarg = missing, the default value used is smarg = 0, if  disc = false, and smarg = 1, if disc = true.\n\nThe pencil At - λEt results in one of the following block upper-triangular forms:\n\n(1) if finite_infinite = false, then\n\n               | Ai-λEi   *      *    |\n    At - λEt = |    O   A1-λE1   *    |\n               |    0     0    A2-λE2 |\n\nwhere the ni x ni subpencil Ai-λEi contains the infinite elementary divisors,  the n1 x n1 subpencil A1-λE1 is with the pair (A1,E1) in a generalized Schur form, and the  n2 x n2 subpencil A2-λE2 is with the pair (A2,E2) in a generalized Schur form.  The pencil A1-λE1 has unstable finite eigenvalues and A2-λE2 has stable finite eigenvalues if stable_unstable = false, while A1-λE1 has stable finite eigenvalues and A2-λE2 has unstable finite eigenvalues if stable_unstable = true.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular and Ei nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni, n1, n2).   \n\n(2) if finite_infinite = true, then\n\n               | A1-λE1   *      *    |\n    At - λEt = |    O   A2-λE2   *    |\n               |    0     0    Ai-λEi |\n\nwhere the ni x ni subpencil Ai-λEi contains the infinite elementary divisors,  the n1 x n1 subpencil A1-λE1 is with the pair (A1,E1) in a generalized Schur form, and the  n2 x n2 subpencil A2-λE2 is with the pair (A2,E2) in a generalized Schur form.  The pencil A1-λE1 has unstable finite eigenvalues and A2-λE2 has stable finite eigenvalues if stable_unstable = false, while A1-λE1 has stable finite eigenvalues and A2-λE2 has unstable finite eigenvalues if stable_unstable = true.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular  and Ei nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (n1, n2, ni).   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.sfischursep","page":"Computations involving regular matrix pencils","title":"MatrixPencils.sfischursep","text":"sfischursep(A, E; smarg, disc = false, fast = true, finite_infinite = false, stable_unstable = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (At, Et, Q, Z, ν, blkdims)\n\nReduce the regular matrix pencil A - λE to an equivalent block upper triangular form At - λEt = Q'*(A - λE)*Z  using orthogonal or unitary transformation matrices Q and Z such that the transformed matrices At and Et  have separated infinite, stable and unstable eigenvalues with respect to a stability domain Cs defined by the stability margin parameter smarg and  the stability type parameter disc. If disc = false, Cs is the set of complex numbers with real parts less than smarg,  while if disc = true, Cs is the set of complex numbers with moduli less than smarg (i.e., the interior of a disc  of radius smarg centered in the origin). If smarg = missing, the default value used is smarg = 0, if  disc = false, and smarg = 1, if disc = true.\n\nThe pencil At - λEt results in one of the following block upper-triangular forms:\n\n(1) if finite_infinite = true, then\n\n               | Ai1   *      *       *     |\n    At - λEt = |  0  A1-λE1   *       *     |\n               |  0    0    A2-λE2    *     |\n               |  0    0      0    Ai2-λEi2 |\n\nwhere the ni1 x ni1 matrix Ai1 and the  ni2 x ni2 subpencil Ai2-λEi2 contain the infinite elementary divisors,  the n1 x n1 subpencil A1-λE1 is with the pair (A1,E1) in a generalized Schur form, and the  n2 x n2 subpencil A2-λE2 is with the pair (A2,E2) in a generalized Schur form.  The pencil A1-λE1 has unstable finite eigenvalues and A2-λE2 has stable finite eigenvalues if stable_unstable = false, while A1-λE1 has stable finite eigenvalues and A2-λE2 has unstable finite eigenvalues if stable_unstable = true.\n\nThe subpencil Ai2-λEi2 is in a staircase form, with Ai2 nonsingular and upper triangular and Ei2 nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai2-λEi2 such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+2]-ν[nb-j+1] for j = 1, 2, ..., nb+1 is the number of infinite elementary  divisors of degree j (with ν[0] := 0 and ν[nb+1] := ni1).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni1, n1, n2, ni2).   \n\n(2) if finite_infinite = false, then\n\n               | Ai1-λEi1   *      *     *  |\n               |    0     A1-λE1   *     *  |\n    At - λEt = |    0       0    A2-λE2  *  |\n               |    0       0      0    Ai2 |\n\nwhere the ni1 x ni1 subpencil Ai1-λEi1 and the ni2 x ni2 upper triangular and nonsingular matrix Ai2 contain the infinite elementary divisors of A-λE,  the n1 x n1 subpencil A1-λE1 is with the pair (A1,E1) in a generalized Schur form, and the  n2 x n2 subpencil A2-λE2 is with the pair (A2,E2) in a generalized Schur form.  The pencil A1-λE1 has unstable finite eigenvalues and A2-λE2 has stable finite eigenvalues if stable_unstable = false, while A1-λE1 has stable finite eigenvalues and A2-λE2 has unstable finite eigenvalues if stable_unstable = true.\n\nThe subpencil Ai1-λEi1 is in a staircase form, with Ai1 nonsingular and upper triangular  and Ei1 nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai1-λEi1 such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 0, 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0 and ν[0] = ni2).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni1, n1, n2, ni2).   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.fiblkdiag","page":"Computations involving regular matrix pencils","title":"MatrixPencils.fiblkdiag","text":"fiblkdiag(A, E, B, C; fast = true, finite_infinite = false, trinv = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (At, Et, Bt, Ct, Q, Z, ν, blkdims, sep)\n\nReduce the regular matrix pencil A - λE to an equivalent form At - λEt = Q*(A - λE)*Z using  the transformation matrices Q and Z such that the transformed matrices At and Et are in one of the following block diagonal forms:\n\n(1) if finite_infinite = false, then\n\n               | Ai-λEi |   0     |\n    At - λEt = |--------|---------|, \n               |    O   | Af-λEf  |\n\nwhere the ni x ni subpencil Ai-λEi contains the infinite elementary  divisors and the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular, contains the finite eigenvalues of the pencil A-λE.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular and Ei nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni, nf).   \n\n(2) if finite_infinite = true, then\n\n               | Af-λEf |   0    |\n    At - λEt = |--------|--------|, \n               |   O    | Ai-λEi |\n\nwhere the nf x nf subpencil Af-λEf, with Ef nonsingular and upper triangular,  contains the finite eigenvalues of the pencil A-λE and the ni x ni subpencil Ai-λEi  contains the infinite elementary divisors.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular  and Ei nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (nf, ni).   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decomdiagpositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nIf withQ = true, Q contains the left transformation matrix, if trinv = false, or its inverse, if trinv = true.  If withQ = false, Q is set to nothing.    If withZ = true, Z contains the right transformation matrix, if trinv = false, or its inverse, if trinv = true.  If withZ = false, Z is set to nothing.   \n\nBt = Q*B, unless B = missing, in which case Bt = missing is returned, and Ct = C*Z,  unless C = missing, in which case Ct = missing is returned .              \n\nAn estimation of the separation of the spectra of Ai-λEi and Af-λEf is returned in sep, where  0 < sep ≤ 1.\n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.gsblkdiag","page":"Computations involving regular matrix pencils","title":"MatrixPencils.gsblkdiag","text":"gsblkdiag(A, E, B, C; smarg, disc = false, fast = true, finite_infinite = false, stable_unstable = false, trinv = false, \n          atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (At, Et, Bt, Ct, Q, Z, ν, blkdims, sep)\n\nReduce the regular matrix pencil A - λE to an equivalent block diagonal triangular form At - λEt = Q*(A - λE)*Z  using the transformation matrices Q and Z such that the transformed matrices At and Et  have separated infinite, stable and unstable eigenvalues with respect to a stability domain Cs  defined by the stability margin parameter smarg and the stability type parameter disc.  If disc = false, Cs is the set of complex numbers with real parts less than smarg,  while if disc = true, Cs is the set of complex numbers with moduli less than smarg (i.e., the interior of a disc  of radius smarg centered in the origin). If smarg = missing, the default value used is smarg = 0, if  disc = false, and smarg = 1, if disc = true.\n\nThe pencil At - λEt results in one of the following block upper-triangular forms:\n\n(1) if finite_infinite = false, then\n\n               | Ai-λEi   *      0    |\n    At - λEt = |    O   A1-λE1   0    |\n               |    0     0    A2-λE2 |\n\nwhere the ni x ni subpencil Ai-λEi contains the infinite elementary divisors,  the n1 x n1 subpencil A1-λE1 is with the pair (A1,E1) in a generalized Schur form, and the  n2 x n2 subpencil A2-λE2 is with the pair (A2,E2) in a generalized Schur form.  The pencil A1-λE1 has unstable finite eigenvalues and A2-λE2 has stable finite eigenvalues if stable_unstable = false, while A1-λE1 has stable finite eigenvalues and A2-λE2 has unstable finite eigenvalues if stable_unstable = true.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular and Ei nilpotent and upper triangular.  The nb-dimensional vector ν contains the dimensions of the diagonal blocks of the staircase form  Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[i]-ν[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with ν[nb+1] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (ni, n1, n2).   \n\n(2) if finite_infinite = true, then\n\n               | A1-λE1   0      0    |\n    At - λEt = |    O   A2-λE2   *    |\n               |    0     0    Ai-λEi |\n\nwhere the ni x ni subpencil Ai-λEi contains the infinite elementary divisors,  the n1 x n1 subpencil A1-λE1 is with the pair (A1,E1) in a generalized Schur form, and the  n2 x n2 subpencil A2-λE2 is with the pair (A2,E2) in a generalized Schur form.  The pencil A1-λE1 has unstable finite eigenvalues and A2-λE2 has stable finite eigenvalues if stable_unstable = false, while A1-λE1 has stable finite eigenvalues and A2-λE2 has unstable finite eigenvalues if stable_unstable = true.\n\nThe subpencil Ai-λEi is in a staircase form, with Ai nonsingular and upper triangular  and Ei nilpotent and upper triangular.  The nb-dimensional vectors ν contains the dimensions of the diagonal blocks of the staircase form Ai-λEi such that i-th block has dimensions ν[i] x ν[i].  The difference ν[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0).\n\nThe dimensions of the diagonal blocks are returned in blkdims = (n1, n2, ni).   \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nIf withQ = true, Q contains the left transformation matrix, if trinv = false, or its inverse, if trinv = true.  If withQ = false, Q is set to nothing.    If withZ = true, Z contains the left transformation matrix, if trinv = false, or its inverse, if trinv = true.  If withZ = false, Z is set to nothing.   \n\nBt = Q*B, unless B = missing, in which case Bt = missing is returned, and Ct = C*Z,  unless C = missing, in which case Ct = missing is returned .              \n\nAn estimation of the separation of the spectra of the two underlying diagonal blocks is returned in sep,  where  0 ≤ sep ≤ 1. A value sep ≈ 0 indicates that A1-λE1 and A2-λE2 have some almost equal eigenvalues. \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.ssblkdiag","page":"Computations involving regular matrix pencils","title":"MatrixPencils.ssblkdiag","text":"ssblkdiag(A, B, C; smarg, disc = false, stable_unstable = false, withQ = true, withZ = true) -> (At, Bt, Ct, Q, Z, blkdims, sep)\n\nReduce the regular matrix pencil A - λI to an equivalent block diagonal triangular form At - λI = Q*(A - λI)*Z  using the transformation matrices Q and Z, where Q = inv(Z), such that the transformed matrix At have  separated stable and unstable eigenvalues with respect to a stability domain Cs defined by the  stability margin parameter smarg and the stability type parameter disc.  If disc = false, Cs is the set of complex numbers with real parts less than smarg,  while if disc = true, Cs is the set of complex numbers with moduli less than smarg (i.e., the interior of a disc  of radius smarg centered in the origin). If smarg = missing, the default value used is smarg = 0, if  disc = false, and smarg = 1, if disc = true. The matrix At results in the following block diagonal form\n\n    At = | A1  0  |\n         | 0   A2 |\n\nwhere the n1 x n1 matrix A1 and the n2 x n2 matrix A2 are in Schur form.  The matrix A1 has unstable eigenvalues and A2 has stable eigenvalues if stable_unstable = false, while A1 has stable eigenvalues and A2 has unstable eigenvalues if stable_unstable = true. The dimensions of the diagonal blocks are returned in blkdims = (n1, n2).    If withQ = true, Q contains the left transformation matrix. If withQ = false, Q is set to nothing.    If withZ = true, Z contains the right transformation matrix. If withZ = false, Z is set to nothing.    Bt = Q*B, unless B = missing, in which case Bt = missing is returned, and Ct = C*Z,  unless C = missing, in which case Ct = missing is returned .               An estimation of the separation of the spectra of the two underlying diagonal blocks is returned in sep,  where  0 ≤ sep ≤ 1. A value sep ≈ 0 indicates that A1 and A2 have some almost equal eigenvalues. \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.saloc","page":"Computations involving regular matrix pencils","title":"MatrixPencils.saloc","text":"saloc(A, B; evals, sdeg, disc = false, atol1 = 0, atol2 = 0, rtol) -> (F, Scl, blkdims)\n\nCompute for the pair (A,B), a matrix F such that all eigenvalues of the matrix A+B*F lie in the stability domain Cs  specified by the stability degree parameter sdeg and stability type parameter disc.  If disc = false, Cs is the set of complex numbers with real parts at most sdeg, while if disc = true,  Cs is the set of complex numbers with moduli at most sdeg (i.e., the interior of a disc of radius sdeg centered in the origin).  evals is a real or complex vector, which contains the desired eigenvalues of the matrix A+B*F within Cs.  For real data A and B, evals must be a self-conjugated complex set to ensure that the resulting F is also a real matrix. \n\nFor a pair (A,B) with A of order n, the number of assignable eigenvalues is nc := n-nu,   where nu is the number of fixed eigenvalues of A. The assignable eigenvalues are called the controllable eigenvalues,  while the fixed eigenvalues are called the uncontrollable eigenvalues (these are the zeros of the pencil [A-λI B]).  The spectrum allocation is achieved by successively replacing the controllable eigenvalues of A lying outside of the  stability domain Cs with eigenvalues provided in evals. All eigenvalues of A lying in Cs are kept unalterred.   If the number of specified eigenvalues in evals is less than the number of controllable eigenvalues of A outside of Cs (e.g., if evals = missing), then some of the controllable eigenvalues of A are assigned to the nearest values  on the boundary of Cs. If sdeg = missing and evals = missing, the default value used for sdeg is -0.05  if  disc = false and 0.95 if disc = true. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of B,   and the relative tolerance for the nonzero elements of A and B.   The default relative tolerance is n*ϵ, where ϵ is the machine epsilon of the element type of A. \n\nThe resulting matrix Acl := Z'*(A+B*F)*Z in a Schur form, where Z is the orthogonal/unitary matrix used  to obtain the matrix A+B*F in Schur form, has the form\n\n       ( Ag  *   *  )     \n Acl = ( 0   Aa  *  ) \n       ( 0   0   Au )\n\nwhere:  Ag contains the ng eigenvalues of A in Cs, Aa contains the na assigned eigenvalues in Cs and Au contains nu uncontrollable eigenvalues of A lying outside Cs.  The matrices Acl and Z and the vector α of eigenvalues of Acl (also of A+B*F) are returned in the Schur object Scl.  The values of ng, na and nu are returned in the 3-dimensional vector blkdims = [ng, na, nu].\n\nMethod:  The Schur method of [1], extended to possibly uncontrollable pairs, is employed.  \n\nReferences:\n\n[1] A. Varga.      A Schur method for pole assignment.     IEEE Trans. on Automatic Control, vol. 26, pp. 517-519, 1981.\n\n\n\n\n\nsaloc(A, E, B; evals, sdeg, disc = false, atol1 = 0, atol2 = 0, atol3 = 0, rtol, sepinf = true, fast = true) -> (F, Scl, blkdims)\n\nCompute for the pair (A-λE,B), with A-λE a regular pencil, a matrix F such that all finite eigenvalues of the  pencil A+B*F-λE lie in the stability domain Cs specified by the stability degree parameter sdeg and stability type parameter disc.  If disc = false, Cs is the set of complex numbers with real parts at most sdeg, while if disc = true,  Cs is the set of complex numbers with moduli at most sdeg (i.e., the interior of a disc of radius sdeg centered in the origin).  evals is a real or complex vector, which contains a set of finite desired eigenvalues for the pencil A+B*F-λE.  For real data A, E, and B, evals must be a self-conjugated complex set to ensure that the resulting F is also a real matrix. \n\nFor a pair (A-λE,B) with A of order n, the number of assignable finite eigenvalues is nfc := n-ninf-nfu,   where ninf is the number of infinite eigenvalues of A-λE and nfu is the number of fixed finite eigenvalues of A-λE.  The assignable finite eigenvalues are called the controllable finite eigenvalues,  while the fixed finite eigenvalues are called the uncontrollable finite eigenvalues (these are the finite zeros of the pencil [A-λE B]).  The spectrum allocation is achieved by successively replacing the controllable finite eigenvalues of A-λE lying outside of the  stability domain Cs with eigenvalues provided in evals. All finite eigenvalues of A-λE lying in Cs are kept unalterred.   If the number of specified eigenvalues in evals is less than the number of controllable finite eigenvalues of A-λE outside of Cs (e.g., if evals = missing), then some of the controllable finite eigenvalues of A-λE are assigned to the nearest values  on the boundary of Cs. If sdeg = missing and evals = missing, the default value used for sdeg is -0.05  if  disc = false and 0.95 if disc = true. \n\nThe keyword arguments atol1, atol2, atol3, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E, the absolute tolerance for the nonzero elements of B,   and the relative tolerance for the nonzero elements of A, E and B.   The default relative tolerance is n*ϵ, where ϵ is the machine epsilon of the element type of A. \n\nThe keyword argument sepinf specifies the option for a preliminary separation  of the infinite eigenvalues of the pencil A-λE as follows: if sepinf = false, no separation of infinite eigenvalues is performed,  while for sepinf = true (the default option), a preliminary separation of the infinite eigenvalues from the finite ones is performed. If E is nonsingular, then sepinf = false is recommended to be used. If E is numerically singular, then the option sepinf = false is used.  The separation of finite and infinite eigenvalues is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe resulting pencil Acl-λEcl := Q'*(A+B*F-λE)*Z,  where Q and Z are the   orthogonal/unitary matrices used to obtain the pair (Acl,Ecl) in a generalized Schur form (GSF), has the form\n\n            ( Ai-λEi    *        *       *      )     \n Acl-λEcl = (   0    Afg-λEfg    *       *      )  \n            (   0       0     Afa-λEfa   *      )    \n            (   0       0        0     Afu-λEfu )\n\nwhere: Ai-λEi with Ai upper triangular and invertible and Ei upper triangular and nilpotent, contains the ninf infinite eigenvalues of A-λE;  Afg-λEfg contains nfg finite eigenvalues of A-λE in Cs; Afa-λEfa contains nfa assigned finite generalized eigenvalues in Cs;  and Afu-λEfu contains nfu uncontrollable finite eigenvalues of A-λE lying outside Cs.  The matrices Acl, Ecl, Q, Z and the vectors α and β such that α./β are the generalized eigenvalues of  the pair (Acl,Ecl) are returned in the GeneralizeSchur object Scl.  The values of ninf, nfg, nfa and nfu are returned in the 4-dimensional vector blkdims = [ninf, nfg, nfa, nfu].\n\nMethod:  For a pair (A-λE,B) with E = I, the Schur method of [1] is used, while for a general pair (A-λE,B) the generalized Schur method of [2]  is used to solve the R-stabilzation problem.\n\nReferences:\n\n[1] A. Varga.      A Schur method for pole assignment.     IEEE Trans. on Automatic Control, vol. 26, pp. 517-519, 1981.\n\n[2] A. Varga.      On stabilization methods of descriptor systems.     Systems & Control Letters, vol. 24, pp.133-138, 1995.\n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.salocd","page":"Computations involving regular matrix pencils","title":"MatrixPencils.salocd","text":"salocd(A, C; evals, sdeg, disc = false, atol1 = 0, atol2 = 0, rtol) -> (K, Scl, blkdims)\n\nCompute for the pair (A,C), a matrix K such that all eigenvalues of the matrix A+K*C lie in the stability domain Cs  specified by the stability degree parameter sdeg and stability type parameter disc.  If disc = false, Cs is the set of complex numbers with real parts at most sdeg, while if disc = true,  Cs is the set of complex numbers with moduli at most sdeg (i.e., the interior of a disc of radius sdeg centered in the origin).  evals is a real or complex vector, which contains the desired eigenvalues of the matrix A+K*C within Cs.  For real data A and C, evals must be a self-conjugated complex set to ensure that the resulting K is also a real matrix. \n\nFor a pair (A,C) with A of order n, the number of assignable eigenvalues is nc := n-nu,   where nu is the number of fixed eigenvalues of A. The assignable eigenvalues are called the observable eigenvalues,  while the fixed eigenvalues are called the unobservable eigenvalues (these are the zeros of the pencil [A-λI; C]).  The spectrum allocation is achieved by successively replacing the observable eigenvalues of A lying outside of the  stability domain Cs with eigenvalues provided in evals. All eigenvalues of A lying in Cs are kept unalterred.   If the number of specified eigenvalues in evals is less than the number of observable eigenvalues of A outside of Cs (e.g., if evals = missing), then some of the observable eigenvalues of A are assigned to the nearest values  on the boundary of Cs. If sdeg = missing and evals = missing, the default value used for sdeg is -0.05  if  disc = false and 0.95 if disc = true. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of C,   and the relative tolerance for the nonzero elements of A and C.   The default relative tolerance is n*ϵ, where ϵ is the machine epsilon of the element type of A. \n\nThe resulting matrix Acl := Z'*(A+K*C)*Z in a Schur form, where Z is the orthogonal/unitary matrix used  to obtain the matrix A+K*C in Schur form, has the form\n\n       ( Au  *   *  )     \n Acl = ( 0   Aa  *  ) \n       ( 0   0   Ag )\n\nwhere:  Au contains nu unobservable eigenvalues of A lying outside Cs,  Aa contains the na assigned eigenvalues in Cs and Ag contains the ng eigenvalues of A in Cs.  The matrices Acl and Z and the vector α of eigenvalues of Acl (also of A+K*C) are returned in the Schur object Scl.  The values of nu, na and ng are returned in the 3-dimensional vector blkdims = [nu, na, ng].\n\nMethod:  The Schur method of [1] is applied to the dual pair (A',C') (extended to possibly unobservable pairs).  \n\nReferences:\n\n[1] A. Varga.      A Schur method for pole assignment.     IEEE Trans. on Automatic Control, vol. 26, pp. 517-519, 1981.\n\n\n\n\n\nsalocd(A, E, C; evals, sdeg, disc = false, atol1 = 0, atol2 = 0, atol3 = 0, rtol, sepinf = true, fast = true) -> (K, Scl, blkdims)\n\nCompute for the pair (A-λE,C), with A-λE a regular pencil, a matrix K such that all finite eigenvalues of the  pencil A+K*C-λE lie in the stability domain Cs specified by the stability degree parameter sdeg and stability type parameter disc.  If disc = false, Cs is the set of complex numbers with real parts at most sdeg, while if disc = true,  Cs is the set of complex numbers with moduli at most sdeg (i.e., the interior of a disc of radius sdeg centered in the origin).  evals is a real or complex vector, which contains a set of finite desired eigenvalues for the pencil A+K*C-λE.  For real data A, E, and B, evals must be a self-conjugated complex set to ensure that the resulting F is also a real matrix. \n\nFor a pair (A-λE,C) with A of order n, the number of assignable finite eigenvalues is nfc := n-ninf-nfu,   where ninf is the number of infinite eigenvalues of A-λE and nfu is the number of fixed finite eigenvalues of A-λE.  The assignable finite eigenvalues are called the observable finite eigenvalues,  while the fixed finite eigenvalues are called the unobservable finite eigenvalues (these are the finite zeros of the pencil [A-λE; C]).  The spectrum allocation is achieved by successively replacing the observable finite eigenvalues of A-λE lying outside of the  stability domain Cs with eigenvalues provided in evals. All finite eigenvalues of A-λE lying in Cs are kept unalterred.   If the number of specified eigenvalues in evals is less than the number of observable finite eigenvalues of A-λE outside of Cs (e.g., if evals = missing), then some of the observable finite eigenvalues of A-λE are assigned to the nearest values  on the boundary of Cs. If sdeg = missing and evals = missing, the default value used for sdeg is -0.05  if  disc = false and 0.95 if disc = true. \n\nThe keyword arguments atol1, atol2, , atol3, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E, the absolute tolerance for the nonzero elements of C,   and the relative tolerance for the nonzero elements of A, E and C.   The default relative tolerance is n*ϵ, where ϵ is the machine epsilon of the element type of A. \n\nThe keyword argument sepinf specifies the option for a preliminary separation  of the infinite eigenvalues of the pencil A-λE as follows: if sepinf = false, no separation of infinite eigenvalues is performed,  while for sepinf = true (the default option), a preliminary separation of the infinite eigenvalues from the finite ones is performed. If E is nonsingular, then sepinf = false is recommended to be used. If E is numerically singular, then the option sepinf = false is used.  The separation of finite and infinite eigenvalues is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe resulting pencil Acl-λEcl := Q'*(A+K*C-λE)*Z,  where Q and Z are the   orthogonal/unitary matrices used to obtain the pair (Acl,Ecl) in a generalized Schur form (GSF), has the form\n\n            ( Afu-λEfu    *        *       *    )     \n Acl-λEcl = (   0      Afa-λEfa    *       *    )  \n            (   0         0     Afg-λEfg   *    )    \n            (   0         0        0     Ai-λEi )\n\nwhere: Afu-λEfu contains nfu unobservable finite eigenvalues of A-λE lying outside Cs, Afa-λEfa contains nfa assigned finite generalized eigenvalues in Cs,  Afg-λEfg contains nfg finite eigenvalues of A-λE in Cs, and  Ai-λEi, with Ai upper triangular and invertible and Ei upper triangular and nilpotent,  contains the ninf infinite eigenvalues of A-λE.   The matrices Acl, Ecl, Q, Z and the vectors α and β such that α./β are the generalized eigenvalues of  the pair (Acl,Ecl) are returned in GeneralizeSchur object Scl.  The values of nfu, nfa, nfg and ninf and are returned in the 4-dimensional vector blkdims = [nfu, nfa, nfg, ninf].\n\nMethod:  For a pair (A-λE,C) with E = I, the dual Schur method of [1] is used, while for a general pair (A-λE,C) the dual generalized Schur method of [2]  is used to solve the R-stabilzation problem of [2] for the dual pair (A'-λE',C').\n\nReferences:\n\n[1] A. Varga.      A Schur method for pole assignment.     IEEE Trans. on Automatic Control, vol. 26, pp. 517-519, 1981.\n\n[2] A. Varga.      On stabilization methods of descriptor systems.     Systems & Control Letters, vol. 24, pp.133-138, 1995.\n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.salocinf","page":"Computations involving regular matrix pencils","title":"MatrixPencils.salocinf","text":"salocinf(A, E, B; atol1 = 0, atol2 = 0, atol3 = 0, rtol, fast = true) -> (F, G, Scl, blkdims)\n\nCompute for the controllable pair (A-λE,B), with A-λE a regular pencil, two matrices F and G such that all eigenvalues of the  pencil A+B*F-λ(E+B*G) are infinite. For a pair (A-λE,B) with fixed (uncontrollable) finite eigenvalues, only the assignable (controllable)  finite eigenvalues are moved to infinity. \n\nFor a pair (A-λE,B) with A of order n, the number of assignable infinite eigenvalues is nia := n-ninf-nfu,   where ninf is the number of infinite eigenvalues of A-λE and nfu is the number of fixed finite eigenvalues of A-λE.  The assignable finite eigenvalues are called the controllable finite eigenvalues,  while the fixed finite eigenvalues are called the uncontrollable finite eigenvalues (these are the finite zeros of the pencil [A-λE B]).  The spectrum allocation is achieved by successively replacing the controllable finite eigenvalues of A-λE with infinite eigenvalues.  All infinite eigenvalues of A-λE are kept unalterred.\n\nThe keyword arguments atol1, atol2, atol3, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E, the absolute tolerance for the nonzero elements of B,   and the relative tolerance for the nonzero elements of A, E and B.   The default relative tolerance is n*ϵ, where ϵ is the machine epsilon of the element type of A. \n\nThe preliminary separation of finite and infinite eigenvalues is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe resulting pencil Acl-λEcl := Q'*(A+B*F-λ(E+B*G))*Z,  where Q and Z are the   orthogonal/unitary matrices used to obtain the pair (Acl,Ecl) in a generalized Schur form (GSF), has the form\n\n            ( Aig-λEig    *        *     )     \n Acl-λEcl = (   0      Aia-λEia    *     )  \n            (   0         0     Afu-λEfu )\n\nwhere: Aig-λEig with Aig upper triangular and invertible and Eig upper triangular and nilpotent, contains the ninf infinite eigenvalues of A-λE;  Aia-λEia, with Aia upper triangular and invertible and Eia upper triangular and nilpotent, contains nia assigned infinite generalized eigenvalues;  and Afu-λEfu, with the pair (Afu,Efu) in a generalized Schur form,  contains nfu fixed (uncontrollable) finite eigenvalues of A-λE.  The matrices Acl, Ecl, Q, Z and the vectors α and β such that α./β are the generalized eigenvalues of  the pair (Acl,Ecl) are returned in the GeneralizeSchur object Scl.  The values of ninf, nia and nfu are returned in the 3-dimensional vector blkdims = [ninf, nia, nfu].\n\nMethod:  For a general pair (A-λE,B) the modified generalized Schur method of [1] is used to determine F and G such that the pair (A+B*F,E+B*G) has only infinite eigenvalues.\n\nReferences:\n\n[1] A. Varga.      On stabilization methods of descriptor systems.     Systems & Control Letters, vol. 24, pp.133-138, 1995.\n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils.salocinfd","page":"Computations involving regular matrix pencils","title":"MatrixPencils.salocinfd","text":"salocinfd(A, E, C; atol1 = 0, atol2 = 0, atol3 = 0, rtol, sepinf = true, fast = true) -> (K, L, Scl, blkdims)\n\nCompute for the pair (A-λE,C), with A-λE a regular pencil, the matrices K and L such that all eigenvalues of the  pencil A+K*C-λ(E+L*C) are infinite. For a pair (A-λE,C) with fixed (unobservable) finite eigenvalues, only the assignable (observable) finite eigenvalues are moved to infinity. \n\nFor a pair (A-λE,C) with A of order n, the number of assignable infinite eigenvalues is nia := n-ninf-nfu,   where ninf is the number of infinite eigenvalues of A-λE and nfu is the number of fixed finite eigenvalues of A-λE.  The assignable finite eigenvalues are called the observable finite eigenvalues,  while the fixed finite eigenvalues are called the unobservable finite eigenvalues (these are the finite zeros of the pencil [A-λE; C]).  The spectrum allocation is achieved by successively replacing the observable finite eigenvalues of A-λE with infinite eigenvalues.  All infinite eigenvalues of A-λE are kept unalterred.\n\nThe keyword arguments atol1, atol2, , atol3, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E, the absolute tolerance for the nonzero elements of C,   and the relative tolerance for the nonzero elements of A, E and C.   The default relative tolerance is n*ϵ, where ϵ is the machine epsilon of the element type of A. \n\nThe preliminary separation of finite and infinite eigenvalues is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe resulting pencil Acl-λEcl := Q'*(A+K*C-λ(E+L*C))*Z,  where Q and Z are the   orthogonal/unitary matrices used to obtain the pair (Acl,Ecl) in a generalized Schur form (GSF), has the form\n\n            ( Afu-λEfu    *        *     )     \n Acl-λEcl = (   0      Aia-λEia    *     )  \n            (   0         0     Aig-λEig )\n\nwhere: Afu-λEfu, with the pair (Afu,Efu) in a generalized Schur form,  contains nfu fixed (unobservable) finite eigenvalues of A-λE, Aia-λEia, with Aia upper triangular and invertible and Eia upper triangular and nilpotent, contains nia assigned infinite generalized eigenvalues;  Aig-λEig, with Aig upper triangular and invertible and Eig upper triangular and nilpotent, contains the ninf infinite eigenvalues of A-λE.  The matrices Acl, Ecl, Q, Z and the vectors α and β such that α./β are the generalized eigenvalues of  the pair (Acl,Ecl) are returned in the GeneralizeSchur object Scl.  The values of nfu, nia and ninf and are returned in the 3-dimensional vector blkdims = [nfu, nia, ninf].\n\nMethod:  For a general pair (A-λE,C) the dual of the modified generalized Schur method of [1] is used to determine K and L such that the pair (A+K*C,E+L*G) has only infinite eigenvalues.\n\nReferences:\n\n[1] A. Varga.      On stabilization methods of descriptor systems.     Systems & Control Letters, vol. 24, pp.133-138, 1995.\n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils._qrE!","page":"Computations involving regular matrix pencils","title":"MatrixPencils._qrE!","text":"_qrE!(A, E, Q, B; withQ = true)\n\nReduce the regular matrix pencil A - λE to an equivalent form A1 - λE1 = Q1'*(A - λE) using an orthogonal or unitary transformation matrix Q1 such that the transformed matrix E1 is upper triangular. The reduction is performed using the QR-decomposition of E.\n\nThe performed left orthogonal or unitary transformations Q1 are accumulated in the matrix Q <- Q*Q1  if withQ = true. Otherwise, Q is unchanged.   \n\nQ1'*B is returned in B unless B = missing.              \n\n\n\n\n\n","category":"function"},{"location":"pregular.html#MatrixPencils._svdlikeAE!","page":"Computations involving regular matrix pencils","title":"MatrixPencils._svdlikeAE!","text":"_svdlikeAE!(A, E, Q, Z, B, C; svdA = true, fast = true, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (rE, rA22)\n\nReduce the regular matrix pencil A - λE to an equivalent form A1 - λE1 = Q1'*(A - λE)*Z1 using  orthogonal or unitary transformation matrices Q1 and Z1 such that the transformed matrices A1 and E1  are, for svdA = true, in the following SVD-like coordinate form\n\n               | A11-λE11 |  A12  |  A13  |\n               |----------|-------|-------|\n    A1 - λE1 = |    A21   |  A22  |   0   | ,\n               |----------|-------|-------|\n               |    A31   |   0   |   0   |\n\nwhere the rE x rE matrix E11 and rA22 x rA22 matrix A22 are nosingular, and E11 and A22 are upper triangular,  if fast = true, and diagonal, if fast = false. \n\nIf svdA = false, only E is reduced to SVD-like form and A1 - λE1 has the form\n\n               | A11-λE11 |  A12  |\n    A1 - λE1 = |----------|-------| , \n               |    A21   |  A22  |\n\nwhere the rE x rE matrix E11 is nonsingular upper triangular, if fast = true,  and diagonal, if fast = false, and A22 is unreduced and has rank rA22.\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of A, the absolute tolerance for the nonzero elements of E,  and the relative tolerance  for the nonzero elements of A and E. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations Q1 are accumulated in the matrix Q <- Q*Q1  if withQ = true. Otherwise, Q is unchanged.    The performed right orthogonal or unitary transformations Z1 are accumulated in the matrix Z <- Z*Z1 if withZ = true.  Otherwise, Z is unchanged.  \n\nQ1'*B is returned in B unless B = missing and C*Z1 is returned in C unless C = missing .              \n\n\n\n\n\n","category":"function"},{"location":"rmapps.html#Some-applications-to-rational-matrices","page":"Some applications to rational matrices","title":"Some applications to rational matrices","text":"","category":"section"},{"location":"rmapps.html","page":"Some applications to rational matrices","title":"Some applications to rational matrices","text":"Function Description\nrmkstruct Determination of the Kronecker and infinite zero-pole structure using descriptor system based structured linearization\nrmzeros Computation of the finite and infinite zeros using descriptor system based structured linearization\nrmzeros1 Computation of the finite and infinite zeros using pencil based structured linearization\nrmpoles Computation of the finite and infinite poles using descriptor system based structured linearization\nrmpoles1 Computation of the finite and infinite poles using pencil based structured linearization\nrmrank Determination of the normal rank","category":"page"},{"location":"rmapps.html#MatrixPencils.rmkstruct","page":"Some applications to rational matrices","title":"MatrixPencils.rmkstruct","text":"rmkstruct(N, D; fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (KRInfo, iz, nfp, ip)\n\nDetermine the Kronecker-structure and infinite pole-zero structure information of the rational matrix  R(λ) := N(λ)./D(λ) and return an KRInfo object, the multiplicities of infinite zeros in iz,  the number of finite poles in nfp and the multiplicities of infinite poles in ip. \n\nThe numerator N(λ) is a polynomial matrix of the form N(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1),    for which the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix N,  where N[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nThe denominator D(λ) is a polynomial matrix of the form D(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1),   for which the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix D,  where D[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, N(λ) and D(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe information on the Kronecker-structure of the rational matrix R(λ) consists of  the right Kronecker indices rki, left Kronecker indices lki, the number of finite zeros nf  and the normal rank nrank and can be obtained from KRInfo as  KRInfo.rki, KRInfo.lki, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  KRInfo. Additionally, KRInfo.id contains the  infinite elementary divisors of the underlying system matrix pencil S(λ) used as linearization.\n\nThe Kronecker-structure information of the rational matrix R(λ) is obtained from the  Kronecker-structure information of the underlying linearization using the results of [1] and [2].  The determination of the Kronecker-structure information is performed by building an irreducible  descriptor system realization (A-λE,B,C,D) with A-λE a regular pencil of order n,  satisfying R(λ) = C*inv(λE-A)*B+D and reducing the structured system matrix pencil  S(λ) = [A-λE B; C D] to an appropriate Kronecker-like form (KLF) which exhibits  the number of its finite eigenvalues (also the finite zeros of R(λ)), the multiplicities of the  infinite eigenvalues (in excess with one to the multiplicities of infinite zeros of R(λ)),  the left and right Kronecker indices (also of R(λ)) and the normal rank  (in excess with n to the normal rank of R(λ)). The Kronecker-structure information and pole-zero stucture information on R(λ) are recovered from  the Kronecker-structure information of S(λ) and A-λE, respectively, using the results of [1] and [2].\n\nThe right Kronecker indices are provided in the integer vector rki.  The number of elements of rki is the dimension of the right nullspace of the rational matrix R(λ)  and their sum is the least degree of a right polynomial nullspace basis or the least McMillan degree of a right rational nullspace basis. \n\nThe left Kronecker indices are provided in the integer vector lki.  The number of elements of lki is the dimension of the left nullspace of the rational matrix R(λ)  and their sum is the least degree of a left polynomial nullspace basis or the least McMillan degree of a left rational nullspace basis.  \n\nThe multiplicities of infinite eigenvalues of S(λ) are provided in the integer vector id,  where each i-th element id[i] is the order of an infinite elementary divisor  (i.e., the multiplicity of an infinite eigenvalue). To each id[i] > 1 corresponds an infinite zero of R(λ) of multiplicity id[i]-1. The multiplicities of the infinite zeros of R(λ) are returned in iz. \n\nThe poles of R(λ) are the zeros of the regular pencil A-λE. The finite eigenvalues of A-λE are the   finite poles of R(λ) and their number is returned in nfp. The infinite zeros of A-λE are the   infinite poles of R(λ) and their  multiplicities are returned in ip. \n\nThe irreducible descriptor system based linearization is built using the methods described in [3] in conjunction with pencil manipulation algorithms of [4] and [5] to compute reduced order linearizations. These algorithms  employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe reductions to appropriate KLFs of S(λ) and A-λE are performed using orthogonal similarity transformations [5] and involves rank decisions based  on rank revealing QR-decompositions with column pivoting, if fast = true,  or, the more reliable, SVD-decompositions, if fast = false. \n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances,  respectively, for the nonzero  coefficients of N(λ) and D(λ).  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of N(λ), and ϵ is the  machine epsilon of the element type of coefficients of N(λ). \n\n[1] G. Verghese, B. Levy, and T. Kailath, Generalized state-space systems, IEEE Trans. Automat. Control, 26:811-831 (1981).\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n[3] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n[4] P. Van Dooreen, The generalized eigenstructure problem in linear system theory,  IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.\n\n[5] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"rmapps.html#MatrixPencils.rmzeros","page":"Some applications to rational matrices","title":"MatrixPencils.rmzeros","text":"rmzeros(N, D; fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, iz, KRInfo)\n\nReturn the finite and infinite zeros of the rational matrix R(λ) := N(λ)./D(λ) in val,  the multiplicities of infinite zeros in iz and the information on the Kronecker-structure of  the rational matrix R(λ) in the KRInfo object. \n\nThe information on the Kronecker-structure of the rational matrix R(λ) consists of  the right Kronecker indices rki, left Kronecker indices lki, the number of finite zeros nf  and the normal rank nrank and can be obtained from KRInfo as  KRInfo.rki, KRInfo.lki, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  KRInfo. Additionally, KRInfo.id contains the  infinite elementary divisors of the underlying linearization as a structured system matrix pencil.\n\nThe Kronecker-structure information of the rational matrix R(λ) is obtained from the  Kronecker-structure information of the underlying linearization using the results of [1] and [2].  The determination of the Kronecker-structure information is performed by building an irreducible  descriptor system realization (A-λE,B,C,D) with A-λE a regular pencil of order n,  satisfying R(λ) = C*inv(λE-A)*B+D and reducing the structured system matrix pencil  S(λ) = [A-λE B; C D] to an appropriate Kronecker-like form (KLF) which exhibits  the number of its finite eigenvalues (also the finite zeros of R(λ)), the multiplicities of the  infinite eigenvalues (in excess with one to the multiplicities of infinite zeros of R(λ)),  the left and right Kronecker indices (also of R(λ)) and the normal rank  (in excess with n to the normal rank of R(λ)).\n\nThe numerator N(λ) is a polynomial matrix of the form N(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1),    for which the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix N,  where N[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nThe denominator D(λ) is a polynomial matrix of the form D(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1),   for which the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix D,  where D[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, N(λ) and D(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe irreducible descriptor system based linearization is built using the methods described in [3] in conjunction with pencil manipulation algorithms of [4] and [5] to compute reduced order linearizations. These algorithms  employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe reduction to the appropriate KLF of S(λ) is performed using orthogonal similarity transformations [5] and involves rank decisions based on rank revealing QR-decompositions with column pivoting, if fast = true,  or, the more reliable, SVD-decompositions, if fast = false. \n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances,  respectively, for the nonzero  coefficients of N(λ) and D(λ).  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of N(λ), and ϵ is the  machine epsilon of the element type of coefficients of N(λ). \n\n[1] G. Verghese, B. Levy, and T. Kailath, Generalized state-space systems, IEEE Trans. Automat. Control, 26:811-831 (1981).\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n[3] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n[4] P. Van Dooreen, The generalized eigenstructure problem in linear system theory,  IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.\n\n[5] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"rmapps.html#MatrixPencils.rmzeros1","page":"Some applications to rational matrices","title":"MatrixPencils.rmzeros1","text":"rmzeros1(N, D; fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, iz, KRInfo)\n\nReturn the finite and infinite zeros of the rational matrix R(λ) := N(λ)./D(λ) in val,  the multiplicities of infinite zeros in iz and the information on the Kronecker-structure of  the rational matrix R(λ) in the KRInfo object. \n\nThe information on the Kronecker-structure of the rational matrix R(λ) consists of  the right Kronecker indices rki, left Kronecker indices lki, the number of finite zeros nf  and the normal rank nrank and can be obtained from KRInfo as  KRInfo.rki, KRInfo.lki, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  KRInfo. Additionally, KRInfo.id contains the  infinite elementary divisors of the underlying pencil based linearization.\n\nThe Kronecker-structure information of the rational matrix R(λ) is obtained from the  Kronecker-structure information of the underlying pencil based linearization using the results of [1] and [2].  The determination of the Kronecker-structure information is performed by building a strongly minimal  pencil based linearization (A-λE,B-λF,C-λG,D-λH) with A-λE a regular pencil of order n,  satisfying R(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH and reducing the structured system matrix pencil  S(λ) = [A-λE B-λF; C-λG D-λH] to an appropriate Kronecker-like form (KLF) which exhibits  the number of its finite eigenvalues (also the finite zeros of R(λ)), the multiplicities of the  infinite eigenvalues (in excess with one to the multiplicities of infinite zeros of R(λ)),  the left and right Kronecker indices (also of R(λ)) and the normal rank  (in excess with n to the normal rank of R(λ)).\n\nThe numerator N(λ) is a polynomial matrix of the form N(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1),    for which the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix N,  where N[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nThe denominator D(λ) is a polynomial matrix of the form D(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1),   for which the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix D,  where D[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, N(λ) and D(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe strongly minimal pencil based linearization is built using the methods described in [3] in conjunction with pencil manipulation algorithms of [4] to compute reduced order linearizations. These algorithms  employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe reduction to the appropriate KLF of S(λ) is performed using orthogonal similarity transformations [5] and involves rank decisions based on rank revealing QR-decompositions with column pivoting, if fast = true,  or, the more reliable, SVD-decompositions, if fast = false. \n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances,  respectively, for the nonzero  coefficients of N(λ) and D(λ).  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of N(λ), and ϵ is the  machine epsilon of the element type of coefficients of N(λ). \n\n[1] G. Verghese, B. Levy, and T. Kailath, Generalized state-space systems, IEEE Trans. Automat. Control, 26:811-831 (1981).\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n[3] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n[4] F.M. Dopico, M.C. Quintana and P. Van Dooren, Linear system matrices of rational transfer functions, to appear in \"Realization and Model Reduction of Dynamical Systems\",  A Festschrift to honor the 70th birthday of Thanos Antoulas\", Springer-Verlag. arXiv:1903.05016\n\n[5] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"rmapps.html#MatrixPencils.rmpoles","page":"Some applications to rational matrices","title":"MatrixPencils.rmpoles","text":"rmpoles(N, D; fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, ip, id)\n\nReturn the finite and infinite poles of the rational matrix R(λ) := N(λ)./D(λ)  in val,  the multiplicities of infinite poles in ip and the infinite elementary divisors of the pole pencil  of the underlying irreducible descriptor system based linearization of R(λ) in id.\n\nThe information on the finite and infinite poles of the rational matrix R(λ) is obtained from the  Kronecker-structure information of the underlying linearization using the results of [1] and [2].  The determination of the Kronecker-structure information is performed by building an irreducible  descriptor system realization (A-λE,B,C,D) with A-λE a regular pencil of order n,  satisfying R(λ) = C*inv(λE-A)*B+D and reducing the regular pencil A-λE  to an appropriate Kronecker-like form (KLF) which exhibits  the its finite eigenvalues (also the finite poles of R(λ)) and the multiplicities of the  infinite eigenvalues (in excess with one to the multiplicities of infinite poles of R(λ)). The multiplicities of the infinite zeros of A-λE and of infinite poles of R(λ) are the same [2]  and are returned in ip. The number of infinite poles in val is equal to the sum of multiplicites in ip.  The multiplicities of the infinite eigenvalues of A-λE are returned in id.\n\nThe numerator N(λ) is a polynomial matrix of the form N(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1),    for which the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix N,  where N[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nThe denominator D(λ) is a polynomial matrix of the form D(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1),   for which the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix D,  where D[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, N(λ) and D(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe irreducible descriptor system based linearization is built using the methods described in [3] in conjunction with pencil manipulation algorithms of [4] and [5] to compute reduced order linearizations. These algorithms  employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe reduction of A-λE to the KLF is performed using orthonal similarity transformations and involves rank decisions  based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of N(λ) and D(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of N(λ), and ϵ is the  machine epsilon of the element type of coefficients of N(λ). \n\n[1] G. Verghese, B. Levy, and T. Kailath, Generalized state-space systems, IEEE Trans. Automat. Control, 26:811-831 (1981).\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n[3] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n[4] P. Van Dooreen, The generalized eigenstructure problem in linear system theory,  IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.\n\n[5] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"rmapps.html#MatrixPencils.rmpoles1","page":"Some applications to rational matrices","title":"MatrixPencils.rmpoles1","text":"rmpoles1(N, D;  fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, ip, id)\n\nReturn the finite and infinite poles of the rational matrix R(λ) := N(λ)./D(λ)  in val,  the multiplicities of infinite poles in ip and the infinite elementary divisors of the pole pencil  of the underlying strongly irreducible pencil based linearization of  R(λ) in id.\n\nThe information on the finite and infinite poles of the rational matrix R(λ) is obtained from the  pole-structure information of the underlying pencil based linearization using the results of [1] and [2].  The determination of the pole-structure information is performed by building a strongly minimal  pencil based linearization (A-λE,B-λF,C-λG,D-λH) with A-λE a regular pencil of order n,  satisfying R(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH and reducing the structured system matrix pencil  Sp(λ) = [A-λE -λF; -λG -λH] to an appropriate Kronecker-like form (KLF) which exhibits  the number of its finite eigenvalues (also the finite poles of R(λ)) and the multiplicities of the  infinite eigenvalues (in excess with one to the multiplicities of infinite poles of R(λ)). The multiplicities of the infinite zeros of Sp(λ) and of infinite poles of R(λ) are the same [2]  and are returned in ip. The number of infinite poles in val is equal to the sum of multiplicites in ip.  The multiplicities of the infinite eigenvalues of Sp(λ) are returned in id.\n\nThe numerator N(λ) is a polynomial matrix of the form N(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1),    for which the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix N,  where N[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nThe denominator D(λ) is a polynomial matrix of the form D(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1),   for which the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix D,  where D[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, N(λ) and D(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe strongly minimal pencil based linearization is built using the methods described in [3] in conjunction with pencil manipulation algorithms of [4] to compute reduced order linearizations. These algorithms  employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe reduction of Sp(λ) to the KLF is performed using orthonal similarity transformations [5] and involves rank decisions  based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances,  respectively, for the nonzero  coefficients of N(λ) and D(λ).  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of N(λ), and ϵ is the  machine epsilon of the element type of coefficients of N(λ). \n\n[1] G. Verghese, B. Levy, and T. Kailath, Generalized state-space systems, IEEE Trans. Automat. Control, 26:811-831 (1981).\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n[3] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n[4] F.M. Dopico, M.C. Quintana and P. Van Dooren, Linear system matrices of rational transfer functions, to appear in \"Realization and Model Reduction of Dynamical Systems\",  A Festschrift to honor the 70th birthday of Thanos Antoulas\", Springer-Verlag. arXiv:1903.05016\n\n[5] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"rmapps.html#MatrixPencils.rmrank","page":"Some applications to rational matrices","title":"MatrixPencils.rmrank","text":"   rmrank(N, D; fastrank = true, atol = 0, rtol = atol > 0 ? 0 : n*ϵ)\n\nDetermine the normal rank of the rational matrix R(λ) := N(λ)./D(λ).\n\nIf fastrank = true, the rank is evaluated by counting how many singular values of R(γ) have magnitude greater  than max(atol, rtol*σ₁), where σ₁ is the largest singular value of R(γ) and γ is a randomly generated  complex value of magnitude equal to one.  If fastrank = false, first a structured linearization of R(λ) is built in the form of a descriptor system matrix  S(λ) = [A-λE B; C D] with A-λE an order n regular subpencil, and then its normal rank nr is determined.  The normal rank of R(λ) is nr - n.   \n\nThe numerator N(λ) is a polynomial matrix of the form N(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1),    for which the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix N,  where N[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nThe denominator D(λ) is a polynomial matrix of the form D(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1),   for which the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix D,  where D[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, N(λ) and D(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe irreducible descriptor system based linearization is built using the methods described in [1] in conjunction with pencil manipulation algorithms of [2] and [3] to compute reduced order linearizations. These algorithms  employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe reduction to the appropriate KLF of S(λ) is performed using orthogonal similarity transformations [3] and involves rank decisions based on rank revealing SVD-decompositions. \n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of N(λ) and D(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of N(λ), and ϵ is the  machine epsilon of the element type of coefficients of N(λ). \n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n[2] P. Van Dooreen, The generalized eigenstructure problem in linear system theory,  IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.\n\n[3] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#Manipulation-of-rational-matrices","page":"Manipulation of rational matrices","title":"Manipulation of rational matrices","text":"","category":"section"},{"location":"rmtools.html","page":"Manipulation of rational matrices","title":"Manipulation of rational matrices","text":"Function Description\nrm2lspm Representation of a rational matrix as a linearization of its strictly proper part plus its polynomial part\nrmeval Evaluation of a rational matrix for a given value of its argument.\nrm2ls Building a descriptor system based structured linearization [A-λE B; C D] of a rational matrix\nls2rm Computation of the rational matrix from its descriptor system based structured linearization\nrm2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a rational matrix\nlps2rm Computation of the rational matrix from its pencil based structured linearization\nlpmfd2ls Building a descriptor system based structured linearization [A-λE B; C D] of a left polynomial matrix fractional description\nrpmfd2ls Building a descriptor system based structured linearization [A-λE B; C D] of a right polynomial matrix fractional description\nlpmfd2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a left polynomial matrix fractional description\nrpmfd2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a right polynomial matrix fractional description\npminv2ls Building a descriptor system based structured linearization [A-λE B; C D] of the inverse of a polynomial matrix\npminv2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of the inverse of a polynomial matrix","category":"page"},{"location":"rmtools.html#MatrixPencils.rm2lspm","page":"Manipulation of rational matrices","title":"MatrixPencils.rm2lspm","text":"rm2lspm(NUM, DEN; contr = false, obs = false, atol = 0, rtol) -> (A, B, C, D, blkdims)\n\nConstruct a representation of the rational matrix R(λ) := NUM(λ)./DEN(λ) as the sum of its strictly proper part,   realized as a structured linearization \n\n          | A-λI | B | \n          |------|---|\n          |  C   | 0 |\n\nand its polynomial part D(λ). The resulting representation satisfies \n\n R(λ) = C*inv(λI-A)*B + D(λ).\n\nThe linearization (A-λI,B,C,0) of the strictly proper part is in general non-minimal.  A controllable realization is constructed if contr = true, while an observable realization results if obs = true.  The matrix A results block diagonal and the vector blkdims contains the sizes of the diagonal blocks of A, such that the size of the i-th diagonal block is provided in blkdims[i]. See [1] for details. \n\nNUM(λ) is a polynomial matrix of the form NUM(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1), for which   the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix NUM,  where NUM[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nDEN(λ) is a polynomial matrix of the form DEN(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1), for which  the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix DEN,  where DEN[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, NUM(λ) and DEN(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe polynomial part D(λ) is contained in D, which is a 2-dimensional array if D(λ) has degree 0 or a 3-dimensional array if D(λ) has degree  greater than 0. In the latter case D[:,:,i] contains the i-th  coefficient matrix multiplying λ**(i-1). \n\nThe keyword arguments atol and rtol, specify the absolute and relative tolerances for the  nonzero coefficients of DEN(λ), respectively.  \n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.rmeval","page":"Manipulation of rational matrices","title":"MatrixPencils.rmeval","text":"rmeval(NUM,DEN,val) -> Rval\n\nEvaluate the rational matrix R(λ) := NUM(λ)./DEN(λ) for λ = val. \n\nNUM(λ) is a polynomial matrix of the form NUM(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1), for which   the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix N,  where N[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nDEN(λ) is a polynomial matrix of the form DEN(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1), for which  the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix D,  where D[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, NUM(λ) and DEN(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.rm2ls","page":"Manipulation of rational matrices","title":"MatrixPencils.rm2ls","text":"  rm2ls(NUM, DEN; contr = false, obs = false, noseig = false, minimal = false,\n        fast = true, atol = 0, rtol) -> (A, E, B, C, D, blkdims)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n           | A-λE | B | \n    S(λ) = |------|---|\n           |  C   | D |\n\nfor the rational matrix R(λ) = NUM(λ) ./ DEN(λ), such that S(λ) preserves a part of the Kronecker structure of R(λ).  The regular pencil A-λE has the block diagonal form\n\n         | Af-λI |   0   | \n  A-λE = |-------|-------|\n         |  0    | I-λEi |\n\nand the dimensions of the diagonal blocks Af and Ei are provided in blkdims[1] and blkdims[2], respectively.\n\nNUM(λ) is a polynomial matrix of the form NUM(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1), for which   the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix NUM,  where NUM[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nDEN(λ) is a polynomial matrix of the form DEN(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1), for which  the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix DEN,  where DEN[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, NUM(λ) and DEN(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nIf n is the order of A-λE, then the computed linearization satisfies:\n\n(1) A-λE is regular and R(λ) = C*inv(λE-A)*B+D;\n\n(2) rank[B A-λE] = n (controllability) if minimal = true or contr = true, in which case  the right Kronecker structure is preserved;\n\n(3) rank[A-λE; C] = n (observability)  if minimal = true or obs = true, in which case  the left Kronecker structure is preserved;\n\n(4) A-λE has no non-dynamic modes if minimal = true or noseig = true. \n\nIf conditions (1)-(4) are satisfied, the linearization is called minimal and the resulting order n is the least achievable order. If conditions (1)-(3) are satisfied, the linearization is called irreducible  and the resulting order n is the least achievable order using orthogonal similarity transformations. For an irreducible linearization S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of R(λ). \n\nThe descriptor system based linearization is built using the methods described in [1] in conjunction with pencil manipulation algorithms [2] and [3] to compute reduced order linearizations. These algorithms  employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe keyword arguments atol and rtol, specify the absolute and relative tolerances, respectively, for the  nonzero coefficients of NUM(λ) and DEN(λ).\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n[2] P. Van Dooreen, The generalized eigenstructure problem in linear system theory,  IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.\n\n[3] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.ls2rm","page":"Manipulation of rational matrices","title":"MatrixPencils.ls2rm","text":"ls2rm(A, E, B, C, D; fast = true, atol1 = 0, atol2 = 0, gaintol = 0, rtol = min(atol1,atol2) > 0 ? 0 : n*ϵ, val) -> (NUM, DEN)\n\nBuild the rational matrix R(λ) = C*inv(λE-A)*B+D := NUM(λ) ./ DEN(λ) corresponding to its structured linearization \n\n        | A-λE | B | \n S(λ) = |------|---|\n        |  C   | D |\n\nby explicitly determining for each rational entry of R(λ), its numerator coefficients from its finite zeros and gain, and  its denominator coefficients from its finite poles (see [1]). \n\nThe keyword arguments atol1 and atol2 specify the absolute tolerances for the elements of A, B, C, D, and,   respectively, of E, and rtol specifies the relative tolerances for the nonzero elements of A, B, C, D and E. The default relative tolerance is (n+1)*ϵ, where n is the dimension of A, and ϵ is the  machine epsilon of the element type of coefficients of A. \n\nThe keyword argument gaintol specifies the threshold for the magnitude of the nonzero elements of the gain matrix  C*inv(γE-A)*B+D, where γ = val if val is a number or γ is a randomly chosen complex value of unit magnitude,  if val = missing. Generally, val should not be a zero of any of entries of R.\n\nNUM(λ) is a polynomial matrix of the form NUM(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1), for which   the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix NUM,  where NUM[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nDEN(λ) is a polynomial matrix of the form DEN(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1), for which  the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix DEN,  where DEN[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\n[1] A. Varga Computation of transfer function matrices of generalized state-space models.      Int. J. Control, 50:2543–2561, 1989.\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.rm2lps","page":"Manipulation of rational matrices","title":"MatrixPencils.rm2lps","text":" rm2lps(NUM, DEN; contr = false, obs = false) -> (A, E, B, F, C, G, D, H, blkdims)\n\nBuild a structured pencil based linearization as a system matrix S(λ) of the form\n\n        | A-λE | B-λF | \n S(λ) = |------|------|\n        | C-λG | D-λH |\n\nfor the rational matrix R(λ) = NUM(λ) ./ DEN(λ) such that S(λ) preserves a part of the Kronecker structure of R(λ).  The regular pencil A-λE has the block diagonal form\n\n         | Af-λI |   0    | \n  A-λE = |-------|--------|\n         |  0    | Ai-λEi |\n\nand the dimensions of the diagonal blocks Af and Ai are provided in blkdims[1] and blkdims[2], respectively.\n\nNUM(λ) is a polynomial matrix of the form NUM(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1), for which   the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix NUM,  where NUM[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nDEN(λ) is a polynomial matrix of the form DEN(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1), for which  the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix DEN,  where DEN[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, NUM(λ) and DEN(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package.  In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nIf n is the order of the matrix A, then the computed linearization satisfies:\n\n(1) A-λE is a n x n regular pencil;\n\n(2) R(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH;\n\n(3) rank[B-λF A-λE] = n for any finite and infinite λ (strong controllability) if contr = true, in which case  the right Kronecker structure is preserved;\n\n(4) rank[A-λE; C-λG] = n for any finite and infinite λ (strong observability)  if obs = true, in which case  the left Kronecker structure is preserved. \n\nIf conditions (1)-(4) are satisfied, the linearization is called strongly minimal, the resulting order n is the least achievable order and S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of R(λ). \n\nThe pencil based linearization is built using the methods described in [1] in conjunction with pencil manipulation algorithms [2] and [3] to compute reduced order linearizations. These algorithms  employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe keyword arguments atol and rtol, specify the absolute and relative tolerances for the  nonzero coefficients of NUM(λ) and DEN(λ), respectively.\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n[2] P. Van Dooreen, The generalized eigenstructure problem in linear system theory,  IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.\n\n[3] F.M. Dopico, M.C. Quintana and P. Van Dooren, Linear system matrices of rational transfer functions,  in \"Realization and Model Reduction of Dynamical Systems, A Festschrift to honor the 70th birthday of Thanos Antoulas\",  Eds. C. Beattie, P. Benner, M. Embree, S. Gugercin and S. Lefteriu, Springer-Verlag, 2020.  arXiv:1903.05016\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.lps2rm","page":"Manipulation of rational matrices","title":"MatrixPencils.lps2rm","text":"lps2rm(A, E, B, F, C, G, D, H; fast = true, atol1 = 0, atol2 = 0, gaintol = 0, rtol = min(atol1,atol2) > 0 ? 0 : n*ϵ, val) -> (NUM, DEN)\n\nBuild the rational matrix R(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH := NUM(λ) ./ DEN(λ) corresponding to its structured linearization \n\n        | A-λE | B-λF | \n S(λ) = |------|------|\n        | C-λG | D-λH |\n\nby explicitly determining for each rational entry of R(λ), its numerator coefficients from its finite zeros and gain, and  its denominator coefficients from its finite poles. An extension of the approach of [1] is employed, relying on the procedures of [2] to compute strongly irreducible linearizations.\n\nThe keyword arguments atol1 and atol2 specify the absolute tolerances for the elements of A, B, C, D, and of   E, F, G, H, respectively,  and rtol specifies the relative tolerances for the nonzero elements of  A, B, C, D, E, F,G,H.  The default relative tolerance is(n+2)*ϵ, wherenis the size of the size dimension ofA, andϵis the  machine epsilon of the element type of coefficients ofA`. \n\nThe keyword argument gaintol specifies the threshold for the magnitude of the nonzero elements of the gain matrix  C*inv(γE-A)*B+D, where γ = val if val is a number or γ is a randomly chosen complex value of unit magnitude,  if val = missing. Generally, val should not be a root of any of entries of P. \n\n[1] A. Varga Computation of transfer function matrices of generalized state-space models.      Int. J. Control, 50:2543–2561, 1989.\n\n[2] F.M. Dopico, M.C. Quintana and P. Van Dooren, Linear system matrices of rational transfer functions,  in \"Realization and Model Reduction of Dynamical Systems, A Festschrift to honor the 70th birthday of Thanos Antoulas\",  Eds. C. Beattie, P. Benner, M. Embree, S. Gugercin and S. Lefteriu, Springer-Verlag, 2020.  arXiv:1903.05016\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.lpmfd2ls","page":"Manipulation of rational matrices","title":"MatrixPencils.lpmfd2ls","text":" lpmfd2ls(DEN, NUM; fast = true, contr = false, obs = false, minimal = false, atol = 0, rtol) -> (A, E, B, C, D)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n        | A-λE | B | \n S(λ) = |------|---|\n        |  C   | D |\n\nof the left polynomial matrix fractional description R(λ) = inv(DEN(λ))*NUM(λ),  such that R(λ) = C*inv(λE-A)*B+D. The resulting linearization S(λ) preserves a part,  if minimal = false, or the complete Kronecker structure, if minimal = true, of R(λ).  In the latter case, the order n of A-λE is the least possible one.\n\nDEN(λ) and NUM(λ) can be specified as polynomial matrices of the form X(λ) = X_1 + λ X_2 + ... + λ**k X_(k+1),  for X = DEN or X = NUM, for which the coefficient matrices X_i, i = 1, ..., k+1, are stored in  the 3-dimensional matrices X, where X[:,:,i] contains the i-th coefficient matrix X_i (multiplying λ**(i-1)). \n\nDEN(λ) and NUM(λ) can also be specified as matrices, vectors or scalars of elements of the Polynomial type  provided by the Polynomials package.    In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe computed structured linearization satisfies:\n\n(1) A-λE is regular;\n\n(2) rank[B A-λE] = n (controllability) if minimal = true or contr = true, in which case  the right Kronecker structure is preserved;\n\n(3) rank[A-λE; C] = n (observability)  if minimal = true or obs = true, in which case  the left Kronecker structure is preserved;\n\n(4) S(λ) has no simple infinite eigenvalues if minimal = true. \n\nIf conditions (1)-(4) are satisfied, the linearization is called minimal and the resulting order n is the least achievable order. If conditions (1)-(3) are satisfied, the linearization is called irreducible  and the resulting order n is the least achievable order using orthogonal similarity transformations. For an irreducible linearization S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of R(λ). \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of the matrices DEN(λ) and NUM(λ). The default relative tolerance is nt*ϵ,  where nt is the size of the square matrix DEN(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\nThe structured linearization is built using the methods described in [1].\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.rpmfd2ls","page":"Manipulation of rational matrices","title":"MatrixPencils.rpmfd2ls","text":" rpmfd2ls(DEN, NUM; fast = true, contr = false, obs = false, minimal = false, atol = 0, rtol) -> (A, E, B, C, D)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n        | A-λE | B | \n S(λ) = |------|---|\n        |  C   | D |\n\nof the right polynomial matrix fractional description R(λ) = NUM(λ)*inv(DEN(λ)),  such that R(λ) = C*inv(λE-A)*B+D. The resulting linearization S(λ) preserves a part,  if minimal = false, or the complete Kronecker structure, if minimal = true, of R(λ).  In the latter case, the order n of A-λE is the least possible one.\n\nDEN(λ) and NUM(λ) can be specified as polynomial matrices of the form X(λ) = X_1 + λ X_2 + ... + λ**k X_(k+1),  for X = DEN or X = NUM, for which the coefficient matrices X_i, i = 1, ..., k+1, are stored in  the 3-dimensional matrices X, where X[:,:,i] contains the i-th coefficient matrix X_i (multiplying λ**(i-1)). \n\nDEN(λ) and NUM(λ) can also be specified as matrices, vectors or scalars of elements of the Polynomial type  provided by the Polynomials package.    In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe computed structured linearization satisfies:\n\n(1) A-λE is regular;\n\n(2) rank[B A-λE] = n (controllability) if minimal = true or contr = true, in which case  the right Kronecker structure is preserved;\n\n(3) rank[A-λE; C] = n (observability)  if minimal = true or obs = true, in which case  the left Kronecker structure is preserved;\n\n(4) S(λ) has no simple infinite eigenvalues if minimal = true. \n\nIf conditions (1)-(4) are satisfied, the linearization is called minimal and the resulting order n is the least achievable order. If conditions (1)-(3) are satisfied, the linearization is called irreducible  and the resulting order n is the least achievable order using orthogonal similarity transformations. For an irreducible linearization S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of R(λ). \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of the matrices DEN(λ) and NUM(λ). The default relative tolerance is nt*ϵ,  where nt is the size of the square matrix DEN(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\nThe structured linearization is built using the methods described in [1].\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.lpmfd2lps","page":"Manipulation of rational matrices","title":"MatrixPencils.lpmfd2lps","text":" lpmfd2lps(DEN, NUM; fast = true, contr = false, obs = false, minimal = false, atol = 0, rtol) -> (A, E, B, F, C, G, D, H)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n        | A-λE | B-λF | \n S(λ) = |------|------|\n        | C-λG | D-λH |\n\nof the left polynomial matrix fractional description R(λ) = inv(DEN(λ))*NUM(λ),  such that R(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH. The resulting linearization S(λ) preserves a part,  if minimal = false, or the complete Kronecker structure, if minimal = true, of R(λ).  In the latter case, the order n of A-λE is the least possible one.\n\nDEN(λ) and NUM(λ) can be specified as polynomial matrices of the form X(λ) = X_1 + λ X_2 + ... + λ**k X_(k+1),  for X = DEN or X = NUM, for which the coefficient matrices X_i, i = 1, ..., k+1, are stored in  the 3-dimensional matrices X, where X[:,:,i] contains the i-th coefficient matrix X_i (multiplying λ**(i-1)). \n\nDEN(λ) and NUM(λ) can also be specified as matrices, vectors or scalars of elements of the Polynomial type  provided by the Polynomials package.    In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe computed structured linearization satisfies:\n\n(1) A-λE is regular;\n\n(2) rank[B-λF A-λE] = n (strong controllability) if minimal = true or contr = true, in which case  the right Kronecker structure is preserved;\n\n(3) rank[A-λE; C-λG] = n (strong observability)  if minimal = true or obs = true, in which case  the left Kronecker structure is preserved.\n\nIf conditions (1)-(3) are satisfied, the linearization is called strongly minimal, the resulting order n is the least achievable order and S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of R(λ). \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of the matrices DEN(λ) and NUM(λ). The default relative tolerance is nt*ϵ,  where nt is the size of the square matrix DEN(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\nThe structured linearization is built using the methods described in [1].\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.rpmfd2lps","page":"Manipulation of rational matrices","title":"MatrixPencils.rpmfd2lps","text":" rpmfd2lps(DEN, NUM; fast = true, contr = false, obs = false, minimal = false, atol = 0, rtol) -> (A, E, B, F, C, G, D, H)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n        | A-λE | B-λF | \n S(λ) = |------|------|\n        | C-λG | D-λH |\n\nof the right polynomial matrix fractional description R(λ) = NUM(λ)*inv(DEN(λ)),  such that R(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH. The resulting linearization S(λ) preserves a part,  if minimal = false, or the complete Kronecker structure, if minimal = true, of R(λ).  In the latter case, the order n of A-λE is the least possible one.\n\nDEN(λ) and NUM(λ) can be specified as polynomial matrices of the form X(λ) = X_1 + λ X_2 + ... + λ**k X_(k+1),  for X = DEN or X = NUM, for which the coefficient matrices X_i, i = 1, ..., k+1, are stored in  the 3-dimensional matrices X, where X[:,:,i] contains the i-th coefficient matrix X_i (multiplying λ**(i-1)). \n\nDEN(λ) and NUM(λ) can also be specified as matrices, vectors or scalars of elements of the Polynomial type  provided by the Polynomials package.    In this case, no check is performed that N(λ) and D(λ) have the same indeterminates.\n\nThe computed structured linearization satisfies:\n\n(1) A-λE is regular;\n\n(2) rank[B-λF A-λE] = n (strong controllability) if minimal = true or contr = true, in which case  the right Kronecker structure is preserved;\n\n(3) rank[A-λE; C-λG] = n (strong observability)  if minimal = true or obs = true, in which case  the left Kronecker structure is preserved.\n\nIf conditions (1)-(3) are satisfied, the linearization is called strongly minimal, the resulting order n is the least achievable order and S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of R(λ). \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of the matrices DEN(λ) and NUM(λ). The default relative tolerance is nt*ϵ,  where nt is the size of the square matrix DEN(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\nThe structured linearization is built using the methods described in [1].\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.pminv2ls","page":"Manipulation of rational matrices","title":"MatrixPencils.pminv2ls","text":" pminv2ls(P; fast = true, contr = false, obs = false, minimal = false, atol = 0, rtol) -> (A, E, B, C, D)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n        | A-λE | B | \n S(λ) = |------|---|\n        |  C   | D |\n\nof the inverse R(λ) = inv(P(λ)), such that R(λ) = C*inv(λE-A)*B+D.  The resulting linearization S(λ) preserves a part, if minimal = false, or  the complete Kronecker structure, if minimal = true, of R(λ).  In the latter case, the order n of A-λE is the least possible one.\n\nP(λ) can be specified as a polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in  the 3-dimensional matrix P, where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe computed structured linearization satisfies:\n\n(1) A-λE is regular;\n\n(2) rank[B A-λE] = n (controllability) if minimal = true or contr = true, in which case  the right Kronecker structure is preserved;\n\n(3) rank[A-λE; C] = n (observability)  if minimal = true or obs = true, in which case  the left Kronecker structure is preserved;\n\n(4) S(λ) has no simple infinite eigenvalues if minimal = true. \n\nIf conditions (1)-(4) are satisfied, the linearization is called minimal and the resulting order n is the least achievable order. If conditions (1)-(3) are satisfied, the linearization is called irreducible  and the resulting order n is the least achievable order using orthogonal similarity transformations. For an irreducible linearization S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of R(λ). \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of the matrix P(λ). The default relative tolerance is nt*ϵ,  where nt is the size of the square matrix P(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\nThe structured linearization is built using the methods described in [1].\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"rmtools.html#MatrixPencils.pminv2lps","page":"Manipulation of rational matrices","title":"MatrixPencils.pminv2lps","text":" pminv2lps(P; fast = true, contr = false, obs = false, minimal = false, atol = 0, rtol) -> (A, E, B, F, C, G, D, H)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n        | A-λE | B-λF | \n S(λ) = |------|------|\n        | C-λG | D-λH |\n\nof the inverse R(λ) = inv(P(λ)), such that R(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH.  The resulting linearization S(λ) preserves a part, if minimal = false, or  the complete Kronecker structure, if minimal = true, of R(λ).  In the latter case, the order n of A-λE is the least possible one.\n\nP(λ) can be specified as a polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in  the 3-dimensional matrix P, where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe computed structured linearization satisfies:\n\n(1) A-λE is regular;\n\n(2) rank[B-λF A-λE] = n (strong controllability) if minimal = true or contr = true, in which case  the right Kronecker structure is preserved;\n\n(3) rank[A-λE; C-λG] = n (strong observability)  if minimal = true or obs = true, in which case  the left Kronecker structure is preserved.\n\nIf conditions (1)-(3) are satisfied, the linearization is called strongly minimal, the resulting order n is the least achievable order and S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of R(λ). \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of the matrix P(λ). The default relative tolerance is nt*ϵ,  where nt is the size of the square matrix P(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\nThe structured linearization is built using the methods described in [1].\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"sklfapps.html#Some-applications-of-structured-matrix-pencil-computations","page":"Some applications of structured matrix pencil computations","title":"Some applications of structured matrix pencil computations","text":"","category":"section"},{"location":"sklfapps.html","page":"Some applications of structured matrix pencil computations","title":"Some applications of structured matrix pencil computations","text":"Function Description\nspkstruct Determination of the complete Kronecker structure\nsprank Determination of the normal rank\nspeigvals Computation of the finite and infinite eigenvalues\nspzeros Computation of the finite and infinite zeros","category":"page"},{"location":"sklfapps.html#MatrixPencils.spkstruct","page":"Some applications of structured matrix pencil computations","title":"MatrixPencils.spkstruct","text":"spkstruct(A, E, B, C, D; fast = false, atol1::Real = 0, atol2::Real = 0, rtol::Real=min(atol1,atol2)>0 ? 0 : n*ϵ) -> KRInfo\n\nDetermine the Kronecker-structure information of the structured matrix pencil M-λN \n\n          | A-λE | B | \n M - λN = |------|---|\n          |  C   | D |\n\nand return an KRInfo object. \n\nThe information on the  Kronecker-structure consists of the right Kronecker indices rki, left Kronecker indices lki,  infinite elementary divisors id, the number of finite eigenvalues nf, the normal rank nrank, and can be obtained  from KRInfo as KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  pkstruct. \n\nThe right Kronecker indices are provided in the integer vector rki, where each i-th element rki[i] is  the row dimension k of an elementary Kronecker block of size k x (k+1).  The number of elements of rki is the dimension of  the right nullspace of the pencil M-λN and their sum is the least degree of a right polynomial nullspace basis. \n\nThe left Kronecker indices are provided in the integer vector lki, where each i-th element lki[i] is  the column dimension k of an elementary Kronecker block of size (k+1) x k.  The number of elements of lki is the dimension of  the left nullspace of the pencil M-λN and their sum is the least degree of a left polynomial nullspace basis. \n\nThe multiplicities of infinite eigenvalues are provided in the integer vector id, where each i-th element id[i] is the order of an infinite elementary divisor (i.e., the multiplicity of an infinite eigenvalue). \n\nThe determination of the Kronecker-structure information is performed by reducing the pencil M-λN to an  appropriate Kronecker-like form (KLF) which exhibits the number of finite eigenvalues,  the multiplicities of the infinite eigenvalues, the left and right Kronecker indices and the normal rank. The reduction is performed using orthonal similarity transformations and involves rank decisions based  on rank revealing QR-decompositions with column pivoting, if fast = true, or, the more reliable,  SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations. \n\nThe keyword arguements atol1, atol2  and rtol specify the absolute tolerance for the nonzero elements of M, the absolute tolerance for the nonzero elements of N, and the relative tolerance for the nonzero elements of M and N, respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of M, and ϵ is the  machine epsilon of the element type of M. \n\n\n\n\n\n","category":"function"},{"location":"sklfapps.html#MatrixPencils.sprank","page":"Some applications of structured matrix pencil computations","title":"MatrixPencils.sprank","text":"sprank(A, E, B, C, D; fastrank = true, atol1 = 0, atol2 = 0, rtol = min(atol1,atol2)>0 ? 0 : n*ϵ)\n\nCompute the normal rank of the structured matrix pencil M - λN\n\n          | A-λE | B | \n M - λN = |------|---|.\n          |  C   | D |\n\nIf fastrank = true, the rank is evaluated by counting how many singular values of M - γ N have magnitude greater than max(max(atol1,atol2), rtol*σ₁), where σ₁ is the largest singular value of M - γ N and γ is a randomly generated value. If fastrank = false,  the rank is evaluated as nr + ni + nf + nl, where nr and nl are the sums of right and left Kronecker indices,  respectively, while ni and nf are the number of infinite and finite eigenvalues, respectively. The sums nr+ni and   nf+nl, are determined from an appropriate Kronecker-like form (KLF) exhibiting the spliting of the right and left structures  of the pencil M - λN.\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N. The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of M, and ϵ is the  machine epsilon of the element type of M.  For efficiency purpose, the reduction to the relevant KLF is only partially performed  using rank decisions based on rank revealing SVD-decompositions. \n\n\n\n\n\n","category":"function"},{"location":"sklfapps.html#MatrixPencils.speigvals","page":"Some applications of structured matrix pencil computations","title":"MatrixPencils.speigvals","text":"speigvals(A, E, B, C, D; fast = false, atol1::Real = 0, atol2::Real = 0, rtol::Real=min(atol1,atol2)>0 ? 0 : n*ϵ) -> (val, iz, KRInfo)\n\nReturn the (finite and infinite) eigenvalues of the structured matrix pencil M-λN  \n\n          | A-λE | B | \n M - λN = |------|---|\n          |  C   | D |\n\nin val and information on the  Kronecker-structure in the KRInfo object. \n\nThe information on the  Kronecker-structure consists of the right Kronecker indices rki, left Kronecker indices lki,  infinite elementary divisors id, the number of finite eigenvalues nf, the normal rank nrank, and can be obtained  from KRInfo as KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  pkstruct. \n\nThe computation of the eigenvalues is performed by reducing the pencil M-λN to an appropriate Kronecker-like form (KLF)  which exhibits the splitting of the infinite and finite eigenvalue,  the multiplicities of the infinite eigenvalues, the left and right Kronecker indices and the normal rank. The reduction is performed using orthonal similarity transformations and involves rank decisions based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations. \n\nThe keyword arguements atol1, atol2  and rtol specify the absolute tolerance for the nonzero elements of M, the absolute tolerance for the nonzero elements of N, and the relative tolerance for the nonzero elements of M and N, respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of M, and ϵ is the  machine epsilon of the element type of M. \n\n\n\n\n\n","category":"function"},{"location":"sklfapps.html#MatrixPencils.spzeros","page":"Some applications of structured matrix pencil computations","title":"MatrixPencils.spzeros","text":"spzeros(A, E, B, C, D; fast = false, atol1::Real = 0, atol2::Real = 0, rtol::Real=min(atol1,atol2)>0 ? 0 : n*ϵ) -> (val, iz, KRInfo)\n\nReturn the (finite and infinite) Smith zeros of the structured matrix pencil M-λN \n\n          | A-λE | B | \n M - λN = |------|---|\n          |  C   | D |\n\nin val, information on the multiplicities of infinite zeros in iz and   information on the Kronecker-structure in the KRInfo object. \n\nThe information on the multiplicities of infinite zeros is provided in the vector iz,  where each i-th element iz[i] is equal to k-1, where k is the order of an infinite elementary divisor with k > 0. The number of infinite zeros contained in val is the sum of the components of iz. \n\nThe information on the Kronecker-structure consists of the right Kronecker indices rki, left Kronecker indices lki,  infinite elementary divisors id, the number of finite eigenvalues nf, the normal rank nrank, and can be obtained  from KRInfo as KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  pkstruct. \n\nThe computation of the zeros is performed by reducing the pencil M-λN to an appropriate Kronecker-like form (KLF)  which exhibits the splitting of the infinite and finite eigenvalue,  the multiplicities of the infinite eigenvalues, the left and right Kronecker indices and the normal rank. The reduction is performed using orthonal similarity transformations and involves rank decisions based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol1, atol2  and rtol specify the absolute tolerance for the nonzero elements of M, the absolute tolerance for the nonzero elements of N, and the relative tolerance for the nonzero elements of M and N, respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of M, and ϵ is the  machine epsilon of the element type of M. \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#Manipulation-of-general-linear-matrix-pencils","page":"Manipulation of general linear matrix pencils","title":"Manipulation of general linear matrix pencils","text":"","category":"section"},{"location":"klftools.html","page":"Manipulation of general linear matrix pencils","title":"Manipulation of general linear matrix pencils","text":"Function Description\npbalance! Balancing arbitrary matrix pencils.\npbalqual Balancing quality of a matrix pencils.\nklf Computation of the Kronecker-like form exhibiting the full Kronecker structure\nklf_right Computation of the Kronecker-like form exhibiting the right and finite Kronecker structures\nklf_rightinf Computation of the Kronecker-like form exhibiting the right and infinite Kronecker structures\nklf_left Computation of the Kronecker-like form exhibiting the left and finite Kronecker structures\nklf_leftinf Computation of the Kronecker-like form exhibiting the left and infinite Kronecker structures\nklf_rlsplit Computation of the Kronecker-like form exhibiting the separation of right and left Kronecker structures\npreduceBF Reduction to the basic condensed form  [B A-λE; D C] with E upper triangular and nonsingular.\nklf_right! Computation of the Kronecker-like form exhibiting the right and finite Kronecker structures\nklf_right_refine! Update the Kronecker-like form by splitting the right and infinite Kronecker structures\nklf_right_refineut! Refine the Kronecker-like form by enforcing upper triangular shapes of blocks in the leading full row rank subpencil\nklf_right_refineinf! Refine the Kronecker-like form by enforcing upper triangular shapes of blocks in its infinite regular part\nklf_left! Computation of the Kronecker-like form exhibiting the left and finite Kronecker structures\nklf_left_refine! Update the Kronecker-like form by splitting the left and infinite Kronecker structures\nklf_left_refineut! Refine the Kronecker-like form by enforcing upper triangular shapes of blocks in the leading full row rank subpencil\nklf_left_refineinf! Refine the Kronecker-like form by enforcing upper triangular shapes of blocks in its infinite regular part","category":"page"},{"location":"klftools.html#MatrixPencils.pbalance!","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.pbalance!","text":"pbalance!(M, N; r, c, regpar, shift, maxiter, tol, pow2) -> (Dl, Dr)\n\nBalance the m×n matrix pencil M - λN by reducing the 1-norm of the matrix T := abs(M)+abs(N) by row and column balancing.  This involves similarity transformations with diagonal matrices Dl and Dr applied to T to make the rows and columns of Dl*T*Dr as close in norm as possible. The modified Sinkhorn–Knopp algorithm described in [1]  is employed to reduce T to an approximately doubly stochastic matrix.  The targeted row and column sums can be specified using the keyword arguments r = rs and c = cs,  where rs and cs are m- and n-dimensional positive vectors,  representing the desired row and column sums, respectively (Default: rs = ones(m) and cs = ones(n)).\n\nThe resulting Dl and Dr are diagonal scaling matrices.   If the keyword argument pow2 = true is specified, then the components of the resulting  optimal Dl and Dr are replaced by their nearest integer powers of 2.  If pow2 = false, the optimal values Dl and Dr are returned. The resulting Dl*M*Dr and Dl*N*Dr overwrite M and N, respectively\n\nA regularization-based scaling is performed if a nonzero regularization parameter α is specified via the keyword argument regpar = α.   If diagreg = true, then the balancing algorithm is performed on the extended symmetric matrix [ α^2*I  T; T' α^2*I ], while if diagreg = false (default),    the balancing algorithm is performed on the matrix [ (α/m)^2*em*em'  T; T' (α/n)^2*en*en' ],  where em and en are m- and n-dimensional vectors with elements equal to one.   If α = 0 and shift = γ > 0 is specified, then the algorithm is performed on the rank-one perturbation T+γ*em*en. \n\nThe keyword argument tol = τ, with τ ≤ 1,  specifies the tolerance used in the stopping criterion.  The iterative process is stopped as soon as the incremental scalings are tol-close to the identity. \n\nThe keyword argument maxiter = k specifies the maximum number of iterations k  allowed in the balancing algorithm. \n\nMethod: This function employs the regularization approaches proposed in [1], modified  to handle matrices with zero rows or zero columns. The alternative shift based regularization  has been proposed in [2].  \n\n[1] F.M.Dopico, M.C.Quintana and P. van Dooren,      \"Diagonal scalings for the eigenstructure of arbitrary pencils\", SIMAX, 43:1213-1237, 2022. \n\n[2] P.A.Knight, The Sinkhorn–Knopp algorithm: Convergence and applications, SIAM J. Matrix     Anal. Appl., 30 (2008), pp. 261–275.   \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.pbalqual","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.pbalqual","text":"qs = pbalqual(M, N)\n\nCompute the 1-norm based scaling quality of a matrix pencil M-λN.\n\nThe resulting qs is computed as \n\n    qs = qS(abs(M)+abs(N)) ,\n\nwhere qS(⋅) is the scaling quality measure defined in Definition 5.5 of [1] for  nonnegative matrices. This definition has been extended to also cover matrices with zero rows or columns. If N = I, qs = qs(M) is computed. \n\nA large value of qs indicates a possibly poorly scaled matrix pencil.   \n\n[1] F.M.Dopico, M.C.Quintana and P. van Dooren,      \"Diagonal scalings for the eigenstructure of arbitrary pencils\", SIMAX, 43:1213-1237, 2022. \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf","text":"klf(M, N; fast = true, finite_infinite = false, ut = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (F, G, Q, Z, νr, μr, νi, nf, νl, μl)\n\nReduce the matrix pencil M - λN to an equivalent form F - λG = Q'(M - λN)Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices F and G are in the following Kronecker-like form exhibiting the complete Kronecker structure:\n\n               |  Mr-λNr  |     *      |    *    |\n               |----------|------------|---------|\n     F - λG =  |    O     | Mreg-λNreg |    *    |\n               |----------|------------|---------|\n               |    O     |     0      |  Ml-λNl |\n\nThe full row rank pencil Mr-λNr is in a staircase form, contains the right Kronecker indices  of the pencil M-λNand has the form\n\n     Mr-λNr  = | Br | Ar-λEr |,\n\nwhere Er is upper triangular and nonsingular.  The nr-dimensional vectors νr and μr contain the row and, respectively, column dimensions of the blocks of the staircase form  Mr-λNr such that the i-th block has dimensions νr[i] x μr[i] and  has full row rank. The difference μr[i]-νr[i] for i = 1, 2, ..., nr is the number of elementary Kronecker  blocks of size (i-1) x i.  If ut = true, the full row rank diagonal blocks of Mr are reduced to the form [0 X]  with X upper triangular and nonsingular and the full column rank supradiagonal blocks of Nr are reduced to the form [Y; 0] with Y upper triangular and nonsingular. \n\nThe pencil Mreg-λNreg is regular, contains the infinite and finite elementary divisors of M-λN and has the form\n\n                   | Mi-λNi |    *    |\n     Mreg-λNreg  = |--------|---------|, if `finite_infinite = false`, or the form\n                   |   0    |  Mf-λNf |\n\n\n                   | Mf-λNf |    *    |\n     Mreg-λNreg  = |--------|---------|, if `finite_infinite = true`, \n                   |   0    |  Mi-λNi |\n\nwhere: (1) Mi-λNi, in staircase form, contains the infinite elementary divisors of M-λN,  Mi upper triangular if ut = true and nonsingular, and Ni is upper triangular and nilpotent;  (2) Mf-λNf contains the infinite elementary divisors of M-λN and  Nf is upper triangular and nonsingular. The ni-dimensional vector νi contains the dimensions of the square blocks of the staircase form  Mi-λNi  such that the i-th block has dimensions νi[i] x νi[i].  If finite_infinite = true, the difference νi[i]-νi[i+1] for i = 1, 2, ..., ni  is the number of infinite elementary divisors of degree i (with νi[ni] = 0). If finite_infinite = false, the difference νi[ni-i+1]-νi[ni-i] for i = 1, 2, ..., ni  is the number of infinite elementary divisors of degree i (with νi[0] = 0).\n\nThe full column rank pencil Ml-λNl, in a staircase form, contains the left Kronecker indices of M-λN and has the form\n\n               | Al-λEl |\n     Ml-λNl  = |--------|,\n               |   Cl   |\n\nwhere El is upper triangular and nonsingular.  The nl-dimensional vectors νl and μl contain the row and, respectively, column dimensions of the blocks of the staircase form  Ml-λNl such that the j-th block has dimensions νl[j] x μl[j] and has full column rank.  The difference νl[nl-j+1]-μl[nl-j+1] for j = 1, 2, ..., nl is the number of elementary Kronecker blocks of size  j x (j-1). If ut = true, the full column rank diagonal blocks of Ml are reduced to the form [X; 0]  with X upper triangular and nonsingular and the full row rank supradiagonal blocks of Nl are reduced to the form [0 Y] with Y upper triangular and nonsingular. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_right","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_right","text":"klf_right(M, N; fast = true, ut = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (F, G, Q, Z, νr, μr, nf, ν, μ)\n\nReduce the matrix pencil M - λN to an equivalent form F - λG = Q'(M - λN)Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices F and G are in the following Kronecker-like form exhibiting the right and finite Kronecker structures:\n\n               |  Mr-λNr    |     *      |    *     |\n               |------------|------------|----------|\n     F - λG =  |    O       |   Mf-λNf   |    *     |\n               |------------|------------|----------|\n               |    O       |     0      | Mil-λNil |\n\nThe full row rank pencil Mr-λNr, in a staircase form, contains the right Kronecker indices of M-λN and has the form\n\n     Mr-λNr  = | Br | Ar-λEr |,\n\nwhere Er is upper triangular and nonsingular.  The nr-dimensional vectors νr and μr contain the row and, respectively, column dimensions of the blocks of the staircase form  Mr-λNr such that i-th block has dimensions νr[i] x μr[i] and  has full row rank. The difference μr[i]-νr[i] for i = 1, 2, ..., nr is the number of elementary Kronecker blocks of size (i-1) x i. If ut = true, the full row rank diagonal blocks of Mr are reduced to the form [0 X]  with X upper triangular and nonsingular and the full column rank supradiagonal blocks of Nr are reduced to the form [Y; 0] with Y upper triangular and nonsingular. \n\nThe nf x nf pencil Mf-λNf is regular and contains the finite elementary divisors of M-λN.  Nf is upper triangular and nonsingular.\n\nThe full column rank pencil Mil-λNil is in a staircase form, and contains the  left Kronecker indices  and infinite elementary divisors of the pencil M-λN.  The nb-dimensional vectors ν and μ contain the row and, respectively, column dimensions of the blocks of the staircase form  Mil-λNil such that the i-th block has dimensions ν[i] x μ[i] and has full column rank.  The difference ν[nb-j+1]-μ[nb-j+1] for j = 1, 2, ..., nb is the number of elementary Kronecker blocks of size  j x (j-1). The difference μ[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0). If ut = true, the full column rank diagonal blocks of Mil are reduced to the form [X; 0]  with X upper triangular and nonsingular and the full row rank supradiagonal blocks of Nil are reduced to the form [0 Y] with Y upper triangular and nonsingular. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.   \n\nNote: If the pencil M - λN has full row rank, then the regular pencil Mil-λNil is in a staircase form with square upper triangular diagonal blocks (i.e.,μ[j] = ν[j]), and the difference ν[nb-j+1]-ν[nb-j] for  j = 1, 2, ..., nb is the number of infinite elementary divisors of degree j (with ν[0] = 0).\n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_rightinf","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_rightinf","text":"klf_rightinf(M, N; fast = true, ut = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) \n            -> (F, G, Q, Z, νr, μr, νi, n, p)\n\nReduce the matrix pencil M - λN to an equivalent form F - λG = Q'(M - λN)Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices F and G are in the following Kronecker-like form exhibiting the infinite and left Kronecker structures:\n\n               |  Mr-λNr  |     *      |    *     |\n               |----------|------------|----------|\n     F - λG =  |    O     |   Mi-λNi   |    *     |\n               |----------|------------|----------|\n               |    O     |     0      | Mfl-λNfl |\n\nThe full row rank pencil Mr-λNr is in a staircase form, contains the right Kronecker indices  of the pencil M-λNand has the form\n\n     Mr-λNr  = | Br | Ar-λEr |,\n\nwhere Er is upper triangular and nonsingular.  The nr-dimensional vectors νr and μr contain the row and, respectively, column dimensions of the blocks of the staircase form  Mr-λNr such that the i-th block has dimensions νr[i] x μr[i] and  has full row rank. The difference μr[i]-νr[i] for i = 1, 2, ..., nr is the number of elementary Kronecker  blocks of size (i-1) x i.  If ut = true, the full row rank diagonal blocks of Mr are reduced to the form [0 X]  with X upper triangular and nonsingular and the full column rank supradiagonal blocks of Nr are reduced to the form [Y; 0] with Y upper triangular and nonsingular. \n\nThe regular pencil Mi-λNi is in a staircase form, contains the infinite elementary divisors of M-λN  with Mi upper triangular if ut = true and nonsingular, and Ni is upper triangular and nilpotent.  The ni-dimensional vector νi contains the dimensions of the  square diagonal blocks of the staircase form  Mi-λNi such that the i-th block has dimensions νi[i] x νi[i].  The difference νi[ni-i+1]-νi[ni-i] for i = 1, 2, ..., ni is the number of infinite elementary divisors of degree i (with νi[0] = 0).\n\nThe full column rank pencil Mfl-λNfl contains the left Kronecker   and finite Kronecker structures of the pencil M-λN and is in the form \n\n                 | A-λE | \n      Mfl-λNfl = |------| ,        \n                 |  C   |\n\nwhere E is an nxn non-singular upper triangular matrix, and A and C are nxn- and pxn-dimensional matrices, respectively.                      \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_rlsplit","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_rlsplit","text":"klf_rlsplit(M, N; fast = true, finite_infinite = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (F, G, Q, Z, ν, μ, n, m, p)\n\nReduce the matrix pencil M - λN to an equivalent form F - λG = Q'*(M - λN)*Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices F and G are in one of the following Kronecker-like forms:\n\n(1) if finite_infinite = false, then\n\n               | Mri-λNri |     *      |\n      F - λG = |----------|------------|, \n               |    O     | Mfl-λNfl   |\n\nwhere the subpencil Mri-λNri contains the right Kronecker structure and infinite elementary  divisors and the subpencil Mfl-λNfl contains the finite and left Kronecker structure of the pencil M-λN.\n\nThe full row rank subpencil Mri-λNri is in a staircase form.  The nb-dimensional vectors ν and μ contain the row and, respectively, column dimensions of the blocks of the staircase form  Mri-λNri such that i-th block has dimensions ν[i] x μ[i] and  has full row rank.  The difference μ[i]-ν[i] for i = 1, 2, ..., nb is the number of elementary Kronecker blocks of size (i-1) x i. The difference ν[i]-μ[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with μ[nb+1] = 0).\n\nThe full column rank subpencil Mfl-λNfl is in the form \n\n                 | A-λE | \n      Mfl-λNfl = |------| ,        \n                 |  C   |\n\nwhere E is an nxn non-singular upper triangular matrix, and A and C are nxn- and pxn-dimensional matrices, respectively, and m = 0. \n\n(2) if finite_infinite = true, then\n\n               | Mrf-λNrf |     *      |\n      F - λG = |----------|------------|, \n               |    O     | Mil-λNil   |\n\nwhere the subpencil Mrf-λNrf contains the right Kronecker and finite Kronecker structures and  the subpencil Mil-λNil contains the left Kronecker structures and infinite elementary  divisors of the pencil M-λN. \n\nThe full row rank subpencil Mrf-λNrf is in the form \n\n      Mrf-λNrf = | B  | A-λE | ,\n\nwhere E is an nxn non-singular upper triangular matrix, and A and B are nxn- and nxm-dimensional matrices, respectively, and p = 0.  \n\nThe full column rank sub pencil Mil-λNil is in a staircase form.  The nb-dimensional vectors ν and μ contain the row and, respectively, column dimensions of the blocks of the staircase form  Mil-λNil such that the i-th block has dimensions ν[i] x μ[i] and has full column rank.  The difference ν[nb-j+1]-μ[nb-j+1] for j = 1, 2, ..., nb is the number of elementary Kronecker blocks of size  j x (j-1). The difference μ[nb-j+1]-ν[nb-j] for j = 1, 2, ..., nb is the number of infinite elementary  divisors of degree j (with ν[0] = 0).\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N. \n\nThe reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.preduceBF","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.preduceBF","text":"preduceBF(M, N; fast = true, atol = 0, rtol, withQ = true, withZ = true) -> (F, G, Q, Z, n, m, p)\n\nReduce the matrix pencil M - λN to an equivalent form F - λG = Q'*(M - λN)*Z using  orthogonal or unitary transformation matrices Q and Z such that the pencil M - λN is transformed  into the following standard form\n\n               | B  | A-λE | \n      F - λG = |----|------| ,        \n               | D  |  C   |\n\nwhere E is an nxn non-singular matrix, and A, B, C, D are nxn-, nxm-, pxn- and pxm-dimensional matrices, respectively. The order n of E is equal to the numerical rank of N determined using the absolute tolerance atol and  relative tolerance rtol. M and N are overwritten by F and G, respectively. \n\nIf fast = true, E is determined upper triangular using a rank revealing QR-decomposition with column pivoting of N  and n is evaluated as the number of nonzero diagonal elements of the R factor, whose magnitudes are greater than  tol = max(atol,abs(R[1,1])*rtol).  If fast = false,  E is determined diagonal using a rank revealing SVD-decomposition of N and  n is evaluated as the number of singular values greater than tol = max(atol,smax*rtol), where smax  is the largest singular value.  The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_right!","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_right!","text":"klf_right!(M, N; fast = true, roff = 0, coff = 0, rtrail = 0, ctrail = 0, atol = 0, rtol, withQ = true, withZ = true) -> (Q, Z, νr, μr, nf, ν, μ, tol)\n\nReduce the partitioned matrix pencil M - λN (* stands for a not relevant subpencil)\n\n          [   *         *        *  ] roff\n M - λN = [   0      M22-λN22    *  ] m\n          [   0         0        *  ] rtrail\n            coff        n     ctrail\n\nto an equivalent form F - λG = Q1'*(M - λN)*Z1 using orthogonal or unitary transformation matrices Q1 and Z1  such that the subpencil M22 - λN22 is transformed into the following Kronecker-like form exhibiting  its right and finite Kronecker structures:\n\n               |  Mr-λNr    |     *      |    *     |\n               |------------|------------|----------|\n F22 - λG22 =  |    O       |   Mf-λNf   |    *     |\n               |------------|------------|----------|\n               |    O       |     0      | Mil-λNil |\n\nF and G are returned in M and N, respectively.                \n\nThe full row rank pencil Mr-λNr, in a staircase form, contains the right Kronecker indices of  the subpencil M22 - λN22 and has the form\n\n     Mr-λNr  = | Br | Ar-λEr |,\n\nwhere Er is upper triangular and nonsingular.  The nr-dimensional vectors νr and μr contain the row and, respectively, column dimensions of the blocks of the staircase form  Mr-λNr such that i-th block has dimensions νr[i] x μr[i] and  has full row rank. The difference μr[i]-νr[i] for i = 1, 2, ..., nr is the number of elementary Kronecker blocks of size (i-1) x i.\n\nThe nf x nf pencil Mf-λNf is regular and contains the finite elementary divisors of the subpencil M22 - λN22.  Nf is upper triangular and nonsingular.\n\nThe full column rank pencil Mil-λNil is in a staircase form, and contains the  left Kronecker indices  and infinite elementary divisors of the subpencil M22 - λN22.  The nb-dimensional vectors ν and μ contain the row and, respectively, column dimensions of the blocks of the staircase form  Mil-λNil such that the i-th block has dimensions ν[nb-i+1] x μ[nb-i+1] and has full column rank.  The difference ν[nb-i+1]-μ[nb-i+1] for i = 1, 2, ..., nb is the number of elementary Kronecker blocks of size  i x (i-1). The difference μ[nb-i+1]-ν[nb-i] for i = 1, 2, ..., nb is the number of infinite elementary  divisors of degree i (with ν[0] = 0).\n\nThe keyword arguments atol and rtol, specify the absolute and relative tolerances for the  nonzero elements of M, respectively. The internally employed absolute tolerance  for the  nonzero elements of M is returned in tol.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q (i.e., Q <- Q*Q1)  if withQ = true. Otherwise, Q is not modified.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z (i.e., Z <- Z*Z1)  if withZ = true. Otherwise, Z is not modified.   \n\nNote: If the subpencil M22 - λN22 has full row rank, then the regular pencil Mil-λNil is in a staircase form with square upper triangular diagonal blocks (i.e.,μ[i] = ν[i]), and the difference ν[nb-i+1]-ν[nb-i] for  i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i (with ν[0] = 0).\n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_right_refine!","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_right_refine!","text":" klf_right_refine!(ν, μ, M, N, tol; fast = true, ut = false, roff = 0, coff = 0, rtrail = 0, ctrail = 0, withQ = true, withZ = true) -> (νr, μr, νi)\n\nReduce the partitioned matrix pencil M - λN (* stands for a not relevant subpencil)\n\n         [   *         *        *  ] roff\nM - λN = [   0      Mri-λNri    *  ] mri\n         [   0         0        *  ] rtrail\n           coff      nri     ctrail\n\nto an equivalent form F - λG = Q1'*(M - λN)*Z1 using orthogonal or unitary transformation matrices Q1 and Z1  such that the full row rank subpencil Mri-λNriis transformed into the  following Kronecker-like form  exhibiting its right and infinite Kronecker structures:\n\n              |  Mr-λNr    |     *      |\n Fri - λGri = |------------|------------|\n              |    O       |   Mi-λNi   |\n\nThe full row rank pencil Mri-λNri is in a staircase form and the nb-dimensional vectors ν and μ  contain the row and, respectively, column dimensions of the blocks of the staircase form  Mri-λNri such that  the i-th block has dimensions ν[i] x μ[i] and has full row rank. The matrix Mri has full row rank and  the trailing μ[2]+...+μ[nb] columns of Nri form a full column rank submatrix. \n\nThe full row rank pencil Mr-λNr is in a staircase form, contains the right Kronecker indices  of the pencil M-λNand has the form\n\n  Mr-λNr  = | Br | Ar-λEr |,\n\nwhere Er is upper triangular and nonsingular.  The nr-dimensional vectors νr and μr contain the row and, respectively, column dimensions of the blocks of the staircase form  Mr-λNr such that the i-th block has dimensions νr[i] x μr[i] and  has full row rank. The difference μr[i]-νr[i] = μ[i]-ν[i] for i = 1, 2, ..., nr is the number of  elementary Kronecker blocks of size (i-1) x i. If ut = true, the full row rank diagonal blocks of Mr are reduced to the form [0 X]  with X upper triangular and nonsingular and the full column rank supradiagonal blocks of Nr are reduced to the form [Y; 0] with Y upper triangular and nonsingular. \n\nThe regular pencil Mi-λNiis in a staircase form, contains the infinite elementary divisors of Mri-λNri,  Mi is upper triangular if ut = true and nonsingular and Ni is upper triangular and nilpotent. The ni-dimensional vector νi contains the dimensions of the  square diagonal blocks of the staircase form  Mi-λNi such that the i-th block has dimensions νi[i] x νi[i].  The difference νi[ni-i+1]-νi[ni-i] = ν[i]-μ[i+1] for i = 1, 2, ..., ni is the number of infinite elementary  divisors of degree i (with νi[0] = 0 and μ[nb+1] = 0).\n\nF and G are returned in M and N, respectively.  \n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q (i.e., Q <- Q*Q1)  if withQ = true. Otherwise, Q is not modified.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z (i.e., Z <- Z*Z1)  if withZ = true. Otherwise, Z is not modified.   \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_right_refineut!","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_right_refineut!","text":"klf_right_refineut!(ν, μ, M, N, Q, Z; ctrail = 0, withQ = true, withZ = true)\n\nReduce the partitioned matrix pencil M - λN (* stands for a not relevant subpencil)\n\n         [ Mri-λNri  *   ] \nM - λN = [    0      *   ] \n                   ctrail\n\nto an equivalent form F - λG = Q1'*(M - λN)*Z1 using orthogonal or unitary transformation  matrices  Q1 and Z1, such that the full row rank subpencil Mri-λNri, in staircase form ,  is transformed as follows: the full row rank diagonal blocks of Mri are reduced to the form [0 X]  with X upper triangular and nonsingular and the full column rank supradiagonal blocks of Nri are reduced to the form [Y; 0] with Y upper triangular and nonsingular.  It is assumed that Mri-λNri has nb diagonal blocks and the dimensions of the diagonal blocks   are specified by the nb-dimensional vectors ν and μ such that the i-th block has dimensions ν[i] x μ[i].  \n\nThe performed orthogonal or unitary transformations are accumulated in Q (i.e., Q <- Q*Q1),  if withQ = true and Z (i.e., Z <- Z*Z1), if withZ = true. \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_right_refineinf!","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_right_refineinf!","text":"klf_right_refineinf!(νi, M, N, Z, R; roff = 0, coff = 0, withZ = true)\n\nReduce the partitioned matrix pencil M - λN (* stands for a not relevant subpencil)\n\n         [   *         *        *  ] roff\nM - λN = [   0       Mi-λNi     *  ] ni\n         [   0         0        *  ] rtrail\n           coff       ni     ctrail\n\nto an equivalent form F - λG = (M - λN)*Z1 using an orthogonal or unitary transformation  matrix Z1, such that the regular subpencil Mi-λNi, in staircase form ,  with Mi nonsingular and Ni nillpotent and upper triangular, is transformed to obtain  Mi is upper-triangular and preserve Ni upper triangular.  It is assumed that Mi-λNi has nb diagonal blocks and the i-th diagonal block has dimensions  νi[i] x νi[i].\n\nThe performed orthogonal or unitary transformations are accumulated in Z (i.e., Z <- Z*Z1),  if withZ = true. \n\nThe  matrix R is overwritten by R*Z1 unless R = missing. \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_left","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_left","text":"klf_left(M, N; fast = true, ut = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) -> (F, G, Q, Z, ν, μ, nf, νl, μl)\n\nReduce the matrix pencil M - λN to an equivalent form F - λG = Q'(M - λN)Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices F and G are in the following Kronecker-like form exhibiting the finite and left Kronecker structures:\n\n               |  Mri-λNri  |     *      |    *    |\n               |------------|------------|---------|\n     F - λG =  |    O       |   Mf-λNf   |    *    |\n               |------------|------------|---------|\n               |    O       |     0      |  Ml-λNl |\n\nThe full row rank pencil Mri-λNri is in a staircase form, and contains the right Kronecker indices  and infinite elementary divisors of the pencil M-λN.\n\nThe nf x nf pencil Mf-λNf is regular and contains the finite elementary divisors of M-λN.  Nf is upper triangular and nonsingular.\n\nThe full column rank pencil Ml-λNl, in a staircase form, contains the left Kronecker indices of M-λN and has the form\n\n               | Al-λEl |\n     Ml-λNl  = |--------|,\n               |   Cl   |\n\nwhere El is upper triangular and nonsingular. \n\nThe nb-dimensional vectors ν and μ contain the row and, respectively, column dimensions of the blocks of the staircase form  Mri-λNri such that i-th block has dimensions ν[i] x μ[i] and  has full row rank.  The difference μ[i]-ν[i] for i = 1, 2, ..., nb is the number of elementary Kronecker blocks of size (i-1) x i. The difference ν[i]-μ[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with μ[nb+1] = 0). If ut = true, the full row rank diagonal blocks of Mri are reduced to the form [0 X]  with X upper triangular and nonsingular and the full column rank supradiagonal blocks of Nri are reduced to the form [Y; 0] with Y upper triangular and nonsingular. \n\nThe nl-dimensional vectors νl and μl contain the row and, respectively, column dimensions of the blocks of the staircase form  Ml-λNl such that the j-th block has dimensions νl[j] x μl[j] and has full column rank.  The difference νl[nl-j+1]-μl[nl-j+1] for j = 1, 2, ..., nl is the number of elementary Kronecker blocks of size  j x (j-1). If ut = true, the full column rank diagonal blocks of Ml are reduced to the form [X; 0]  with X upper triangular and nonsingular and the full row rank supradiagonal blocks of Nl are reduced to the form [0 Y] with Y upper triangular and nonsingular. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\nNote: If the pencil M - λN has full column rank, then the regular pencil Mri-λNri is in a staircase form with square upper triangular diagonal blocks (i.e.,μ[i] = ν[i]), and the difference ν[i+1]-ν[i] for i = 1, 2, ..., nb  is the number of infinite elementary divisors of degree i (with ν[nb+1] = 0).\n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_leftinf","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_leftinf","text":"klf_leftinf(M, N; fast = true, ut = false, atol1 = 0, atol2 = 0, rtol, withQ = true, withZ = true) \n            -> (F, G, Q, Z, n, m, νi, νl, μl)\n\nReduce the matrix pencil M - λN to an equivalent form F - λG = Q'(M - λN)Z using  orthogonal or unitary transformation matrices Q and Z such that the transformed matrices F and G are in the following Kronecker-like form exhibiting the infinite and left Kronecker structures:\n\n               |  Mrf-λNrf  |     *      |    *    |\n               |------------|------------|---------|\n     F - λG =  |    O       |   Mi-λNi   |    *    |\n               |------------|------------|---------|\n               |    O       |     0      |  Ml-λNl |\n\nThe full row rank pencil Mrf-λNrf contains the right Kronecker   and finite Kronecker structures of the pencil M-λN and is in the standard form \n\n      Mrf-λNrf = | B  | A-λE | ,\n\nwhere E is an nxn non-singular upper triangular matrix, and A and B are nxn- and nxm-dimensional matrices, respectively.                      \n\nThe regular pencil Mi-λNi is in a staircase form, contains the infinite elementary divisors of M-λN  with Mi upper triangular if ut = true and nonsingular, and Ni is upper triangular and nilpotent.  The ni-dimensional vector νi contains the dimensions of the  square diagonal blocks of the staircase form  Mi-λNi such that the i-th block has dimensions νi[i] x νi[i].  The difference νi[i]-νi[i-1] = ν[ni-i+1]-μ[ni-i+1] for i = 1, 2, ..., ni is the number of infinite elementary  divisors of degree i (with νi[0] = 0 and μ[nb+1] = 0).\n\nThe full column rank pencil Ml-λNl, in a staircase form, contains the left Kronecker indices of M-λN and has the form\n\n               | Al-λEl |\n     Ml-λNl  = |--------|,\n               |   Cl   |\n\nwhere El is upper triangular and nonsingular. \n\nThe nl-dimensional vectors νl and μl contain the row and, respectively, column dimensions of the blocks of the staircase form  Ml-λNl such that the j-th block has dimensions νl[j] x μl[j] and has full column rank.  The difference νl[nl-j+1]-μl[nl-j+1] for j = 1, 2, ..., nl is the number of elementary Kronecker blocks of size  j x (j-1). If ut = true, the full column rank diagonal blocks of Ml are reduced to the form [X; 0]  with X upper triangular and nonsingular and the full row rank supradiagonal blocks of Nl are reduced to the form [0 Y] with Y upper triangular and nonsingular. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q if withQ = true.  Otherwise, Q is set to nothing.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z if withZ = true.  Otherwise, Z is set to nothing.  \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_left!","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_left!","text":"klf_left!(M, N; fast = true, roff = 0, coff = 0, rtrail = 0, ctrail = 0, atol = 0, rtol, withQ = true, withZ = true) -> (Q, Z, ν, μ, nf, νl, μl, tol)\n\nReduce the partitioned matrix pencil M - λN (* stands for a not relevant subpencil)\n\n          [   *         *        *  ] roff\n M - λN = [   0      M22-λN22    *  ] m\n          [   0         0        *  ] rtrail\n            coff        n     ctrail\n\nto an equivalent form F - λG = Q1'*(M - λN)*Z1 using orthogonal or unitary transformation matrices Q1 and Z1  such that the subpencil M22 - λN22  is transformed into the following Kronecker-like form exhibiting  its finite and left Kronecker structures\n\n               |  Mri-λNri  |     *      |    *    |\n               |------------|------------|---------|\n F22 - λG22 =  |    O       |   Mf-λNf   |    *    |\n               |------------|------------|---------|\n               |    O       |     0      |  Ml-λNl |\n\nF and G are returned in M and N, respectively.                \n\nThe full row rank pencil Mri-λNri is in a staircase form, and contains the right Kronecker indices  and infinite elementary divisors of the subpencil M22 - λN22.  The nb-dimensional vectors ν and μ contain the row and, respectively, column dimensions of the blocks of the staircase form  Mri-λNri such that i-th block has dimensions ν[i] x μ[i] and  has full row rank.  The difference μ[i]-ν[i] for i = 1, 2, ..., nb is the number of elementary Kronecker blocks of size (i-1) x i. The difference ν[i]-μ[i+1] for i = 1, 2, ..., nb is the number of infinite elementary divisors of degree i  (with μ[nb+1] = 0).\n\nThe nf x nf pencil Mf-λNf is regular and contains the finite elementary divisors of M-λN.  Nf is upper triangular and nonsingular.\n\nThe full column rank pencil Ml-λNl, in a staircase form, contains the left Kronecker indices of M-λN and has the form\n\n               | Al-λEl |\n     Ml-λNl  = |--------|,\n               |   Cl   |\n\nwhere El is upper triangular and nonsingular.  The nl-dimensional vectors νl and μl contain the row and, respectively, column dimensions of the blocks of the staircase form  Ml-λNl such that j-th block has dimensions νl[nl-j+1] x μl[nl-j+1] and has full column rank.  The difference νl[nl-j+1]-μl[nl-j+1] for j = 1, 2, ..., nl is the number of elementary Kronecker blocks of size  j x (j-1).\n\nThe keyword arguments atol and rtol, specify the absolute and relative tolerances for the  nonzero elements of M, respectively. The internally employed absolute tolerance  for the  nonzero elements of M is returned in tol.  The reduction is performed using rank decisions based on rank revealing QR-decompositions with column pivoting  if fast = true or the more reliable SVD-decompositions if fast = false.\n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q (i.e., Q <- Q*Q1)  if withQ = true. Otherwise, Q is not modified.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z (i.e., Z <- Z*Z1)  if withZ = true. Otherwise, Z is not modified.   \n\nNote: If the pencil M22 - λN22 has full column rank, then the regular pencil Mri-λNri is in a staircase form with square diagonal blocks (i.e.,μ[i] = ν[i]), and the difference ν[i]-ν[i+1] for i = 1, 2, ..., nb  is the number of infinite elementary divisors of degree i (with ν[nb+1] = 0).\n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_left_refine!","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_left_refine!","text":"klf_left_refine!(ν, μ, M, N, tol; fast = true, ut = false, roff = 0, coff = 0, rtrail = 0, ctrail = 0, withQ = true, withZ = true) -> (νi, νl, μl)\n\nReduce the partitioned matrix pencil M - λN (* stands for a not relevant subpencil)\n\n         [   *         *        *  ] roff\nM - λN = [   0      Mil-λNil    *  ] mli\n         [   0         0        *  ] rtrail\n           coff      nli     ctrail\n\nto an equivalent form F - λG = Q1'*(M - λN)*Z1 using orthogonal or unitary transformation matrices Q1 and Z1  such that the full column rank subpencil Mil-λNil is transformed into the  following Kronecker-like form  exhibiting its infinite and left Kronecker structures:\n\n              |  Mi-λNi    |     *      |\n Fil - λGil = |------------|------------|\n              |    O       |   Ml-λNl   |\n\nThe full column rank pencil Mil-λNil is in a staircase form and the nb-dimensional vectors ν and μ  contain the row and, respectively, column dimensions of the blocks of the staircase form  Mil-λNil such that  the i-th block has dimensions ν[i] x μ[i] and has full column rank. The matrix Mil has full column rank and  the leading μ[1]+...+μ[nb-1] columns of Nil form a full row rank submatrix. \n\nThe regular pencil Mi-λNi is in a staircase form, contains the infinite elementary divisors of Mil-λNil,   Mi is upper triangular if ut = true and nonsingular and Ni is upper triangular and nilpotent. The nbi-dimensional vector νi contains the dimensions of the  square diagonal blocks of the staircase form  Mi-λNi such that the i-th block has dimensions νi[i] x νi[i].  The difference νi[i]-νi[i-1] = ν[nbi-i+1]-μ[nbi-i+1] for i = 1, 2, ..., nbi is the number of infinite elementary  divisors of degree i (with νi[0] = 0 and μ[nbi+1] = 0).\n\nThe full column rank pencil Mil-λNil is in a staircase form, and contains the  left Kronecker indices  and infinite elementary divisors of the subpencil M22 - λN22.  The nb-dimensional vectors ν and μ contain the row and, respectively, column dimensions of the blocks of the staircase form  Mil-λNil such that the i-th block has dimensions ν[nb-i+1] x μ[nb-i+1] and has full column rank.  The difference ν[nb-i+1]-μ[nb-i+1] for i = 1, 2, ..., nb is the number of elementary Kronecker blocks of size  i x (i-1). The difference μ[nb-i+1]-ν[nb-i] for i = 1, 2, ..., nb is the number of infinite elementary  divisors of degree i (with ν[0] = 0).\n\nThe full column rank pencil Ml-λNl, in a staircase form, contains the left Kronecker indices of M-λN and has the form\n\n           | Al-λEl |\n Ml-λNl  = |--------|,\n           |   Cl   |\n\nwhere El is upper triangular and nonsingular.  The nl-dimensional vectors νl and μl contain the row and, respectively, column dimensions of the blocks of the staircase form  Ml-λNl such that the j-th block has dimensions νl[j] x μl[j] and has full column rank.  The difference νl[nl-j+1]-μl[nl-j+1] = ν[nl-j+1]-μ[nl-j+1] for j = 1, 2, ..., nl is the number of elementary  Kronecker blocks of size j x (j-1). If ut = true, the full column rank diagonal blocks of Ml are reduced to the form [Y; 0]  with Y upper triangular and nonsingular and the full row rank supradiagonal blocks of Nl are reduced to the form [0 Y] with Y upper triangular and nonsingular. \n\nF and G are returned in M and N, respectively.  \n\nThe performed left orthogonal or unitary transformations are accumulated in the matrix Q (i.e., Q <- Q*Q1)  if withQ = true. Otherwise, Q is not modified.    The performed right orthogonal or unitary transformations are accumulated in the matrix Z (i.e., Z <- Z*Z1)  if withZ = true. Otherwise, Z is not modified.   \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_left_refineut!","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_left_refineut!","text":"klf_left_refineut!(ν, μ, M, N, Q, Z; roff = 0, coff = 0, withQ = true, withZ = true)\n\nReduce the partitioned matrix pencil M - λN (* stands for a not relevant subpencil)\n\n         [  *     *     ] roff\nM - λN = [  0  Mil-λNil ] \n          coff\n\nto an equivalent form F - λG = Q1'*(M - λN)*Z1 using orthogonal or unitary transformation  matrices  Q1 and Z1, such that the full column rank subpencil Mil-λNil, in staircase form ,  is transformed as follows: the full column rank diagonal blocks of Mil are reduced to the form [Y ; 0]  with Y upper triangular and nonsingular and the full row rank supradiagonal blocks of Nil are reduced to the form [0 Y] with Y upper triangular and nonsingular.  It is assumed that Mil-λNil has nb diagonal blocks and the dimensions of the diagonal blocks   are specified by the nb-dimensional vectors ν and μ such that the i-th block has dimensions ν[i] x μ[i].  \n\nThe performed orthogonal or unitary transformations are accumulated in Q (i.e., Q <- Q*Q1),  if withQ = true and Z (i.e., Z <- Z*Z1), if withZ = true. \n\n\n\n\n\n","category":"function"},{"location":"klftools.html#MatrixPencils.klf_left_refineinf!","page":"Manipulation of general linear matrix pencils","title":"MatrixPencils.klf_left_refineinf!","text":"klf_left_refineinf!(νi, M, N, Q, L; roff = 0, coff = 0, withQ = true)\n\nReduce the partitioned matrix pencil M - λN (* stands for a not relevant subpencil)\n\n         [   *         *        *  ] roff\nM - λN = [   0       Mi-λNi     *  ] ni\n         [   0         0        *  ] rtrail\n           coff       ni     ctrail\n\nto an equivalent form F - λG = Q1'*(M - λN) using an orthogonal or unitary transformation  matrix Q1, such that the regular subpencil Mi-λNi, in staircase form,  with Mi nonsingular and Ni nillpotent and upper triangular, is transformed to obtain  Mi upper-triangular and preserve Ni upper triangular.  It is assumed that Mi-λNi has nb diagonal blocks and the i-th diagonal block has dimensions  νi[i] x νi[i].\n\nThe performed orthogonal or unitary transformations are accumulated in Q (i.e., Q <- Q*Q1),  if withQ = true. \n\nThe  matrix L is overwritten by Q1'*L unless L = missing. \n\n\n\n\n\n","category":"function"},{"location":"lstools.html#Manipulation-of-linearizations-of-polynomial-or-rational-matrices","page":"Manipulation of linearizations of polynomial or rational matrices","title":"Manipulation of linearizations of polynomial or rational matrices","text":"","category":"section"},{"location":"lstools.html","page":"Manipulation of linearizations of polynomial or rational matrices","title":"Manipulation of linearizations of polynomial or rational matrices","text":"Function Description\nlsbalance! Scaling of a descriptor system based linearization\nlsminreal Computation of irreducible descriptor system based linearizations\nlsminreal2 Computation of irreducible descriptor system based linearizations (potentially more efficient)\nlpsminreal Computation of strongly minimal pencil based linearizations\nlsequal Checking the equivalence of two descriptor system based linearizations\nlpsequal Checking the equivalence of two pencil based linearizations\nlseval Evaluation of the value of the rational matrix corresponding to a descriptor system based linearization\nlpseval Evaluation of the value of the rational matrix corresponding to a pencil based linearization\nlps2ls Conversion of a pencil based linearization into a descriptor system based linearization\nlsbalqual Evaluation of the scaling quality of descriptor system based linearizations","category":"page"},{"location":"lstools.html#MatrixPencils.lsbalance!","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lsbalance!","text":" lsbalance!(A, B, C; withB = true, withC = true, maxred = 16) -> D\n\nReduce the 1-norm of a system matrix \n\n         S =  ( A  B )\n              ( C  0 )\n\ncorresponding to a standard system triple (A,B,C) by balancing.  This involves a diagonal similarity transformation inv(D)*A*D  to make the rows and columns of \n\n              diag(inv(D),I) * S * diag(D,I)\n\nas close in norm as possible.\n\nThe balancing can be optionally performed on the following  particular system matrices:   \n\n    S = A, if withB = false and withC = false ,\n    S = ( A  B ), if withC = false,     or    \n    S = ( A ), if withB = false .\n        ( C )\n\nThe keyword argument maxred = s specifies the maximum allowed reduction in the 1-norm of S (in an iteration) if zero rows or columns are present.  s must be a positive power of 2, otherwise  s is rounded to the nearest power of 2.   \n\nNote: This function is a translation of the SLICOT routine TB01ID.f, which  represents an extensiom of the LAPACK family *GEBAL.f and also includes   the fix proposed in [1]. \n\n[1]  R.James, J.Langou and B.Lowery. \"On matrix balancing and eigenvector computation.\"      ArXiv, 2014, http://arxiv.org/abs/1401.5766\n\n\n\n\n\n lsbalance!(A, E, B, C; withB = true, withC = true, pow2, maxiter = 100, tol = 1) -> (D1,D2)\n\nReduce the 1-norm of the matrix \n\n         S =  ( abs(A)+abs(E)  abs(B) )\n              (    abs(C)        0    )\n\ncorresponding to a descriptor system triple (A-λE,B,C) by row and column balancing.  This involves diagonal similarity transformations D1*(A-λE)*D2 applied iteratively to abs(A)+abs(E) to make the rows and columns of \n\n              diag(D1,I)  * S * diag(D2,I)\n\nas close in norm as possible.\n\nThe balancing can be performed optionally on the following  particular system matrices:   \n\n    S = abs(A)+abs(E), if withB = false and withC = false ,\n    S = ( abs(A)+abs(E)  abs(B) ), if withC = false,     or    \n    S = ( abs(A)+abs(E) ), if withB = false .\n        (   abs(C)     )\n\nThe keyword argument maxiter = k specifies the maximum number of iterations k  allowed in the balancing algorithm. \n\nThe keyword argument tol = τ, with τ ≤ 1,  specifies the tolerance used in the stopping criterion.   \n\nIf the keyword argument pow2 = true is specified, then the components of the resulting  optimal D1 and D2 are replaced by their nearest integer powers of 2, in which case the  scaling of matrices is done exactly in floating point arithmetic.  If pow2 = false, the optimal values D1 and D2 are returned.\n\nNote: This function is an extension of the MATLAB function rowcolsums.m of [1]. \n\n[1] F.M.Dopico, M.C.Quintana and P. van Dooren,      \"Diagonal scalings for the eigenstructure of arbitrary pencils\", SIMAX, 43:1213-1237, 2022. \n\n\n\n\n\n","category":"function"},{"location":"lstools.html#MatrixPencils.lsminreal","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lsminreal","text":"lsminreal(A, B, C; fast = true, atol = 0, rtol, contr = true, obs = true, noseig = true) \n          -> (Ar, Br, Cr, nuc, nuo)\n\nReduce the linearization (A-λI,B,C,0) of a strictly proper rational matrix to a reduced form (Ar-λI,Br,Cr,0) such that\n\n         -1                 -1\n C*(λI-A)  *B  = Cr*(λI-Ar)  *Br\n\nwith the least possible order nr of Ar if contr = true and obs = true.  Such a realization is called minimal and satisfies:\n\n (1) rank[Br Ar-λI] = nr for all λ (controllability);\n\n (2) rank[Ar-λI; Cr] = nr for all λ (observability).\n\nThe achieved dimensional reductions to fulfill conditions (1) and (2) are returned in nuc and nuo, respectively. \n\nSome reduction steps can be skipped by appropriately selecting the keyword arguments contr and obs. \n\nIf contr = false, then the controllability condition (1) is not enforced. \n\nIf obs = false, then observability condition (2) is not enforced.\n\nTo enforce conditions (1)-(2), orthogonal similarity transformations are performed on  the matrices of the original linearization (A-λI,B,C,0) to obtain a minimal linearization using structured pencil reduction algorithms, as the fast versions of the reduction techniques of the  full row rank pencil [B A-λI] and full column rank pencil [A-λI;C] proposed in [1]. \n\nThe underlying pencil manipulation algorithms employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerances for the  nonzero elements of matrices A, B, C.  \n\n[1] P. Van Dooreen, The generalized eigenstructure problem in linear system theory,  IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.\n\n\n\n\n\nlsminreal(A, E, B, C, D; fast = true, atol1 = 0, atol2, rtol, contr = true, obs = true, noseig = true) \n          -> (Ar, Er, Br, Cr, Dr, nuc, nuo, nse)\n\nReduce the linearization (A-λE,B,C,D) of a rational matrix to a reduced form (Ar-λEr,Br,Cr,Dr) such that\n\n         -1                    -1\n C*(λE-A)  *B + D = Cr*(λEr-Ar)  *Br + Dr\n\nwith the least possible order nr of Ar-λEr if contr = true, obs = true and nseig = true.  Such a realization is called minimal and satisfies:\n\n (1) rank[Br Ar-λEr] = nr for all finite λ (finite controllability)\n\n (2) rank[Br Er] = nr (infinite controllability)\n\n (3) rank[Ar-λEr; Cr] = nr for all finite λ (finite observability)\n\n (4) rank[Er; Cr] = nr (infinite observability)\n\n (5) Ar-λEr has no simple infinite eigenvalues\n\nA realization satisfying only conditions (1)-(4) is called irreducible. \n\nThe achieved dimensional reductions to fulfill conditions (1) and (2), conditions (3) and (4), and  respectively, condition (5) are returned in nuc, nuo, nse. \n\nSome reduction steps can be skipped by appropriately selecting the keyword arguments contr, obs and nseig. \n\nIf contr = false, then the controllability conditions (1) and (2) are not enforced. \n\nIf obs = false, then observability condition (3) and (4) are not enforced.\n\nIf nseig = false, then condition (5) on the lack of simple infinite eigenvalues is not enforced. \n\nTo enforce conditions (1)-(4), orthogonal similarity transformations are performed on  the matrices of the original linearization (A-λE,B,C,D) to obtain an irreducible linearization using structured pencil reduction algorithms, as the fast versions of the reduction techniques of the  full row rank pencil [B A-λE] and full column rank pencil [A-λE;C] proposed in [1].  To enforce condition (5), residualization formulas (see, e.g., [2, page 329]) are employed which involves matrix inversions. \n\nThe underlying pencil manipulation algorithms employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of matrices A, B, C, D, the absolute tolerance for the nonzero elements of E,   and the relative tolerance for the nonzero elements of A, B, C, D and E. \n\n[1] P. Van Dooreen, The generalized eigenstructure problem in linear system theory,  IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.\n\n[2] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"lstools.html#MatrixPencils.lsminreal2","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lsminreal2","text":"lsminreal2(A, E, B, C, D; fast = true, atol1 = 0, atol2 = 0, rtol, finite = true, infinite = true, contr = true, obs = true, noseig = true) \n           -> (Ar, Er, Br, Cr, Dr, nuc, nuo, nse)\n\nReduce the linearization (A-λE,B,C,D) of a rational matrix to a reduced form (Ar-λEr,Br,Cr,Dr) such that\n\n         -1                    -1\n C*(λE-A)  *B + D = Cr*(λEr-Ar)  *Br + Dr\n\nwith the least possible order nr of Ar-λEr if finite = true, infinite = true,  contr = true, obs = true and nseig = true. Such a realization is called minimal and satisfies:\n\n (1) rank[Br Ar-λEr] = nr for all finite λ (finite controllability);\n\n (2) rank[Br Er] = nr (infinite controllability);\n\n (3) rank[Ar-λEr; Cr] = nr for all finite λ (finite observability);\n\n (4) rank[Er; Cr] = nr (infinite observability);\n\n (5) Ar-λEr has no simple infinite eigenvalues.\n\nA realization satisfying only conditions (1)-(4) is called irreducible. \n\nThe achieved dimensional reductions to fulfill conditions (1) and (2), conditions (3) and (4), and  respectively, condition (5) are returned in nuc, nuo, nse. \n\nSome reduction steps can be skipped by appropriately selecting the keyword arguments contr, obs, finite, infinite and nseig. \n\nIf contr = false, then the controllability conditions (1) and (2) are not enforced.  If contr = true and finite = true, then the finite controllability condition (1) is enforced.  If contr = true and finite = false, then the finite controllability condition (1) is not enforced.  If contr = true and infinite = true, then the infinite controllability condition (2) is enforced.  If contr = true and infinite = false, then the infinite controllability condition (2) is not enforced. \n\nIf obs = false, then observability condition (3) and (4) are not enforced. If obs = true and finite = true, then the finite observability condition (3) is enforced. If obs = true and finite = false, then the finite observability condition (3) is not enforced. If obs = true and infinite = true, then the infinite observability condition (4) is enforced. If obs = true and infinite = false, then the infinite observability condition (4) is not enforced.\n\nIf nseig = false, then condition (5) on the lack of simple infinite eigenvalues is not enforced. \n\nTo enforce conditions (1)-(4), the Procedure GIR in [1, page 328] is employed, which performs  orthogonal similarity transformations on the matrices of the original linearization (A-λE,B,C,D)  to obtain an irreducible linearization using structured pencil reduction algorithms.  To enforce condition (5), residualization formulas (see, e.g., [1, page 329]) are employed which involves matrix inversions. \n\nThe underlying pencil manipulation algorithms employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of matrices A, B, C, D, the absolute tolerance for the nonzero elements of E,   and the relative tolerance for the nonzero elements of A, B, C, D and E. \n\n[1] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"lstools.html#MatrixPencils.lpsminreal","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lpsminreal","text":"lpsminreal(A, E, B, F, C, G, D, H; fast = true, atol1 = 0, atol2, rtol, contr = true, obs = true)  \n           -> (Ar, Er, Br, Fr, Cr, Gr, Dr, Hr, V, W, nuc, nuo)\n\nReduce the linearization (A-λE,B-λF,C-λG,D-λH) of a rational matrix to a reduced form  (Ar-λEr,Br-λFr,Cr-λGr,Dr-λHr) such that, for appropriate  invertible upper triangular matrices V and W, \n\n                  -1                                     -1\n V'*((C-λG)*(λE-A)  *(B-λF) + D-λH)*W = (Cr-λGr)*(λEr-Ar)  *(Br-λFr) + Dr-λHr\n\nwith the least possible order nr of Ar-λEr if contr = true and obs = true. Such a realization is called strongly minimal and satisfies:\n\n (1) rank[Br-λFr Ar-λEr] = nr for all finite and infinite λ (strong controllability)\n\n (2) rank[Ar-λEr; Cr-λGr] = nr for all finite and infinite λ (strong observability)\n\nThe achieved dimensional reductions to fulfill conditions (1) and (2) are  returned in nuc and nuo, respectively. \n\nIf contr = true, then the strong controllability condition (1) is enforced and W is an invertible upper triangular matrix or  W = I if nuc = 0. If contr = false, then the strong controllability condition (1) is not enforced and W = I. \n\nIf obs = true, then the strong observability condition (2) is enforced and V is an invertible upper triangular matrix or  V = I if nuo = 0.  If obs = false, then the strong observability condition (2) is not enforced and V = I.\n\nTo enforce conditions (1) and (2), orthogonal similarity transformations are performed on  the matrices of the original linearization (A-λE,B-λF,C-λG,D-λH) to obtain a strongly minimal linearization  using structured pencil reduction algorithms [1]. The resulting realization (Ar-λEr,Br-λFr,Cr-λGr,Dr-λHr) fulfills the strong controllability and strong observability conditions established in [2]. \n\nThe underlying pencil manipulation algorithms employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of matrices A, B, C, D, the absolute tolerance for the nonzero elements of E, F, G, H   and the relative tolerance for the nonzero elements of A, B, C, D and E, F, G, H. \n\n[1] F.M. Dopico, M.C. Quintana and P. Van Dooren, Linear system matrices of rational transfer functions,  to appear in \"Realization and Model Reduction of Dynamical Systems\", A Festschrift to honor the 70th birthday of Thanos Antoulas\",  Springer-Verlag. arXiv:1903.05016\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n\n\n\n\n","category":"function"},{"location":"lstools.html#MatrixPencils.lsequal","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lsequal","text":" lsequal(A1, E1, B1, C1, D1, A2, E2, B2, C2, D2; \n         fastrank = true, atol1 = 0, atol2 = 0, rtol = min(atol1,atol2)>0 ? 0 : n*ϵ) -> flag::Bool\n\nCheck if two descriptor system linearizations (A1-λE1,B1,C1,D1) and (A2-λE2,B2,C2,D2) satisfy the equivalence condition  \n\n            -1                      -1\n C1*(λE1-A1)  *B1 + D1 = C2*(λE2-A2)  *B2 + D2\n\nThe ckeck is performed by computing the normal rank n of the structured matrix pencil M - λN\n\n          | A1-λE1   0    |   B1  | \n          |   0    A2-λE2 |   B2  | \n M - λN = |---------------|-------|\n          |   C1     -C2  | D1-D2 |\n\nand verifying that n = n1+n2, where n1 and n2 are the orders of the square matrices A1 and A2, respectively.\n\nIf fastrank = true, the rank is evaluated by counting how many singular values of M - γ N have magnitude  greater than max(max(atol1,atol2), rtol*σ₁), where σ₁ is the largest singular value of M - γ N and  γ is a randomly generated value [1].  If fastrank = false, the rank is evaluated as nr + ni + nf + nl, where nr and nl are the sums  of right and left Kronecker indices, respectively, while ni and nf are the number of infinite and  finite eigenvalues, respectively. The sums nr+ni and  nf+nl, are determined from an  appropriate Kronecker-like form (KLF) exhibiting the spliting of the right and left structures  of the pencil M - λN. For efficiency purpose, the reduction to the relevant KLF is only partially performed  using rank decisions based on rank revealing SVD-decompositions. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N and the relative tolerance  for the nonzero elements of M and N. The default relative tolerance is k*ϵ, where k is the size of  the smallest dimension of M, and ϵ is the machine epsilon of the element type of M. \n\n[1] A. Varga, On checking null rank conditions of rational matrices, arXiv:1812.11396, 2018.\n\n\n\n\n\n","category":"function"},{"location":"lstools.html#MatrixPencils.lpsequal","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lpsequal","text":" lpsequal(A1, E1, B1, F1, C1, G1, D1, H1, \n          A2, E2, B2, F2, C2, G2, D2, H2; fastrank = true, atol1 = 0, atol2 = 0, rtol = min(atol1,atol2)>0 ? 0 : n*ϵ) \n          -> flag::Bool\n\nCheck if two pencil based linearizations (A1-λE1,B1-λF1,C1-λG1,D1-λH1) and (A2-λE2,B2-λF2,C2-λG2,D2-λH2)  satisfy the equivalence condition  \n\n                  -1                                      -1\n (C1-λG1)*(λE1-A1)  *(B1-λF1) + D1-λH1 = (C2-λG2)*(λE2-A2)  *(B2-λF2) + D2-λH2\n\nThe ckeck is performed by computing the normal rank n of the structured matrix pencil M - λN\n\n          | A1-λE1    0    |    B1-λF1      | \n          |   0     A2-λE2 |    B2-λF2      | \n M - λN = |----------------|----------------|\n          | C1-λG1 -C2+λG2 | D1-D2-λ(H1-H2) |\n\nand verifying that n = n1+n2, where n1 and n2 are the orders of the square matrices A1 and A2, respectively.\n\nIf fastrank = true, the rank is evaluated by counting how many singular values of M - γ N have magnitude  greater than max(max(atol1,atol2), rtol*σ₁), where σ₁ is the largest singular value of M - γ N and  γ is a randomly generated value [1].  If fastrank = false, the rank is evaluated as nr + ni + nf + nl, where nr and nl are the sums  of right and left Kronecker indices, respectively, while ni and nf are the number of infinite and  finite eigenvalues, respectively. The sums nr+ni and  nf+nl, are determined from an  appropriate Kronecker-like form (KLF) exhibiting the spliting of the right and left structures  of the pencil M - λN. For efficiency purpose, the reduction to the relevant KLF is only partially performed  using rank decisions based on rank revealing SVD-decompositions. \n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N. The default relative tolerance is k*ϵ, where k is the size of  the smallest dimension of M, and ϵ is the machine epsilon of the element type of M. \n\n[1] A. Varga, On checking null rank conditions of rational matrices, arXiv:1812.11396, 2018.\n\n\n\n\n\n","category":"function"},{"location":"lstools.html#MatrixPencils.lseval","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lseval","text":"lseval(A, E, B, C, D, val; atol1, atol2, rtol, fast = true) -> Gval\n\nEvaluate Gval, the value of the rational matrix G(λ) = C*inv(λE-A)*B+D for λ = val.  The computed Gval has infinite entries if val is a pole (finite or infinite) of G(λ). If val is finite and val*E-A is singular or if val = Inf and E is singular,  then the entries of Gval are evaluated separately for minimal realizations of each input-output channel.\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of matrices A, B, C, D, the absolute tolerance for the nonzero elements of E,   and the relative tolerance for the nonzero elements of A, B, C, D and E. \n\nThe computation of minimal realizations of individual input-output channels relies on pencil manipulation algorithms, which employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\n\n\n\n\n","category":"function"},{"location":"lstools.html#MatrixPencils.lpseval","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lpseval","text":"lpseval(A, E, B, F, C, G, D, H, val; atol1, atol2, rtol, fast = true) -> Gval\n\nEvaluate Gval, the value of the rational matrix G(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH for λ = val.  The computed Gval has infinite entries if val is a pole (finite or infinite) of G(λ). If val is finite and val*E-A is singular or val is infinite and E is singular,  then the entries of Gval are evaluated separately for each input-output chanel employing descriptor system based  minimal realizations.\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of matrices A, B, C, D, the absolute tolerance for the nonzero elements of E, F, G, H,   and the relative tolerance for the nonzero elements of A, B, C, D, E, F, G, and H. \n\nThe computation of minimal realizations of individual input-output chanels relies on pencil manipulation algorithms, which employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\n\n\n\n\n","category":"function"},{"location":"lstools.html#MatrixPencils.lps2ls","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lps2ls","text":" lps2ls(A, E, B, F, C, G, D, H; compacted = false, atol1 = 0, atol2 = 0, atol3 = 0, rtol = min(atol1,atol2,atol3)>0 ? 0 : n*ϵ) -> (Ad,Ed,Bd,Cd,Dd)\n\nConstruct an input-output equivalent descriptor system linearizations (Ad-λdE,Bd,Cd,Dd) to a pencil based linearization  (A-λE,B-λF,C-λG,D-λH) satisfying \n\n            -1                        -1\n Cd*(λEd-Ad)  *Bd + Dd = (C-λG)*(λE-A)  *(B-λF) + D-λH .\n\nIf compacted = true, a compacted linearization is determined by exploiting possible rank defficiencies of the matrices F, G, and H.  \n\nThe keyword arguments atol1, atol2, atol3, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of F, the absolute tolerance for the nonzero elements of G,  the absolute tolerance for the nonzero elements of H and the relative tolerance  for the nonzero elements of F, G and H. The default relative tolerance is n*ϵ, where n is the size of   A, and ϵ is the machine epsilon of the element type of A. \n\n\n\n\n\n","category":"function"},{"location":"lstools.html#MatrixPencils.lsbalqual","page":"Manipulation of linearizations of polynomial or rational matrices","title":"MatrixPencils.lsbalqual","text":"qs = lsbalqual(A, B, C; SysMat = false)\n\nCompute the 1-norm based scaling quality of a standard system triple (A,B,C).\n\nIf SysMat = false, the resulting qs is computed as \n\n    qs = max(qS(A),qS(B),qS(C)) ,\n\nwhere qS(⋅) is the scaling quality measure defined in Definition 5.5 of [1] for  nonnegative matrices. This definition has been extended to also cover matrices with zero rows or columns.  \n\nIf SysMat = true, the resulting qs is computed as \n\n    qs = qS(S) ,\n\nwhere S is the system matrix defined as        \n\n         S =  ( A  B )\n              ( C  0 )\n\nA large value of qs indicates a possible poorly scaled state-space model.   \n\n[1] F.M.Dopico, M.C.Quintana and P. van Dooren,      \"Diagonal scalings for the eigenstructure of arbitrary pencils\", SIMAX, 43:1213-1237, 2022. \n\n\n\n\n\nqs = lsbalqual(A, E, B, C; SysMat = false)\n\nCompute the 1-norm based scaling quality of a descriptor system triple (A-λE,B,C).\n\nIf SysMat = false, the resulting qs is computed as \n\n    qs = max(qS(A),qS(E),qS(B),qS(C)) ,\n\nwhere qS(⋅) is the scaling quality measure defined in Definition 5.5 of [1] for  nonnegative matrices. This definition has been extended to also cover matrices with zero rows or columns.  \n\nIf SysMat = true, the resulting qs is computed as \n\n    qs = qS(S) ,\n\nwhere S is the system matrix defined as        \n\n         S =  ( abs(A)+abs(E)  abs(B) )\n              (    abs(C)        0    )\n\nA large value of qs indicates a possible poorly scaled state-space model.   \n\n[1] F.M.Dopico, M.C.Quintana and P. van Dooren,      \"Diagonal scalings for the eigenstructure of arbitrary pencils\", SIMAX, 43:1213-1237, 2022. \n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#Some-applications-to-polynomial-matrices","page":"Some applications to polynomial matrices","title":"Some applications to polynomial matrices","text":"","category":"section"},{"location":"pmapps.html","page":"Some applications to polynomial matrices","title":"Some applications to polynomial matrices","text":"Function Description\npmkstruct Determination of the Kronecker and infinite zero-pole structure using companion form based linearizations\npmeigvals Computation of the finite and infinite eigenvalues using companion form based linearizations\npmzeros Computation of the finite and infinite zeros using companion form based linearizations\npmzeros1 Computation of the finite and infinite zeros using pencil based structured linearization\npmzeros2 Computation of the finite and infinite zeros using descriptor system based structured linearization\npmroots Computation of the roots of the determinant of a regular polynomial matrix\npmpoles Computation of the (infinite) poles using companion form based linearizations\npmpoles1 Computation of the (infinite) poles using pencil based structured linearization\npmpoles2 Computation of the (infinite) poles using descriptor system based structured linearization\npmrank Determination of the normal rank\nispmregular Checking the regularity of a polynomial matrix\nispmunimodular Checking the unimodularity of a polynomial matrix","category":"page"},{"location":"pmapps.html#MatrixPencils.pmkstruct","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmkstruct","text":"pmkstruct(P; CF1, grade=l, fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> KRInfo, iz, ip\n\nDetermine the Kronecker-structure and infinite pole-zero structure information of the polynomial matrix P(λ) and  return an KRInfo object and the multiplicities of infinite zeros and poles.  The computation of the Kronecker-structure employs strong linearizations of P(λ) in either  the first companion form, if CF1 = true, or the second companion form, if CF1 = false.  The effective grade l to be used for linearization can be specified via the keyword argument grade as  grade = l, where l must be chosen equal to or greater than the degree of P(λ).  The default value used for l is l = deg(P(λ)).\n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe information on the Kronecker-structure consists of the right Kronecker indices rki,  left Kronecker indices lki, infinite elementary divisors id, the number of finite eigenvalues nf and normal rank nrank and can be obtained from KRInfo as  KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  KRInfo. \n\nThe determination of the Kronecker-structure information is performed by building a companion  form linearization M-λN of P(λ) and reducing the pencil M-λN to an  appropriate Kronecker-like form (KLF) which exhibits the number of finite eigenvalues,  the multiplicities of the infinite eigenvalues,  the left and right Kronecker indices and the normal rank. The Kronecker-structure information and pole-zero stucture information on P(λ) are recovered from  the Kronecker-structure information on M-λN using the results of [1] and [2].\n\nThe right Kronecker indices are provided in the integer vector rki.  The number of elements of rki is the dimension of the right nullspace of the polynomial matrix P(λ)  and their sum is the least degree of a right polynomial nullspace basis. \n\nThe left Kronecker indices are provided in the integer vector lki.  The number of elements of lki is the dimension of the left nullspace of the polynomial matrix P(λ)  and their sum is the least degree of a left polynomial nullspace basis. \n\nThe multiplicities of infinite eigenvalues are provided in the integer vector id,  where each i-th element id[i] is the order of an infinite elementary divisor  (i.e., the multiplicity of an infinite eigenvalue).   \n\nThe multiplicities of the infinite zeros of P(λ) are returned in iz and represent  the positive differences between the multiplicities of  the infinite eigenvalues of P(λ) and the effective grade l of P(λ) [2]. \n\nThe multiplicities of the infinite poles of P(λ) are returned in ip and represent  the absolute values of the negative differences between the multiplicities of  the infinite eigenvalues of P(λ) and the effective grade l of P(λ) [2]. \n\nThe reduction to the KLF is performed using orthogonal similarity transformations and involves rank decisions based  on rank revealing QR-decompositions with column pivoting, if fast = true, or, the more reliable,  SVD-decompositions, if fast = false. \n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of P(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of P(λ), and ϵ is the  machine epsilon of the element type of coefficients of P(λ). \n\n[1] F. De Terán, F. M. Dopico, D. S. Mackey, Spectral equivalence of polynomial matrices and the Index Sum Theorem, Linear Algebra and Its Applications, vol. 459, pp. 264-333, 2014.\n\n[2] A. Varga, On computing the Kronecker structure of polynomial matrices using Julia, June 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.pmeigvals","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmeigvals","text":"pmeigvals(P; CF1, grade = l, fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, KRInfo)\n\nReturn the finite and infinite eigenvalues of the polynomial matrix P(λ) in val  and information on the Kronecker-structure of P(λ) in the KRInfo object.  The computation of eigenvalues and Kronecker-structure employs strong linearizations of P(λ) in either  the first companion form, if CF1 = true, or the second companion form, if CF1 = false.  The effective grade l to be used for linearization can be specified via the keyword argument grade as  grade = l, where l must be chosen equal to or greater than the degree of P(λ).\n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe information on the Kronecker-structure consists of the right Kronecker indices rki,  left Kronecker indices lki, infinite elementary divisors id, the number of finite eigenvalues nf and normal rank nrank and can be obtained from KRInfo as  KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively. For more details, see  KRInfo. \n\nThe computation of the eigenvalues is performed by building the companion form based linearization M-λN  of the polynomial matrix P(λ) and then reducing the pencil M-λN to an appropriate Kronecker-like form (KLF)  which exhibits the number of finite eigenvalues, the multiplicities of the infinite eigenvalues,  the left and right Kronecker indices and the normal rank.  The left and right Kronecker indices of P(λ) are returned in KRInfo.rki and KRInfo.rki, respectively, and  their values are recovered from the left and right Kronecker indices of M-λN using the results of [1]. The multiplicities of the infinite eigenvalues of P(λ) of effective grade l is returned in KRInfo.id.  The number of finite eigenvalues in val is equal to the number of finite eigenvalues of M-λN (returned in KRInfo.nf),  while the number of infinite eigenvalues in val is the sum of multiplicites returned in KRInfo.id. \n\nThe reduction of M-λN to the KLF is performed using orthonal similarity transformations and involves rank decisions  based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of P(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of P(λ), and ϵ is the  machine epsilon of the element type of coefficients of P(λ). \n\n[1] F. De Terán, F. M. Dopico, D. S. Mackey, Spectral equivalence of polynomial matrices and the Index Sum Theorem, Linear Algebra and Its Applications, vol. 459, pp. 264-333, 2014.\n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.pmzeros","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmzeros","text":"pmzeros(P; CF1, fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, iz, KRInfo)\n\nReturn the finite and infinite zeros of the polynomial matrix P(λ) in val,  the multiplicities of infinite zeros in iz and    information on the  Kronecker-structure of P(λ) in the KRInfo object.  The computation of zeros and Kronecker-structure employs strong linearizations of P(λ) in either  the first companion form, if CF1 = true, or the second companion form, if CF1 = false. \n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe information on the Kronecker-structure consists of the right Kronecker indices rki,  left Kronecker indices lki, infinite elementary divisors id, the number of finite eigenvalues nf, the normal rank nrank, and can be obtained from KRInfo as  KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  KRInfo. \n\nThe computation of the zeros is performed by building the companion form based linearization M-λN  of the polynomial matrix P(λ) and then reducing the pencil M-λN to an appropriate Kronecker-like form (KLF)  which exhibits information on its Kronecker structure.  The left and right Kronecker indices of P(λ) are returned in KRInfo.rki and KRInfo.rki, respectively, and  their values are recovered from the left and right Kronecker indices of M-λN using the results of [1]. The multiplicities of the infinite zeros of P(λ), returned in iz, are the positive differences between the multiplicities of  the infinite eigenvalues of M-λN and the degree of P(λ) [2].  The number of finite zeros in val is equal to the number of finite eigenvalues of M-λN (returned in KRInfo.nf),  while the number of infinite zeros in val is the sum of multiplicites in iz. \n\nThe reduction of M-λN to the KLF is performed using orthonal similarity transformations and involves rank decisions based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of P(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of P(λ), and ϵ is the  machine epsilon of the element type of coefficients of P(λ). \n\n[1] F. De Terán, F. M. Dopico, D. S. Mackey, Spectral equivalence of polynomial matrices and the Index Sum Theorem, Linear Algebra and Its Applications, vol. 459, pp. 264-333, 2014.\n\n[2] A. Varga, On computing the Kronecker structure of polynomial matrices using Julia, June 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.pmzeros1","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmzeros1","text":"pmzeros1(P; fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, iz, KRInfo)\n\nReturn the finite and infinite zeros of the polynomial matrix P(λ) in val,  the multiplicities of infinite zeros in iz and information on the   Kronecker-structure of the underlying strongly irreducible pencil based linearization of P(λ) in the KRInfo object.  \n\nThe information on the  Kronecker-structure of the underlying linearization consists of  the right Kronecker indices rki (the same as of P(λ)), left Kronecker indices lki (the same as of P(λ)),  infinite elementary divisors id, the number of finite eigenvalues nf (the same as of P(λ)) and the  normal rank 'nrank', and can be obtained from KRInfo as  KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  KRInfo. \n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe computation of the zeros is performed by first building a strongly irreducible pencil based  linearization of P(λ) [1] of order ν as a structured system matrix pencil \n\n          | A-λE | B-λF | \n M - λN = |------|------| ,\n          | C-λG | D-λH |\n\nsuch that P(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH, and then reducing the pencil M-λN to an  appropriate Kronecker-like form (KLF) which exhibits information on its Kronecker structure.  The left and right Kronecker indices of M-λN and P(λ) are the same [2] and are  returned in KRInfo.rki and KRInfo.rki, respectively. The multiplicities of the infinite zeros of M-λN and of P(λ) are the same [2] and are returned in iz. The number of finite zeros in val is equal to the number of finite eigenvalues of M-λN  (returned in KRInfo.nf), while the number of infinite zeros in val is the sum of multiplicites in iz.  The normal rank of P(λ) can be evaluated as KRInfo.nrank - ν. \n\nThe reduction of M-λN to the KLF is performed using orthonal similarity transformations and involves rank decisions based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of P(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of P(λ), and ϵ is the  machine epsilon of the element type of coefficients of P(λ). \n\n[1] F.M. Dopico, M.C. Quintana and P. Van Dooren, Linear system matrices of rational transfer functions, to appear in \"Realization and Model Reduction of Dynamical Systems\",  A Festschrift to honor the 70th birthday of Thanos Antoulas\", Springer-Verlag. arXiv:1903.05016\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.pmzeros2","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmzeros2","text":"  pmzeros2(P; fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, iz, KRInfo)\n\nReturn the finite and infinite zeros of the polynomial matrix P(λ) in val,  the multiplicities of infinite zeros in iz and information on the   Kronecker-structure of the underlying irreducible descriptor system based linearization of P(λ) in the KRInfo object. \n\nThe information on the  Kronecker-structure of the underlying linearization consists of  the right Kronecker indices rki (the same as of P(λ)), left Kronecker indices lki (the same as of P(λ)),  infinite elementary divisors id, the number of finite eigenvalues nf (the same as of P(λ)) and the  normal rank 'nrank', and can be obtained from KRInfo as  KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  KRInfo. \n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe computation of the zeros is performed by first building an irreducible descriptor system based  linearization of P(λ) [1] of order ν as a structured system matrix pencil \n\n          | A-λE | B | \n M - λN = |------|---| ,\n          |  C   | D |\n\nsuch that P(λ) = C*inv(λE-A)*B+D, and then reducing the pencil M-λN to an  appropriate Kronecker-like form (KLF) which exhibits information on its Kronecker structure.   The left and right Kronecker indices of M-λN and P(λ) are the same [2] and are  returned in KRInfo.rki and KRInfo.rki, respectively. The multiplicities of the infinite zeros of M-λN and of P(λ) are the same [2] and are returned in iz. The number of finite zeros in val is equal to the number of finite eigenvalues of M-λN  (returned in KRInfo.nf), while the number of infinite zeros in val is the sum of multiplicites in iz.  The normal rank of P(λ) can be evaluated as KRInfo.nrank - ν. \n\nThe reduction of M-λN to the KLF is performed using orthonal similarity transformations and involves rank decisions based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of P(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of P(λ), and ϵ is the  machine epsilon of the element type of coefficients of P(λ). \n\n[1] G. Verghese, B. Levy, and T. Kailath, Generalized state-space systems, IEEE Trans. Automat. Control, 26:811-831 (1981).\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.pmroots","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmroots","text":"pmroots(P; fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> val\n\nCompute the roots of the determinant of the regular polynomial matrix P(λ) in val. \n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe roots of det(P(λ)) are computed as the finite eigenvalues of a companion form linearization M-λNof P(λ). The finite eigenvalues are computed by reducing the pencil M-λN to an appropriate Kronecker-like form (KLF)  exhibiting the spliting of the infinite and finite eigenvalue structures of the pencil M-λN.  The reduction is performed using orthonal similarity transformations and involves rank decisions based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of P(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of P(λ), and ϵ is the  machine epsilon of the element type of coefficients of P(λ). \n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.pmpoles","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmpoles","text":"pmpoles(P; CF1, fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, ip, id)\n\nReturn the finite and infinite poles of the polynomial matrix P(λ) in val,  the multiplicities of infinite poles in ip and the infinite elementary divisors of   Q(λ) = [P(λ) I; I 0] in id.  The computation of pole-structure employs strong linearizations of Q(λ) in either  the first companion form, if CF1 = true, or the second companion form, if CF1 = false. \n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe information on the finite and infinite poles of the polynomial matrix P(λ) is obtained from the  Kronecker-structure information of the underlying linearization Q(λ) using the results of [1] and [2].  The computation of the poles is performed by building the companion form based linearization M-λN  of the extended polynomial matrix Q(λ) = [P(λ) I; I 0] (see [1]) and then reducing the pencil M-λN to an appropriate  Kronecker-like form (KLF) which exhibits information on its Kronecker structure.  Since Q(λ) is regular, M-λN has no left or right Kronecker indices. The multiplicities of the infinite poles of P(λ), returned in ip, are the positive differences between the multiplicities of  the infinite eigenvalues of M-λN and the degree of P(λ) [2].  The number of finite poles in val is equal to the number of finite eigenvalues of M-λN (returned in KRInfo.nf),  while the number of infinite poles in val is the sum of multiplicites in ip.  The multiplicities of the infinite eigenvalues of Q(λ) are returned in id.\n\nThe reduction of M-λN to the KLF is performed using orthonal similarity transformations and involves rank decisions  based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of P(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of P(λ), and ϵ is the  machine epsilon of the element type of coefficients of P(λ). \n\n[1] F. De Terán, F. M. Dopico, D. S. Mackey, Spectral equivalence of polynomial matrices and the Index Sum Theorem, Linear Algebra and Its Applications, vol. 459, pp. 264-333, 2014.\n\n[2] A. Varga, On computing the Kronecker structure of polynomial matrices using Julia, June 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.pmpoles1","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmpoles1","text":"pmpoles1(P; fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, ip, id)\n\nReturn the infinite poles of the polynomial matrix P(λ) in val, the multiplicities of infinite poles in ip and  the infinite elementary divisors of the pole pencil Sp(λ) of the underlying strongly irreducible  pencil based linearization of  Q(λ) := [P(λ) I; I 0] in id.\n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe information on the infinite poles of the polynomial matrix P(λ) is obtained from the  pole-structure information of the underlying pencil based linearization using the results of [1] and [2].  The determination of the pole-structure information is performed by building a strongly minimal  pencil based linearization (A-λE,B-λF,C-λG,D-λH) with A-λE a regular pencil,  satisfying P(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH and reducing the pole system matrix pencil  Sp(λ) = [A-λE -λF; -λG -λH] to an appropriate Kronecker-like form (KLF) which exhibits  the multiplicities of the infinite eigenvalues (in excess with one to the multiplicities of infinite poles of P(λ)). The multiplicities of the infinite zeros of Sp(λ) and of infinite poles of P(λ) are the same [2]  and are returned in ip. The number of infinite poles in val is equal to the sum of multiplicites in ip.  The multiplicities of the infinite eigenvalues of Sp(λ) are returned in id.\n\nThe reduction of Sp(λ) to the KLF is performed using orthonal similarity transformations and involves rank decisions  based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of P(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of P(λ), and ϵ is the  machine epsilon of the element type of coefficients of P(λ). \n\n[1] F.M. Dopico, M.C. Quintana and P. Van Dooren, Linear system matrices of rational transfer functions, to appear in \"Realization and Model Reduction of Dynamical Systems\",  A Festschrift to honor the 70th birthday of Thanos Antoulas\", Springer-Verlag. arXiv:1903.05016\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.pmpoles2","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmpoles2","text":"pmpoles2(P; fast = false, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> (val, ip, id)\n\nReturn the infinite poles of the polynomial matrix P(λ) in val,  the multiplicities of infinite poles in ip and the infinite elementary divisors of the pole pencil  of the underlying irreducible descriptor system based linearization of P(λ) in id.\n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.  \n\nThe information on the infinite poles of the polynomial matrix P(λ) is obtained from the  pole-structure information of the underlying linearization using the results of [1] and [2].  The determination of the pole-structure information is performed by building an irreducible  descriptor system realization (A-λE,B,C,D) with A-λE unimodular,  satisfying R(λ) = C*inv(λE-A)*B+D and reducing the pole pencil A-λE  to an appropriate Kronecker-like form (KLF) which exhibits  the multiplicities of the infinite eigenvalues (in excess with one to the multiplicities of infinite poles of P(λ)). The multiplicities of the infinite zeros of A-λE and of infinite poles of P(λ) are the same [2]  and are returned in ip. The number of infinite poles in val is equal to the sum of multiplicites in ip.  The multiplicities of the infinite eigenvalues of A-λE are returned in id.\n\nThe reduction of A-λE to the KLF is performed using orthonal similarity transformations and involves rank decisions  based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero  coefficients of P(λ),  respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of P(λ), and ϵ is the  machine epsilon of the element type of coefficients of P(λ). \n\n[1] G. Verghese, B. Levy, and T. Kailath, Generalized state-space systems, IEEE Trans. Automat. Control, 26:811-831 (1981).\n\n[2] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.\n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.pmrank","page":"Some applications to polynomial matrices","title":"MatrixPencils.pmrank","text":"   pmrank(P; fastrank = true, atol = 0, rtol = atol > 0 ? 0 : n*ϵ)\n\nDetermine the normal rank of a polynomial matrix P(λ). \n\nP(λ) is a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1), for which  the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). The normal rank of P(λ) is the number of linearly independent rows or columns. \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nIf fastrank = true, the rank is evaluated by counting how many singular values of P(γ) have magnitude greater  than max(atol, rtol*σ₁), where σ₁ is the largest singular value of P(γ) and γ is a randomly generated  complex value of magnitude equal to one.  If fastrank = false, first a structured linearization of P(λ) is built in the form [A-λE B; C D] with A-λE an order n regular subpencil, and then its normal rank nr is determined. The normal rank of P(λ) is nr - n.  \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of P(λ). The default relative tolerance is n*ϵ, where n is the size of the  smallest dimension of P(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.ispmregular","page":"Some applications to polynomial matrices","title":"MatrixPencils.ispmregular","text":"ispmregular(P; fastrank = true, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> Bool\n\nTest whether the polynomial matrix P(λ) is regular (i.e., P(λ) is square and smalldet(P(λ)) notequiv 0).  The underlying computational procedure checks that the normal rank of the square P(λ) is equal to its order.\n\nP(λ) is a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1), for which  the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.    f If fastrank = true, the rank is evaluated by counting how many singular values of P(γ) have magnitude greater  than max(atol, rtol*σ₁), where σ₁ is the largest singular value of P(γ) and γ is a randomly generated  complex value of magnitude equal to one.  If fastrank = false, first a linearization of P(λ) is built in a companion form M-λN of order n  and then its normal rank nr is determined. P(λ) is regular if nr = n.  \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of P(λ). The default relative tolerance is n*ϵ, where n is the size of the  smallest dimension of P(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\n\n\n\n\n","category":"function"},{"location":"pmapps.html#MatrixPencils.ispmunimodular","page":"Some applications to polynomial matrices","title":"MatrixPencils.ispmunimodular","text":"ispmunimodular(P; fastrank = true, atol::Real = 0, rtol::Real = atol>0 ? 0 : n*ϵ) -> Bool\n\nTest whether the polynomial matrix P(λ) is unimodular (i.e., P(λ) is square, regular and det(P(λ)) == constant). \n\nThe underlying computational procedure checks that P(λ) is square and its first companion form linearization  is regular and has no finite eigenvalues.\n\nP(λ) is a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1), for which  the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of P(λ). The default relative tolerance is n*ϵ, where n is the size of the  smallest dimension of P(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#Manipulation-of-polynomial-matrices","page":"Manipulation of polynomial matrices","title":"Manipulation of polynomial matrices","text":"","category":"section"},{"location":"pmtools.html","page":"Manipulation of polynomial matrices","title":"Manipulation of polynomial matrices","text":"Function Description\npoly2pm Conversion of a polynomial matrix used in Polynomials package to a polynomial matrix represented as a 3-dimensional matrix\npm2poly Conversion of a polynomial matrix represented as a 3-dimensional matrix to a polynomial matrix used in Polynomials package\npmdeg Determination of the degree of a polynomial matrix\npmeval Evaluation of a polynomial matrix for a given value of its argument.\npmreverse Building the reversal of a polynomial matrix\npmdivrem Quotients and remainders of elementwise divisions of two polynomial matrices\npm2lpCF1 Building a linearization in the first companion Frobenius form\npm2lpCF2 Building a linearization in the second companion Frobenius form\npm2ls Building a descriptor system based structured linearization [A-λE B; C D] of a polynomial matrix\nls2pm Computation of the polynomial matrix from its descriptor system based structured linearization\npm2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a polynomial matrix\nlps2pm Computation of the polynomial matrix from its pencil based structured linearization\nspm2ls Building a descriptor system based structured linearization [A-λE B; C D] of a structured polynomial matrix [T(λ) U(λ); V(λ) W(λ)]\nspm2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a structured polynomial matrix [T(λ) U(λ); V(λ) W(λ)]","category":"page"},{"location":"pmtools.html#MatrixPencils.poly2pm","page":"Manipulation of polynomial matrices","title":"MatrixPencils.poly2pm","text":"poly2pm(PM; grade = k) -> P\n\nBuild a grade k matrix polynomial representation P(λ) from a polynomial matrix, polynomial vector or scalar polynomial PM(λ). \n\nPM(λ) is a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nP(λ) is a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1), for which  the coefficient matrices P_l, l = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,l] contains the l-th coefficient matrix P_l (multiplying λ**(l-1)).  If grade = missing, then k is chosen the largest degree of the elements of PM. The coefficients of the degree d element (i,j) of PM(λ) result in P[i,j,1:d+1].\n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.pm2poly","page":"Manipulation of polynomial matrices","title":"MatrixPencils.pm2poly","text":"pm2poly(P[,var = 'x']) -> PM\n\nBuild the polynomial matrix PM(λ) from its matrix polynomial representation P(λ). \n\nP(λ) is a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1), for which  the coefficient matrices P_l, l = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,l] contains the l-th coefficient matrix P_l (multiplying λ**(l-1)). \n\nPM(λ) is a matrix of elements of the Polynomial type  provided by the Polynomials package.  The element (i,j) of PM(λ) is built from the coefficients contained in P[i,j,1:k+1]. The symbol to be used for the indeterminate λ can be specified in the optional input variable var. \n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.pmdeg","page":"Manipulation of polynomial matrices","title":"MatrixPencils.pmdeg","text":"pmdeg(P) -> deg\n\nDetermine the degree deg of a polynomial matrix P(λ). \n\nP(λ) is a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1), for which  the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)).  The degree of P(λ) is deg = j-1, where j is the largest index for which P[:,:,j] is nonzero. The degree of    the zero polynomial matrix is defined to be deg = -1.\n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.    The degree of P(λ) is the largest degree of the elements of P(λ).  The degree of the zero polynomial matrix is defined to be -1.\n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.pmeval","page":"Manipulation of polynomial matrices","title":"MatrixPencils.pmeval","text":"pmeval(P,val) -> R\n\nEvaluate R = P(val) for a polynomial matrix P(λ), using Horner's scheme. \n\nP(λ) is a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1), for which  the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.pmreverse","page":"Manipulation of polynomial matrices","title":"MatrixPencils.pmreverse","text":"pmreverse(P[,j]) -> Q\n\nBuild Q(λ) = λ^j*P(1/λ), the j-reversal of a polynomial matrix P(λ) for j ≥ deg(P(λ)).  If j is not specified, the default value j = deg(P(λ)) is used. \n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nIf deg(P(λ)), then Q(λ) is a grade j polynomial matrix of the form  Q(λ) = Q_1 + λ Q_2 + ... + λ**j Q_(j+1), for which  the coefficient matrices Q_i, i = 1, ..., j+1, are stored in the 3-dimensional matrix Q,  where Q[:,:,i] contains the i-th coefficient matrix Q_i (multiplying λ**(i-1)).  The coefficient matrix Q_i is either 0 if i ≤ j-d or Q_(j-d+i) = P_(d-i+1) for i = 1, ..., d.\n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.pmdivrem","page":"Manipulation of polynomial matrices","title":"MatrixPencils.pmdivrem","text":"pmdivrem(N,D) -> (Q, R)\n\nCompute the quotients in Q(λ) and remainders in R(λ) of the elementwise polynomial divisions N(λ)./D(λ). \n\nN(λ) is a polynomial matrix of the form N(λ) = N_1 + λ N_2 + ... + λ**k N_(k+1), for which   the coefficient matrices N_i, i = 1, ..., k+1 are stored in the 3-dimensional matrix N,  where N[:,:,i] contains the i-th coefficient matrix N_i (multiplying λ**(i-1)). \n\nD(λ) is a polynomial matrix of the form D(λ) = D_1 + λ D_2 + ... + λ**l D_(l+1), for which  the coefficient matrices D_i, i = 1, ..., l+1, are stored in the 3-dimensional matrix D,  where D[:,:,i] contain the i-th coefficient matrix D_i (multiplying λ**(i-1)). \n\nAlternatively, N(λ) and D(λ) can be specified as matrices of elements of the Polynomial type  provided by the Polynomials package. \n\nThe polynomial matrices of quotients Q(λ) and remainders R(λ) are stored in the 3-dimensional  matrices Q and  R, respectively, where Q[:,:,i] and R[:,:,i] contain the i-th  coefficient matrix multiplying λ**(i-1). \n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.pm2lpCF1","page":"Manipulation of polynomial matrices","title":"MatrixPencils.pm2lpCF1","text":" pm2lpCF1(P; grade = l) -> (M, N)\n\nBuild a strong linearization M - λN of a polynomial matrix P(λ) in the first companion Frobenius form. \n\nP(λ) is a grade k polynomial matrix assumed of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1), with  the coefficient matrices P_i, i = 1, ..., k+1 stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)).  The effective grade l to be used for linearization can be specified via the keyword argument grade as  grade = l, where l must be chosen equal to or greater than the degree of P(λ). The default value used for l is l = deg(P(λ)).\n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nIf P(λ) is a m x n polynomial matrix of effective grade l and degree d,  then the resulting matrix pencil M - λN satisfies the following conditions [1]:\n\n(1) M - λN has dimension (m+n*(l-1)) x n*l and M - λN is regular if P(λ) is regular;\n\n(2) M - λN and P(λ) have the same finite eigenvalues;\n\n(3) the partial multiplicities of infinite eigenvalues of M - λN are in excess with l-d to the partial multiplicities of the infinite eigenvalues of P(λ);\n\n(4) M - λN and P(λ) have the same number of right Kronecker indices and the right Kronecker indices of M - λN are in excess with l-1 to the right Kronecker indices of P(λ);\n\n(5) M - λN and P(λ) have the same left Kronecker structure (i.e., the same left Kronecker indices).\n\n[1] F. De Terán, F. M. Dopico, D. S. Mackey, Spectral equivalence of polynomial matrices and the Index Sum Theorem, Linear Algebra and Its Applications, vol. 459, pp. 264-333, 2014.\n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.pm2lpCF2","page":"Manipulation of polynomial matrices","title":"MatrixPencils.pm2lpCF2","text":"pm2lpCF2(P; grade = l) -> (M, N)\n\nBuild a strong linearization M - λN of a polynomial matrix P(λ) in the second companion Frobenius form. \n\nP(λ) is a grade k polynomial matrix assumed of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1), with  the coefficient matrices P_i, i = 1, ..., k+1 stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). The effective grade l to be used for linearization can be specified via the keyword argument grade as  grade = l, where l must be chosen equal to or greater than the degree of P(λ).  The default value used for l is l = deg(P(λ)).\n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nIf P(λ) is a m x n polynomial matrix of effective grade l and degree d, then the resulting matrix pencil  M - λN satisfies the following conditions [1]:\n\n(1) M - λN has dimension l*m x (n+(l-1)*m) and M - λN is regular if P(λ) is regular;\n\n(2) M - λN and P(λ) have the same finite eigenvalues;\n\n(3) the partial multiplicities of infinite eigenvalues of M - λN are in excess with l-d to the partial multiplicities of the infinite eigenvalues of P(λ);\n\n(4) M - λN and P(λ) have the same right Kronecker structure (i.e., the same right Kronecker indices);\n\n(5) M - λN and P(λ) have the same number of left Kronecker indices and the left Kronecker indices of M - λN are in excess with l-1 to the left Kronecker indices of P(λ).\n\n[1] F. De Terán, F. M. Dopico, D. S. Mackey, Spectral equivalence of polynomial matrices and the Index Sum Theorem, Linear Algebra and Its Applications, vol. 459, pp. 264-333, 2014.\n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.pm2ls","page":"Manipulation of polynomial matrices","title":"MatrixPencils.pm2ls","text":" pm2ls(P; contr = false, obs = false, noseig = false, minimal = false,\n          fast = true, atol = 0, rtol) -> (A, E, B, C, D)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n        | A-λE | B | \n S(λ) = |------|---|\n        |  C   | D |\n\nof the polynomial matrix P(λ) which preserves a part of the Kronecker structure of P(λ). \n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nIf d is the degree of P(λ) and n is the order of A-λE, then the computed linearization satisfies:\n\n(1) A-λE is regular and P(λ) = C*inv(λE-A)*B+D;\n\n(2) rank[B A-λE] = n (controllability) if minimal = true or contr = true, in which case  the right Kronecker structure is preserved;\n\n(3) rank[A-λE; C] = n (observability)  if minimal = true or contr = true, in which case  the left Kronecker structure is preserved;\n\n(4) A-λE has no non-dynamic modes if minimal = true or noseig = true. \n\nIf conditions (1)-(4) are satisfied, the linearization is called minimal and the resulting order n is the least achievable order. If conditions (1)-(3) are satisfied, the linearization is called irreducible  and the resulting order n is the least achievable order using orthogonal similarity transformations. For an irreducible linearization S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of P(λ). \n\nThe underlying pencil manipulation algorithms [1] and [2] to compute reduced order linearizations  employ rank determinations based on either the use of  rank revealing QR-decomposition with column pivoting, if fast = true, or the SVD-decomposition, if fast = false. The rank decision based on the SVD-decomposition is generally more reliable, but the involved computational effort is higher.\n\nThe keyword arguments atol and rtol, specify the absolute and relative tolerances for the  nonzero coefficients of P(λ), respectively.\n\n[1] P. Van Dooreen, The generalized eigenstructure problem in linear system theory,  IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.\n\n[2] A. Varga, Solving Fault Diagnosis Problems - Linear Synthesis Techniques, Springer Verlag, 2017. \n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.pm2lps","page":"Manipulation of polynomial matrices","title":"MatrixPencils.pm2lps","text":" pm2lps(P; contr = false, obs = false) -> (A, E, B, F, C, G, D, H)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n        | A-λE | B-λF | \n S(λ) = |------|------|\n        | C-λG | D-λH |\n\nof the polynomial matrix P(λ) which preserves a part of the Kronecker structure of P(λ). \n\nP(λ) can be specified as a grade k polynomial matrix of the form P(λ) = P_1 + λ P_2 + ... + λ**k P_(k+1),  for which the coefficient matrices P_i, i = 1, ..., k+1, are stored in the 3-dimensional matrix P,  where P[:,:,i] contains the i-th coefficient matrix P_i (multiplying λ**(i-1)). \n\nP(λ) can also be specified as a matrix, vector or scalar of elements of the Polynomial type  provided by the Polynomials package.   \n\nIf d is the degree of the p x m polynomial matrix P(λ), then the computed linearization satisfies:\n\n(1) A-λE is a n x n regular pencil, where n = p(d-1) if contr = false and p <= m and n = m(d-1) otherwise; \n\n(2) P(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH;\n\n(3) rank[B-λF A-λE] = n for any finite and infinite λ (strong controllability) if contr = true, in which case  the right Kronecker structure is preserved;\n\n(4) rank[A-λE; C-λG] = n for any finite and infinite λ (strong observability)  if obs = true, in which case  the left Kronecker structure is preserved. \n\nIf conditions (1)-(4) are satisfied, the linearization is called strongly minimal, the resulting order n is the least achievable order and S(λ) preserves the pole-zero structure (finite and infinite) and the  left and right Kronecker structures of P(λ). \n\nThe pencil based linearization is built using the methods described in [1].\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.spm2ls","page":"Manipulation of polynomial matrices","title":"MatrixPencils.spm2ls","text":" spm2ls(T, U, V, W; fast = true, contr = false, obs = false, minimal = false, atol = 0, rtol) -> (A, E, B, C, D)\n\nBuild a structured linearization as a system matrix S(λ) of the form\n\n        | A-λE | B | \n S(λ) = |------|---|\n        |  C   | D |\n\nof the structured polynomial matrix \n\n          | -T(λ) | U(λ) |\n   P(λ) = |-------|------|\n          | V(λ)  | W(λ) |\n\nsuch that V(λ)*inv(T(λ))*U(λ)+W(λ) = C*inv(λE-A)*B+D. The resulting linearization S(λ) preserves a part,  if minimal = false, or the complete Kronecker structure, if minimal = true, of P(λ). In the latter case,  the order n of A-λE is the least possible one and S(λ) is a strong linearization of P(λ).\n\nT(λ), U(λ), V(λ), and W(λ) can be specified as polynomial matrices of the form X(λ) = X_1 + λ X_2 + ... + λ**k X_(k+1),  for X = T, U, V, and W, for which the coefficient matrices X_i, i = 1, ..., k+1, are stored in  the 3-dimensional matrices X, where X[:,:,i] contains the i-th coefficient matrix X_i (multiplying λ**(i-1)). \n\nT(λ), U(λ), V(λ), and W(λ) can also be specified as matrices, vectors or scalars of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe computed structured linearization satisfies:\n\n(1) A-λE is regular;\n\n(2) rank[B A-λE] = n (controllability) if minimal = true or contr = true, in which case  the finite and right Kronecker structures are preserved;\n\n(3) rank[A-λE; C] = n (observability)  if minimal = true or obs = true, in which case  the finite and left Kronecker structures are preserved;\n\n(4) A-λE has no simple infinite eigenvalues if minimal = true, in which case the complete Kronecker structure is preserved. \n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of the matrices T(λ), U(λ), V(λ) and W(λ). The default relative tolerance is nt*ϵ,  where nt is the size of the square matrix T(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\nThe structured linearization is built using the methods described in [1].\n\n[1] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020,  arXiv:2006.06825.\n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.spm2lps","page":"Manipulation of polynomial matrices","title":"MatrixPencils.spm2lps","text":" spm2lps(T, U, V, W; fast = true, contr = false, obs = false, minimal = false, atol = 0, rtol) -> (A, E, B, F, C, G, D, H)\n\nBuild a structured linearization \n\n          | A-λE | B-λF | \n M - λN = |------|------|\n          | C-λG | D-λH |\n\nof the structured polynomial matrix \n\n          | -T(λ) | U(λ) |\n   P(λ) = |-------|------|\n          |  V(λ) | W(λ) |\n\nsuch that V(λ)*inv(T(λ))*U(λ)+W(λ) = (C-λG))*inv(λE-A)*(B-λF)+D-λH. The resulting linearization M - λN preserves a part,  if minimal = false, or the complete Kronecker structure, if minimal = true, of P(λ). In the latter case,  the order n of A-λE is the least possible one and M - λN is a strong linearization of P(λ).\n\nT(λ), U(λ), V(λ), and W(λ) can be specified as polynomial matrices of the form X(λ) = X_1 + λ X_2 + ... + λ**k X_(k+1),  for X = T, U, V, and W, for which the coefficient matrices X_i, i = 1, ..., k+1, are stored in  the 3-dimensional matrices X, where X[:,:,i] contains the i-th coefficient matrix X_i (multiplying λ**(i-1)). \n\nT(λ), U(λ), V(λ), and W(λ) can also be specified as matrices, vectors or scalars of elements of the Polynomial type  provided by the Polynomials package.   \n\nThe computed structured linearization satisfies:\n\n(1) A-λE is regular;\n\n(2) rank[B-λF A-λE] = n (strong controllability) if minimal = true or contr = true, in which case  the finite and right Kronecker structures are preserved;\n\n(3) rank[A-λE; C-λG] = n (strong observability)  if minimal = true or obs = true, in which case  the finite and left Kronecker structures are preserved.\n\nThe keyword arguments atol and rtol, specify, respectively, the absolute and relative tolerance for the  nonzero coefficients of the matrices T(λ), U(λ), V(λ) and W(λ). The default relative tolerance is nt*ϵ,  where nt is the size of the square matrix T(λ) and ϵ is the machine epsilon of the element type of its coefficients. \n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.ls2pm","page":"Manipulation of polynomial matrices","title":"MatrixPencils.ls2pm","text":"ls2pm(A, E, B, C, D; fast = true, atol1 = 0, atol2 = 0, gaintol = 0, rtol = min(atol1,atol2) > 0 ? 0 : n*ϵ, val) -> P\n\nBuild the polynomial matrix P(λ) = C*inv(λE-A)*B+D corresponding to its structured linearization \n\n | A-λE | B | \n |------|---|\n |  C   | D |\n\nby explicitly determining for each polynomial entry, its coefficients from its roots and a corresponding gain. \n\nThe keyword arguments atol1 and atol2 specify the absolute tolerances for the elements of A, B, C, D, and,   respectively, of E, and rtol specifies the relative tolerances for the nonzero elements of A, B, C, D and E. The default relative tolerance is (n+1)*ϵ, where n is the size of the size dimension of A, and ϵ is the  machine epsilon of the element type of coefficients of A. \n\nThe keyword argument gaintol specifies the threshold for the magnitude of the nonzero elements of the gain matrix  C*inv(γE-A)*B+D, where γ = val if val is a number or γ is a randomly chosen complex value of unit magnitude,  if val = missing. Generally, val should not be a root of any of entries of P.\n\n\n\n\n\n","category":"function"},{"location":"pmtools.html#MatrixPencils.lps2pm","page":"Manipulation of polynomial matrices","title":"MatrixPencils.lps2pm","text":"lps2pm(A, E, B, F, C, G, D, H; fast = true, atol1 = 0, atol2 = 0, gaintol = 0, rtol = min(atol1,atol2) > 0 ? 0 : n*ϵ, val) -> P\n\nBuild the polynomial matrix P(λ) = (C-λG)*inv(λE-A)*(B-λF)+D-λH corresponding to its structured linearization \n\n | A-λE | B-λF | \n |------|------|\n | C-λG | D-λH |\n\nby explicitly determining for each polynomial entry, its coefficients from its roots and corresponding gain. \n\nThe keyword arguments atol1 and atol2 specify the absolute tolerances for the elements of A, B, C, D, and of   E, F, G, H, respectively,  and rtol specifies the relative tolerances for the nonzero elements of  A, B, C, D, E, F,G,H.  The default relative tolerance is(n+2)*ϵ, wherenis the size of the size dimension ofA, andϵis the  machine epsilon of the element type of coefficients ofA`. \n\nThe keyword argument gaintol specifies the threshold for the magnitude of the nonzero elements of the gain matrix  C*inv(γE-A)*B+D, where γ = val if val is a number or γ is a randomly chosen complex value of unit magnitude,  if val = missing. Generally, val should not be a root of any of entries of P. \n\n\n\n\n\n","category":"function"},{"location":"index.html#MatrixPencils.jl","page":"Home","title":"MatrixPencils.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: DocBuild) (Image: Code on Github.)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The Kronecker-canonical form of a matrix pencil M − λN basically characterizes the right and left singular structure and the eigenvalue structure of the pencil. The computation of the Kronecker-canonical form may involve the use of ill-conditioned similarity transformations and, therefore, is potentially numerically unstable. Fortunately, alternative staircase forms, called Kronecker-like forms (KLFs), allow to obtain basically the same (or only a part of) structural information on the pencil M − λN by employing exclusively orthogonal similarity transformations. Various KLFs can serve to address, in a numerically reliable way, the main applications of the Kronecker form, such as the computation of minimal left or right nullspace bases, the computation of eigenvalues and zeros, the determination of the normal rank of polynomial and rational matrices, computation of various factorizations of rational matrices, as well as the solution of linear equations with polynomial or rational matrices.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This collection of Julia functions is an attemp to implement high performance numerical software to compute a range of KLFs which reveal the full or partial Kronecker structure of a matrix pencil. The KLFs are computed by performing several pencil reduction operations on a reduced basic form of the initial pencil. These operations efficiently compress the rows or columns of certain submatrices to full rank matrices and simultaneously maintain the reduced basic form. The rank decisions involve the use of rank revealing QR-decompositions with colum pivoting or the, more reliable, SVD-decompositions. The overall computational complexity of all reduction algorithms is O(n^3), where n is the largest dimension of the pencil.  ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The implemented basic pencil reduction operations are described in [1] and [2], and form the basis of the implemented PREDUCE procedure described in [3].","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A set of functions is provided to address pencil manipulation problems for structured matrix pencils M − λN of the forms [A - λE B; C D] or [A-λE B-λF; C-λG D-λH]. Matrix pencils with these structure frequently arise from the linearization of polynomial or rational matrices. The computation of least order linearizations is based on algorithms described in [3]-[9].  ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A set of functions is available for the manipulation of polynomial matrices specified via their coefficient matrices in a monomial basis. All funtions also support matrix, vector or scalar of elements of the Polynomial type provided by the Polynomials package. Several linearization functions are available which allow the extension of pencil manipulation techniques to matrix polynomials. Some straightforward applications are covered such as the computation of finite and infinite eigenvalues, zeros and poles, the determination of the normal rank, the determination of Kronecker indices and finite and infinite eigenvalue structure, checks of regularity and unimodularity. The implementations follow the computational framework and results developed in [10] and are described in [11].","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Balancing techniques for matrix pencils can significantly enhance the reliability of computations and improve the accuracy of computed eigenvalues and zeros. Balancing approaches relying on the Sinkhorn-Knopp algorithm have been proposed in [15] and served as basis for several functions for balancing matrix pencils.  ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The available functions in the MatrixPencils.jl package cover both real and complex numerical data. The current version of the package includes the following functions:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Manipulation of general matrix pencils","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\npbalance! Balancing arbitrary matrix pencils.\npbalqual Evaluation of the balancing quality of a matrix pencils.\npreduceBF Reduction to the basic condensed form  [B A-λE; D C] with E upper triangular and nonsingular.\nklf Computation of the Kronecker-like form exhibiting the full Kronecker structure\nklf_right Computation of the Kronecker-like form exhibiting the right and finite Kronecker structures\nklf_rightinf Computation of the Kronecker-like form exhibiting the right and infinite Kronecker structures\nklf_left Computation of the Kronecker-like form exhibiting the left and finite Kronecker structures\nklf_leftinf Computation of the Kronecker-like form exhibiting the left and infinite Kronecker structures\nklf_rlsplit Computation of the Kronecker-like form exhibiting the separation of right and left Kronecker structures","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Manipulation of structured matrix pencils of the form [A-λE B; C D]","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\nsreduceBF Reduction to the basic condensed form  [B A-λE; D C] with E upper triangular and nonsingular.\nsklf Computation of the Kronecker-like form exhibiting the full Kronecker structure\nsklf_right Computation of the Kronecker-like form exhibiting the right Kronecker structure\nsklf_left Computation of the Kronecker-like form exhibiting the left Kronecker structure\ngsklf Computation of several row partition preserving special Kronecker-like forms","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Manipulation of regular matrix pencils","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\nregbalance! Balancing regular matrix pencils\nisregular Checking the regularity of a pencil\nisunimodular Checking the unimodularity of a pencil\nfisplit Finite-infinite eigenvalue splitting\nsfisplit Special finite-infinite eigenvalue splitting\nfihess Finite-infinite eigenvalue splitting in a generalized Hessenberg form\nfischur Finite-infinite eigenvalue splitting in a generalized Schur form\nfischursep Finite-infinite eigenvalue splitting in an ordered generalized Schur form\nsfischursep Special finite-infinite eigenvalue splitting in an ordered generalized Schur form\nfiblkdiag Finite-infinite eigenvalue splitting based block diagonalization\ngsblkdiag Finite-infinite and stable-unstable eigenvalue splitting based block diagonalization\nssblkdiag Stable-unstable eigenvalue splitting based block diagonalization\nsaloc Spectrum alocation for the pairs (A,B) and (A-λE,B)\nsalocd Spectrum alocation for the dual pairs (A,C) and (A-λE,C)\nsalocinf Infinite spectrum alocation for the pair (A-λE,B)\nsalocinfd Infinite spectrum alocation for the dual pair (A-λE,C)\nordeigvals Order-preserving computation of eigenvalues of a Schur matrix or a generalized Schur pair.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Some applications of matrix pencil computations","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\npkstruct Determination of the complete Kronecker structure\nprank Determination of the normal rank\npeigvals Computation of the finite and infinite eigenvalues\npzeros Computation of the finite and infinite zeros","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Some applications to structured matrix pencils of the form [A-λE B; C D]","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\nspkstruct Determination of the complete Kronecker structure\nsprank Determination of the normal rank\nspeigvals Computation of the finite and infinite eigenvalues\nspzeros Computation of the finite and infinite zeros","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Manipulation of linearizations of polynomial or rational matrices","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\nlsbalance! Scaling of a descriptor system based linearization\nlsbalqual Evaluation of the scaling quality of descriptor system based linearizations\nlsminreal Computation of irreducible descriptor system based linearizations\nlsminreal2 Computation of irreducible descriptor system based linearizations (potentially more efficient)\nlpsminreal Computation of strongly minimal pencil based linearizations\nlsequal Checking the equivalence of two descriptor system based linearizations\nlpsequal Checking the equivalence of two pencil based linearizations\nlseval Evaluation of the value of the rational matrix corresponding to a descriptor system based linearization\nlpseval Evaluation of the value of the rational matrix corresponding to a pencil based linearization\nlps2ls Conversion of a pencil based linearization into a descriptor system based linearization","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Manipulation of polynomial matrices ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\npoly2pm Conversion of a polynomial matrix used in Polynomials package to a polynomial matrix represented as a 3-dimensional matrix\npm2poly Conversion of a polynomial matrix represented as a 3-dimensional matrix to a polynomial matrix used in Polynomials package\npmdeg Determination of the degree of a polynomial matrix\npmeval Evaluation of a polynomial matrix for a given value of its argument.\npmreverse Building the reversal of a polynomial matrix\npmdivrem Quotients and remainders of elementwise divisions of two polynomial matrices\npm2lpCF1 Building a linearization in the first companion Frobenius form\npm2lpCF2 Building a linearization in the second companion Frobenius form\npm2ls Building a descriptor system based structured linearization [A-λE B; C D] of a polynomial matrix\nls2pm Computation of the polynomial matrix from its descriptor system based structured linearization\npm2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a polynomial matrix\nlps2pm Computation of the polynomial matrix from its pencil based structured linearization\nspm2ls Building a descriptor system based structured linearization [A-λE B; C D] of a structured polynomial matrix [T(λ) U(λ); V(λ) W(λ)]\nspm2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a structured polynomial matrix [T(λ) U(λ); V(λ) W(λ)]","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Some applications to polynomial matrices ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\npmkstruct Determination of the Kronecker and infinite zero-pole structure using companion form based linearizations\npmeigvals Computation of the finite and infinite eigenvalues using companion form based linearizations\npmzeros Computation of the finite and infinite zeros using companion form based linearizations\npmzeros1 Computation of the finite and infinite zeros using pencil based structured linearization\npmzeros2 Computation of the finite and infinite zeros using descriptor system based structured linearization\npmroots Computation of the roots of the determinant of a regular polynomial matrix\npmpoles Computation of the (infinite) poles using companion form based linearizations\npmpoles1 Computation of the (infinite) poles using pencil based structured linearization\npmpoles2 Computation of the (infinite) poles using descriptor system based structured linearization\npmrank Determination of the normal rank\nispmregular Checking the regularity of a polynomial matrix\nispmunimodular Checking the unimodularity of a polynomial matrix","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Manipulation of rational matrices ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\nrm2lspm Representation of a rational matrix as a linearization of its strictly proper part plus its polynomial part\nrmeval Evaluation of a rational matrix for a given value of its argument.\nrm2ls Building a descriptor system based structured linearization [A-λE B; C D] of a rational matrix\nls2rm Computation of the rational matrix from its descriptor system based structured linearization\nrm2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a rational matrix\nlps2rm Computation of the rational matrix from its pencil based structured linearization\nlpmfd2ls Building a descriptor system based structured linearization [A-λE B; C D] of a left polynomial matrix fractional description\nrpmfd2ls Building a descriptor system based structured linearization [A-λE B; C D] of a right polynomial matrix fractional description\nlpmfd2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a left polynomial matrix fractional description\nrpmfd2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of a right polynomial matrix fractional description\npminv2ls Building a descriptor system based structured linearization [A-λE B; C D] of the inverse of a polynomial matrix\npminv2lps Building a pencil based structured linearization [A-λE B-λF; C-λG D-λH] of the inverse of a polynomial matrix","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Some applications to rational matrices ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Function Description\nrmkstruct Determination of the Kronecker and infinite zero-pole structure using descriptor system based structured linearization\nrmzeros Computation of the finite and infinite zeros using descriptor system based structured linearization\nrmzeros1 Computation of the finite and infinite zeros using pencil based structured linearization\nrmpoles Computation of the finite and infinite poles using descriptor system based structured linearization\nrmpoles1 Computation of the finiet and infinite poles using pencil based structured linearization\nrmrank Determination of the normal rank","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A complete list of implemented functions is available here.","category":"page"},{"location":"index.html#Future-plans","page":"Home","title":"Future plans","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Functional enhancements of some functions will be performed if the need arises.","category":"page"},{"location":"index.html#[Release-Notes](https://github.com/andreasvarga/MatrixPencils.jl/blob/master/ReleaseNotes.md)","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Andreas Varga","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"License: MIT (expat)","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"[1]   C. Oara and P. Van Dooren. An improved algorithm for the computation of structural invariants of a system pencil and related geometric aspects. Syst. Control Lett., 30:39–48, 1997.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[2]   A. Varga. Computation of irreducible generalized state-space realizations. Kybernetika, 26:89–106, 1990.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[3]   A. Varga, Solving Fault Diagnosis Problems – Linear Synthesis Techniques, Vol. 84 of Studies in Systems, Decision and Control, Springer International Publishing, 2017.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[4] P. Van Dooreen, The generalized eigenstructure problem in linear system theory, IEEE Transactions on Automatic Control, vol. AC-26, pp. 111-129, 1981.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[5] P. Van Dooren and P. Dewilde, The eigenstructure of an arbitrary polynomial matrix: computational aspects, Linear Algebra Appl., 50 (1983), pp. 545–579.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[6] F.M. Dopico, M.C. Quintana and P. Van Dooren, Linear system matrices of rational transfer functions, to appear in \"Realization and Model Reduction of Dynamical Systems\", A Festschrift to honor the 70th birthday of Thanos Antoulas\", Springer-Verlag. arXiv: 1903.05016","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[7] G. Verghese, B. Lévy, and T. Kailath, A generalized state-space for singular systems, IEEE Trans. Automat. Control, 26 (1981), pp. 811–831.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[8] G. Verghese, P. Van Dooren, and T. Kailath, Properties of the system matrix of a generalized state- space system, Int. J. Control, 30 (1979), pp. 235–243.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[9] G. Verghese, Comments on ‘Properties of the system matrix of a generalized state-space system’, Int. J. Control, Vol.31(5) (1980) 1007–1009.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[10] F. De Terán, F. M. Dopico, D. S. Mackey, Spectral equivalence of polynomial matrices and the Index Sum Theorem, Linear Algebra and Its Applications, vol. 459, pp. 264-333, 2014.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[11] A. Varga, On computing the Kronecker structure of polynomial and rational matrices using Julia, 2020, arXiv:2006.06825.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[12] A. Varga. A Schur method for pole assignment. IEEE Trans. on Automatic Control, vol. 26, pp. 517-519, 1981.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[13] A. Varga. On stabilization methods of descriptor systems. Systems & Control Letters, vol. 24, pp.133-138, 1995.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[14] B. Kågström and P. Van Dooren. Additive decomposition of a transfer function with respect to a specified region. In M. A. Kaashoek, J. H. van Schuppen, and A. C. M. Ran (Eds.), Signal Processing, Scattering and Operator Theory, and Numerical Methods, Proc. of MTNS 1989, Amsterdam, The Netherlands, vol. 3, pp. 469–477. Birhhäuser, Boston, 1990.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[15] F.M.Dopico, M.C.Quintana and P. van Dooren, \"Diagonal scalings for the eigenstructure of arbitrary pencils\", SIMAX, 43:1213-1237, 2022. ","category":"page"},{"location":"klfapps.html#Some-applications-of-matrix-pencil-computations","page":"Some applications of matrix pencil computations","title":"Some applications of matrix pencil computations","text":"","category":"section"},{"location":"klfapps.html","page":"Some applications of matrix pencil computations","title":"Some applications of matrix pencil computations","text":"Function Description\npkstruct Determination of the complete Kronecker structure\nprank Determination of the normal rank\npeigvals Computation of the finite and infinite eigenvalues\npzeros Computation of the finite and infinite zeros","category":"page"},{"location":"klfapps.html#MatrixPencils.KRInfo","page":"Some applications of matrix pencil computations","title":"MatrixPencils.KRInfo","text":"KRInfo\n\nKronecker-structure object definition. \n\nIf info::KRInfo is the Kronecker-structure object, then:\n\ninfo.rki is a vector whose components contains the right Kronecker indices;\n\ninfo.lki is a vector whose components contains the left Kronecker indices;\n\ninfo.id is a vector whose components contains the orders of the infinite elementary divisors (i.e., the multiplicities of infinite eigenvalues). \n\ninfo.nf is the number of finite eigenvalues.\n\ninfo.nrank is the normal rank.\n\nDestructuring via iteration produces the components info.rki, info.lki, info.id, info.nf and info.nrank.\n\n\n\n\n\n","category":"type"},{"location":"klfapps.html#MatrixPencils.pkstruct","page":"Some applications of matrix pencil computations","title":"MatrixPencils.pkstruct","text":"pkstruct(M, N; fast = false, atol1::Real = 0, atol2::Real = 0, rtol::Real=min(atol1,atol2)>0 ? 0 : n*ϵ) -> KRInfo\n\nDetermine the Kronecker-structure information of the matrix pencil M-λN and return an KRInfo object. \n\nThe right Kronecker indices rki, left Kronecker indices lki, infinite elementary divisors id, the number of finite eigenvalues nf and the normal rank nrank can be obtained from  KRInfo as KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.   The determination of the Kronecker-structure information is performed by reducing the pencil M-λN to an  appropriate Kronecker-like form (KLF) exhibiting all structural elements of the pencil M-λN. The reduction is performed using orthogonal similarity transformations and involves rank decisions based  on rank revealing QR-decompositions with column pivoting, if fast = true, or, the more reliable,  SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations. \n\nThe right Kronecker indices are provided in the integer vector rki, where each i-th element rki[i] is  the row dimension k of an elementary Kronecker block of size k x (k+1).  The number of elements of rki is the dimension of  the right nullspace of the pencil M-λN and their sum is the degree of a right minimal polynomial nullspace basis. \n\nThe left Kronecker indices are provided in the integer vector lki, where each i-th element lki[i] is  the column dimension k of an elementary Kronecker block of size (k+1) x k.  The number of elements of lki is the dimension of  the left nullspace of the pencil M-λN and their sum is the degree of a left minimal polynomial nullspace basis. \n\nThe multiplicities of infinite eigenvalues are provided in the integer vector id, where each i-th element id[i] is the order of an infinite elementary divisor (i.e., the multiplicity of an infinite eigenvalue).   The number of elements of id is the number of infinite elementary divisors of the pencil M-λN. \n\nThe normal rank nrank is the maximum rank of M-λN for all values of λ. If N = nothing, then nrank is the rank of M.  \n\nThe keyword arguements atol1, atol2  and rtol specify the absolute tolerance for the nonzero elements of M, the absolute tolerance for the nonzero elements of N, and the relative tolerance for the nonzero elements of M and N, respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of M, and ϵ is the  machine epsilon of the element type of M. \n\n\n\n\n\n","category":"function"},{"location":"klfapps.html#MatrixPencils.prank","page":"Some applications of matrix pencil computations","title":"MatrixPencils.prank","text":"prank(M::AbstractMatrix, N::AbstractMatrix; fastrank = true, atol1::Real=0, atol2::Real=0, rtol::Real=min(atol1,atol2)>0 ? 0 : n*ϵ)\n\nCompute the normal rank of a matrix pencil M - λN. If fastrank = true, the rank is evaluated  by counting how many singular values of M - γ N have magnitude greater than max(max(atol1,atol2), rtol*σ₁), where σ₁ is the largest singular value of M - γ N and γ is a randomly generated value. If fastrank = false,  the rank is evaluated as nr + ni + nf + nl, where nr and nl are the sums of right and left Kronecker indices,  respectively, while ni and nf are the number of infinite and finite eigenvalues, respectively. The sums nr+ni and   nf+nl, are determined from an appropriate Kronecker-like form (KLF) exhibiting the spliting of the right and left structures  of the pencil M - λN.\n\nThe keyword arguments atol1, atol2, and rtol, specify, respectively, the absolute tolerance for the  nonzero elements of M, the absolute tolerance for the nonzero elements of N,  and the relative tolerance  for the nonzero elements of M and N. The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of M, and ϵ is the  machine epsilon of the element type of M.  For efficiency purpose, the reduction to the relevant KLF is only partially performed  using rank decisions based on rank revealing SVD-decompositions. \n\ncompat: Julia 1.1\nThe use of atol and rtol keyword arguments in rank determinations requires at least Julia 1.1.  To enforce compatibility with Julia 1.0, the newer function rank in Julia 1.1 has been explicitly included. \n\n\n\n\n\n","category":"function"},{"location":"klfapps.html#MatrixPencils.peigvals","page":"Some applications of matrix pencil computations","title":"MatrixPencils.peigvals","text":"peigvals(M, N; fast = false, atol1::Real = 0, atol2::Real = 0, rtol::Real=min(atol1,atol2)>0 ? 0 : n*ϵ) -> (val, KRInfo)\n\nReturn the (finite and infinite) eigenvalues of the matrix pencil M-λN in val and   information on the  Kronecker-structure in the KRInfo object. \n\nThe information on the  Kronecker-structure consists of the right Kronecker indices rki, left Kronecker indices lki,  infinite elementary divisors id, the number of finite eigenvalues nf, and the normal rank nrank and can be obtained  from KRInfo as KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  pkstruct. \n\nThe computation of the eigenvalues is performed by reducing the pencil M-λN to an appropriate Kronecker-like form (KLF) exhibiting the spliting  of the infinite and finite eigenvalue structures of the pencil M-λN. The reduction is performed using orthonal similarity transformations and involves rank decisions based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations. \n\nThe keyword arguements atol1, atol2  and rtol specify the absolute tolerance for the nonzero elements of M, the absolute tolerance for the nonzero elements of N, and the relative tolerance for the nonzero elements of M and N, respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of M, and ϵ is the  machine epsilon of the element type of M. \n\n\n\n\n\n","category":"function"},{"location":"klfapps.html#MatrixPencils.pzeros","page":"Some applications of matrix pencil computations","title":"MatrixPencils.pzeros","text":"pzeros(M, N; fast = false, atol1::Real = 0, atol2::Real = 0, rtol::Real=min(atol1,atol2)>0 ? 0 : n*ϵ) -> (val, iz, KRInfo)\n\nReturn the finite and infinite zeros of the matrix pencil M-λN in val, the multiplicities of infinite zeros in iz and    information on the  Kronecker-structure in the KRInfo object. \n\nThe information on the multiplicities of infinite zeros is provided in the vector iz,  where each i-th element iz[i] is equal to k-1, where k is the order of an infinite elementary divisor with k > 0. The number of infinite zeros contained in val is the sum of the components of iz. \n\nThe information on the  Kronecker-structure consists of the right Kronecker indices rki, left Kronecker indices lki,  infinite elementary divisors id, the number of finite eigenvalues nf, and the normal rank nrank and can be obtained  from KRInfo as KRInfo.rki, KRInfo.lki, KRInfo.id, KRInfo.nf and KRInfo.nrank, respectively.  For more details, see  pkstruct. \n\nThe computation of the zeros is performed by reducing the pencil M-λN to an appropriate Kronecker-like form (KLF)  exhibiting the spliting of the infinite and finite eigenvalue structures of the pencil M-λN.  The reduction is performed using orthonal similarity transformations and involves rank decisions based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For efficiency purposes, the reduction is only partially performed, without accumulating the performed orthogonal transformations.\n\nThe keyword arguements atol1, atol2  and rtol specify the absolute tolerance for the nonzero elements of M, the absolute tolerance for the nonzero elements of N, and the relative tolerance for the nonzero elements of M and N, respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of M, and ϵ is the  machine epsilon of the element type of M. \n\n\n\n\n\n","category":"function"}]
}
